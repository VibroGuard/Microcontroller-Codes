
VibroGuard_Final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00002118  000021ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002118  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000348  00800128  00800128  000021d4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000021d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002230  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00002270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002565  00000000  00000000  00002428  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001094  00000000  00000000  0000498d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001195  00000000  00000000  00005a21  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000610  00000000  00000000  00006bb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a78  00000000  00000000  000071c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016c1  00000000  00000000  00007c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00009301  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 06 07 	jmp	0xe0c	; 0xe0c <__vector_13>
      38:	0c 94 10 02 	jmp	0x420	; 0x420 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 e1       	ldi	r30, 0x18	; 24
      7c:	f1 e2       	ldi	r31, 0x21	; 33
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 32       	cpi	r26, 0x28	; 40
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	24 e0       	ldi	r18, 0x04	; 4
      8c:	a8 e2       	ldi	r26, 0x28	; 40
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a0 37       	cpi	r26, 0x70	; 112
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 70 08 	call	0x10e0	; 0x10e0 <main>
      9e:	0c 94 8a 10 	jmp	0x2114	; 0x2114 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_ZN13Accelerometer5beginEi>:
#define MPU6050_REG_RESET 0x6B
#define MPU6050_REG_ACCEL_XOUT_H 0x3B

// Function to initialize the I2C connection and MPU6050
void Accelerometer::begin(int device_address)
{
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	ec 01       	movw	r28, r24
    i2c_address = device_address; // Set the device address for I2C communication
      ac:	79 83       	std	Y+1, r23	; 0x01
      ae:	68 83       	st	Y, r22

    I2c.timeOut(1000); // Set I2C timeout period to 1000ms, to automatically recover from lockups
      b0:	68 ee       	ldi	r22, 0xE8	; 232
      b2:	73 e0       	ldi	r23, 0x03	; 3
      b4:	8c e2       	ldi	r24, 0x2C	; 44
      b6:	91 e0       	ldi	r25, 0x01	; 1
      b8:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <_ZN3I2C7timeOutEj>

    I2c.begin(); // Initialize the I2C communication
      bc:	8c e2       	ldi	r24, 0x2C	; 44
      be:	91 e0       	ldi	r25, 0x01	; 1
      c0:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <_ZN3I2C5beginEv>
    I2c.write(i2c_address, MPU6050_REG_RESET, 0x00); // Write 0x00 to the MPU6050_REG_RESET register to reset the MPU6050
      c4:	68 81       	ld	r22, Y
      c6:	20 e0       	ldi	r18, 0x00	; 0
      c8:	4b e6       	ldi	r20, 0x6B	; 107
      ca:	8c e2       	ldi	r24, 0x2C	; 44
      cc:	91 e0       	ldi	r25, 0x01	; 1
      ce:	0e 94 cb 05 	call	0xb96	; 0xb96 <_ZN3I2C5writeEhhh>
    I2c.end(); // End the I2C communication
      d2:	8c e2       	ldi	r24, 0x2C	; 44
      d4:	91 e0       	ldi	r25, 0x01	; 1
      d6:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <_ZN3I2C3endEv>
}
      da:	df 91       	pop	r29
      dc:	cf 91       	pop	r28
      de:	08 95       	ret

000000e0 <_ZN13Accelerometer16readAccelerationEv>:

// Function to read acceleration values from the MPU6050
void Accelerometer::readAcceleration()
{
      e0:	cf 92       	push	r12
      e2:	df 92       	push	r13
      e4:	ef 92       	push	r14
      e6:	ff 92       	push	r15
      e8:	0f 93       	push	r16
      ea:	1f 93       	push	r17
      ec:	cf 93       	push	r28
      ee:	df 93       	push	r29
      f0:	7c 01       	movw	r14, r24
    int16_t rawAccX, rawAccY, rawAccZ; // Variables to store raw acceleration data

    I2c.begin(); // Initialize the I2C communication
      f2:	8c e2       	ldi	r24, 0x2C	; 44
      f4:	91 e0       	ldi	r25, 0x01	; 1
      f6:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <_ZN3I2C5beginEv>
    I2c.read(i2c_address, MPU6050_REG_ACCEL_XOUT_H, 6); // Read 6 bytes (x, y, z) from the MPU6050
      fa:	f7 01       	movw	r30, r14
      fc:	60 81       	ld	r22, Z
      fe:	26 e0       	ldi	r18, 0x06	; 6
     100:	4b e3       	ldi	r20, 0x3B	; 59
     102:	8c e2       	ldi	r24, 0x2C	; 44
     104:	91 e0       	ldi	r25, 0x01	; 1
     106:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN3I2C4readEhhh>

    // Read raw acceleration data from the I2C buffer
    rawAccX = (I2c.receive() << 8) | (I2c.receive());
     10a:	8c e2       	ldi	r24, 0x2C	; 44
     10c:	91 e0       	ldi	r25, 0x01	; 1
     10e:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN3I2C7receiveEv>
     112:	08 2f       	mov	r16, r24
     114:	10 e0       	ldi	r17, 0x00	; 0
     116:	10 2f       	mov	r17, r16
     118:	00 27       	eor	r16, r16
     11a:	8c e2       	ldi	r24, 0x2C	; 44
     11c:	91 e0       	ldi	r25, 0x01	; 1
     11e:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN3I2C7receiveEv>
     122:	08 2b       	or	r16, r24
    rawAccY = (I2c.receive() << 8) | (I2c.receive());
     124:	8c e2       	ldi	r24, 0x2C	; 44
     126:	91 e0       	ldi	r25, 0x01	; 1
     128:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN3I2C7receiveEv>
     12c:	c8 2f       	mov	r28, r24
     12e:	d0 e0       	ldi	r29, 0x00	; 0
     130:	dc 2f       	mov	r29, r28
     132:	cc 27       	eor	r28, r28
     134:	8c e2       	ldi	r24, 0x2C	; 44
     136:	91 e0       	ldi	r25, 0x01	; 1
     138:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN3I2C7receiveEv>
     13c:	6e 01       	movw	r12, r28
     13e:	c8 2a       	or	r12, r24
    rawAccZ = (I2c.receive() << 8) | (I2c.receive());
     140:	8c e2       	ldi	r24, 0x2C	; 44
     142:	91 e0       	ldi	r25, 0x01	; 1
     144:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN3I2C7receiveEv>
     148:	c8 2f       	mov	r28, r24
     14a:	d0 e0       	ldi	r29, 0x00	; 0
     14c:	dc 2f       	mov	r29, r28
     14e:	cc 27       	eor	r28, r28
     150:	8c e2       	ldi	r24, 0x2C	; 44
     152:	91 e0       	ldi	r25, 0x01	; 1
     154:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN3I2C7receiveEv>
     158:	c8 2b       	or	r28, r24

    I2c.end(); // End the I2C communication
     15a:	8c e2       	ldi	r24, 0x2C	; 44
     15c:	91 e0       	ldi	r25, 0x01	; 1
     15e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <_ZN3I2C3endEv>

    // Convert raw data to g-force (for Â±2g range)
    const float accScale = 16384.0; // Scaling factor for accelerometer
    accX = (float)rawAccX / accScale; // Convert raw X data to g-force
     162:	b8 01       	movw	r22, r16
     164:	11 0f       	add	r17, r17
     166:	88 0b       	sbc	r24, r24
     168:	99 0b       	sbc	r25, r25
     16a:	0e 94 91 09 	call	0x1322	; 0x1322 <__floatsisf>
     16e:	20 e0       	ldi	r18, 0x00	; 0
     170:	30 e0       	ldi	r19, 0x00	; 0
     172:	40 e8       	ldi	r20, 0x80	; 128
     174:	58 e3       	ldi	r21, 0x38	; 56
     176:	0e 94 75 0a 	call	0x14ea	; 0x14ea <__mulsf3>
     17a:	f7 01       	movw	r30, r14
     17c:	62 83       	std	Z+2, r22	; 0x02
     17e:	73 83       	std	Z+3, r23	; 0x03
     180:	84 83       	std	Z+4, r24	; 0x04
     182:	95 83       	std	Z+5, r25	; 0x05
    accY = (float)rawAccY / accScale; // Convert raw Y data to g-force
     184:	b6 01       	movw	r22, r12
     186:	dd 0c       	add	r13, r13
     188:	88 0b       	sbc	r24, r24
     18a:	99 0b       	sbc	r25, r25
     18c:	0e 94 91 09 	call	0x1322	; 0x1322 <__floatsisf>
     190:	20 e0       	ldi	r18, 0x00	; 0
     192:	30 e0       	ldi	r19, 0x00	; 0
     194:	40 e8       	ldi	r20, 0x80	; 128
     196:	58 e3       	ldi	r21, 0x38	; 56
     198:	0e 94 75 0a 	call	0x14ea	; 0x14ea <__mulsf3>
     19c:	f7 01       	movw	r30, r14
     19e:	66 83       	std	Z+6, r22	; 0x06
     1a0:	77 83       	std	Z+7, r23	; 0x07
     1a2:	80 87       	std	Z+8, r24	; 0x08
     1a4:	91 87       	std	Z+9, r25	; 0x09
    accZ = (float)rawAccZ / accScale; // Convert raw Z data to g-force
     1a6:	be 01       	movw	r22, r28
     1a8:	dd 0f       	add	r29, r29
     1aa:	88 0b       	sbc	r24, r24
     1ac:	99 0b       	sbc	r25, r25
     1ae:	0e 94 91 09 	call	0x1322	; 0x1322 <__floatsisf>
     1b2:	20 e0       	ldi	r18, 0x00	; 0
     1b4:	30 e0       	ldi	r19, 0x00	; 0
     1b6:	40 e8       	ldi	r20, 0x80	; 128
     1b8:	58 e3       	ldi	r21, 0x38	; 56
     1ba:	0e 94 75 0a 	call	0x14ea	; 0x14ea <__mulsf3>
     1be:	f7 01       	movw	r30, r14
     1c0:	62 87       	std	Z+10, r22	; 0x0a
     1c2:	73 87       	std	Z+11, r23	; 0x0b
     1c4:	84 87       	std	Z+12, r24	; 0x0c
     1c6:	95 87       	std	Z+13, r25	; 0x0d
}
     1c8:	df 91       	pop	r29
     1ca:	cf 91       	pop	r28
     1cc:	1f 91       	pop	r17
     1ce:	0f 91       	pop	r16
     1d0:	ff 90       	pop	r15
     1d2:	ef 90       	pop	r14
     1d4:	df 90       	pop	r13
     1d6:	cf 90       	pop	r12
     1d8:	08 95       	ret

000001da <_ZN13Accelerometer15getAccelerationEv>:

// Function to get acceleration values and map them to a 0-255 range
struct accComp Accelerometer::getAcceleration()
{
     1da:	6f 92       	push	r6
     1dc:	7f 92       	push	r7
     1de:	8f 92       	push	r8
     1e0:	9f 92       	push	r9
     1e2:	af 92       	push	r10
     1e4:	bf 92       	push	r11
     1e6:	cf 92       	push	r12
     1e8:	df 92       	push	r13
     1ea:	ef 92       	push	r14
     1ec:	ff 92       	push	r15
     1ee:	0f 93       	push	r16
     1f0:	1f 93       	push	r17
     1f2:	cf 93       	push	r28
     1f4:	df 93       	push	r29
     1f6:	ec 01       	movw	r28, r24
    readAcceleration(); // Read the current acceleration values
     1f8:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN13Accelerometer16readAccelerationEv>

    struct accComp readings; // Structure to store the mapped acceleration values

    // Map accelerometer values to 0-255 range
    readings.AccX = (uint8_t)map_range(accX * 100, -200, 200, 0, 255);
     1fc:	6a 81       	ldd	r22, Y+2	; 0x02
     1fe:	7b 81       	ldd	r23, Y+3	; 0x03
     200:	8c 81       	ldd	r24, Y+4	; 0x04
     202:	9d 81       	ldd	r25, Y+5	; 0x05
     204:	20 e0       	ldi	r18, 0x00	; 0
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	48 ec       	ldi	r20, 0xC8	; 200
     20a:	52 e4       	ldi	r21, 0x42	; 66
     20c:	0e 94 75 0a 	call	0x14ea	; 0x14ea <__mulsf3>
     210:	0f 2e       	mov	r0, r31
     212:	f3 e4       	ldi	r31, 0x43	; 67
     214:	8f 2e       	mov	r8, r31
     216:	f0 2d       	mov	r31, r0
     218:	8f 92       	push	r8
     21a:	0f 2e       	mov	r0, r31
     21c:	ff e7       	ldi	r31, 0x7F	; 127
     21e:	9f 2e       	mov	r9, r31
     220:	f0 2d       	mov	r31, r0
     222:	9f 92       	push	r9
     224:	1f 92       	push	r1
     226:	1f 92       	push	r1
     228:	a1 2c       	mov	r10, r1
     22a:	b1 2c       	mov	r11, r1
     22c:	65 01       	movw	r12, r10
     22e:	e1 2c       	mov	r14, r1
     230:	f1 2c       	mov	r15, r1
     232:	08 e4       	ldi	r16, 0x48	; 72
     234:	13 e4       	ldi	r17, 0x43	; 67
     236:	20 e0       	ldi	r18, 0x00	; 0
     238:	30 e0       	ldi	r19, 0x00	; 0
     23a:	48 e4       	ldi	r20, 0x48	; 72
     23c:	53 ec       	ldi	r21, 0xC3	; 195
     23e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z9map_rangefffff>
     242:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__fixunssfsi>
     246:	66 2e       	mov	r6, r22
    readings.AccY = (uint8_t)map_range(accY * 100, -200, 200, 0, 255);
     248:	6e 81       	ldd	r22, Y+6	; 0x06
     24a:	7f 81       	ldd	r23, Y+7	; 0x07
     24c:	88 85       	ldd	r24, Y+8	; 0x08
     24e:	99 85       	ldd	r25, Y+9	; 0x09
     250:	20 e0       	ldi	r18, 0x00	; 0
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	48 ec       	ldi	r20, 0xC8	; 200
     256:	52 e4       	ldi	r21, 0x42	; 66
     258:	0e 94 75 0a 	call	0x14ea	; 0x14ea <__mulsf3>
     25c:	8f 92       	push	r8
     25e:	9f 92       	push	r9
     260:	1f 92       	push	r1
     262:	1f 92       	push	r1
     264:	20 e0       	ldi	r18, 0x00	; 0
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	48 e4       	ldi	r20, 0x48	; 72
     26a:	53 ec       	ldi	r21, 0xC3	; 195
     26c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z9map_rangefffff>
     270:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__fixunssfsi>
     274:	76 2e       	mov	r7, r22
    readings.AccZ = (uint8_t)map_range(accZ * 100, -200, 200, 0, 255);
     276:	6a 85       	ldd	r22, Y+10	; 0x0a
     278:	7b 85       	ldd	r23, Y+11	; 0x0b
     27a:	8c 85       	ldd	r24, Y+12	; 0x0c
     27c:	9d 85       	ldd	r25, Y+13	; 0x0d
     27e:	20 e0       	ldi	r18, 0x00	; 0
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	48 ec       	ldi	r20, 0xC8	; 200
     284:	52 e4       	ldi	r21, 0x42	; 66
     286:	0e 94 75 0a 	call	0x14ea	; 0x14ea <__mulsf3>
     28a:	8f 92       	push	r8
     28c:	9f 92       	push	r9
     28e:	1f 92       	push	r1
     290:	1f 92       	push	r1
     292:	20 e0       	ldi	r18, 0x00	; 0
     294:	30 e0       	ldi	r19, 0x00	; 0
     296:	48 e4       	ldi	r20, 0x48	; 72
     298:	53 ec       	ldi	r21, 0xC3	; 195
     29a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z9map_rangefffff>
     29e:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__fixunssfsi>
     2a2:	86 2f       	mov	r24, r22

    return readings; // Return the mapped acceleration values
     2a4:	2d b7       	in	r18, 0x3d	; 61
     2a6:	3e b7       	in	r19, 0x3e	; 62
     2a8:	24 5f       	subi	r18, 0xF4	; 244
     2aa:	3f 4f       	sbci	r19, 0xFF	; 255
     2ac:	0f b6       	in	r0, 0x3f	; 63
     2ae:	f8 94       	cli
     2b0:	3e bf       	out	0x3e, r19	; 62
     2b2:	0f be       	out	0x3f, r0	; 63
     2b4:	2d bf       	out	0x3d, r18	; 61
}
     2b6:	66 2d       	mov	r22, r6
     2b8:	77 2d       	mov	r23, r7
     2ba:	df 91       	pop	r29
     2bc:	cf 91       	pop	r28
     2be:	1f 91       	pop	r17
     2c0:	0f 91       	pop	r16
     2c2:	ff 90       	pop	r15
     2c4:	ef 90       	pop	r14
     2c6:	df 90       	pop	r13
     2c8:	cf 90       	pop	r12
     2ca:	bf 90       	pop	r11
     2cc:	af 90       	pop	r10
     2ce:	9f 90       	pop	r9
     2d0:	8f 90       	pop	r8
     2d2:	7f 90       	pop	r7
     2d4:	6f 90       	pop	r6
     2d6:	08 95       	ret

000002d8 <_Z9map_rangefffff>:

#include "auxiliary_functions.h"

// Function to map a value from one range to another
float map_range(float value, float prevLimitLower, float prevLimitUpper, float nextLimitLower, float nextLimitUpper)
{
     2d8:	4f 92       	push	r4
     2da:	5f 92       	push	r5
     2dc:	6f 92       	push	r6
     2de:	7f 92       	push	r7
     2e0:	af 92       	push	r10
     2e2:	bf 92       	push	r11
     2e4:	cf 92       	push	r12
     2e6:	df 92       	push	r13
     2e8:	ef 92       	push	r14
     2ea:	ff 92       	push	r15
     2ec:	0f 93       	push	r16
     2ee:	1f 93       	push	r17
     2f0:	cf 93       	push	r28
     2f2:	df 93       	push	r29
     2f4:	cd b7       	in	r28, 0x3d	; 61
     2f6:	de b7       	in	r29, 0x3e	; 62
     2f8:	28 97       	sbiw	r28, 0x08	; 8
     2fa:	0f b6       	in	r0, 0x3f	; 63
     2fc:	f8 94       	cli
     2fe:	de bf       	out	0x3e, r29	; 62
     300:	0f be       	out	0x3f, r0	; 63
     302:	cd bf       	out	0x3d, r28	; 61
     304:	29 01       	movw	r4, r18
     306:	3a 01       	movw	r6, r20
     308:	e9 82       	std	Y+1, r14	; 0x01
     30a:	fa 82       	std	Y+2, r15	; 0x02
     30c:	0b 83       	std	Y+3, r16	; 0x03
     30e:	1c 83       	std	Y+4, r17	; 0x04
    return nextLimitLower + ((value - prevLimitLower) / (prevLimitUpper - prevLimitLower) * (nextLimitUpper - nextLimitLower));
     310:	0e 94 75 08 	call	0x10ea	; 0x10ea <__subsf3>
     314:	6d 83       	std	Y+5, r22	; 0x05
     316:	7e 83       	std	Y+6, r23	; 0x06
     318:	8f 83       	std	Y+7, r24	; 0x07
     31a:	98 87       	std	Y+8, r25	; 0x08
     31c:	a3 01       	movw	r20, r6
     31e:	92 01       	movw	r18, r4
     320:	c8 01       	movw	r24, r16
     322:	b7 01       	movw	r22, r14
     324:	0e 94 75 08 	call	0x10ea	; 0x10ea <__subsf3>
     328:	9b 01       	movw	r18, r22
     32a:	ac 01       	movw	r20, r24
     32c:	6d 81       	ldd	r22, Y+5	; 0x05
     32e:	7e 81       	ldd	r23, Y+6	; 0x06
     330:	8f 81       	ldd	r24, Y+7	; 0x07
     332:	98 85       	ldd	r25, Y+8	; 0x08
     334:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__divsf3>
     338:	2b 01       	movw	r4, r22
     33a:	3c 01       	movw	r6, r24
     33c:	a6 01       	movw	r20, r12
     33e:	95 01       	movw	r18, r10
     340:	69 8d       	ldd	r22, Y+25	; 0x19
     342:	7a 8d       	ldd	r23, Y+26	; 0x1a
     344:	8b 8d       	ldd	r24, Y+27	; 0x1b
     346:	9c 8d       	ldd	r25, Y+28	; 0x1c
     348:	0e 94 75 08 	call	0x10ea	; 0x10ea <__subsf3>
     34c:	9b 01       	movw	r18, r22
     34e:	ac 01       	movw	r20, r24
     350:	c3 01       	movw	r24, r6
     352:	b2 01       	movw	r22, r4
     354:	0e 94 75 0a 	call	0x14ea	; 0x14ea <__mulsf3>
     358:	9b 01       	movw	r18, r22
     35a:	ac 01       	movw	r20, r24
     35c:	c6 01       	movw	r24, r12
     35e:	b5 01       	movw	r22, r10
     360:	0e 94 76 08 	call	0x10ec	; 0x10ec <__addsf3>
}
     364:	28 96       	adiw	r28, 0x08	; 8
     366:	0f b6       	in	r0, 0x3f	; 63
     368:	f8 94       	cli
     36a:	de bf       	out	0x3e, r29	; 62
     36c:	0f be       	out	0x3f, r0	; 63
     36e:	cd bf       	out	0x3d, r28	; 61
     370:	df 91       	pop	r29
     372:	cf 91       	pop	r28
     374:	1f 91       	pop	r17
     376:	0f 91       	pop	r16
     378:	ff 90       	pop	r15
     37a:	ef 90       	pop	r14
     37c:	df 90       	pop	r13
     37e:	cf 90       	pop	r12
     380:	bf 90       	pop	r11
     382:	af 90       	pop	r10
     384:	7f 90       	pop	r7
     386:	6f 90       	pop	r6
     388:	5f 90       	pop	r5
     38a:	4f 90       	pop	r4
     38c:	08 95       	ret

0000038e <_Z9to_stringf>:

char *to_string(float value)
{
     38e:	ef 92       	push	r14
     390:	ff 92       	push	r15
     392:	0f 93       	push	r16
     394:	1f 93       	push	r17
     396:	cf 93       	push	r28
     398:	df 93       	push	r29
     39a:	cd b7       	in	r28, 0x3d	; 61
     39c:	de b7       	in	r29, 0x3e	; 62
     39e:	2f 97       	sbiw	r28, 0x0f	; 15
     3a0:	0f b6       	in	r0, 0x3f	; 63
     3a2:	f8 94       	cli
     3a4:	de bf       	out	0x3e, r29	; 62
     3a6:	0f be       	out	0x3f, r0	; 63
     3a8:	cd bf       	out	0x3d, r28	; 61
    char buffer[15];
    floatToString(value, buffer, sizeof(buffer), 2);
     3aa:	02 e0       	ldi	r16, 0x02	; 2
     3ac:	10 e0       	ldi	r17, 0x00	; 0
     3ae:	2f e0       	ldi	r18, 0x0F	; 15
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	ae 01       	movw	r20, r28
     3b4:	4f 5f       	subi	r20, 0xFF	; 255
     3b6:	5f 4f       	sbci	r21, 0xFF	; 255
     3b8:	7a 01       	movw	r14, r20
     3ba:	0e 94 40 02 	call	0x480	; 0x480 <_Z13floatToStringfPcji>

    // Allocate memory for the C-string (+1 for null terminator)
    char *cstr = (char *)malloc(strlen(buffer) + 1);
     3be:	f7 01       	movw	r30, r14
     3c0:	01 90       	ld	r0, Z+
     3c2:	00 20       	and	r0, r0
     3c4:	e9 f7       	brne	.-6      	; 0x3c0 <_Z9to_stringf+0x32>
     3c6:	31 97       	sbiw	r30, 0x01	; 1
     3c8:	cf 01       	movw	r24, r30
     3ca:	8e 19       	sub	r24, r14
     3cc:	9f 09       	sbc	r25, r15
     3ce:	01 96       	adiw	r24, 0x01	; 1
     3d0:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <malloc>
     3d4:	8c 01       	movw	r16, r24
    if (cstr == NULL)
     3d6:	00 97       	sbiw	r24, 0x00	; 0
     3d8:	31 f0       	breq	.+12     	; 0x3e6 <_Z9to_stringf+0x58>
    {
        return NULL; // Handle allocation failure
    }

    strcpy(cstr, buffer); // Copy the formatted string to the allocated memory
     3da:	b7 01       	movw	r22, r14
     3dc:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <strcpy>
    return cstr;          // Return the C-string
     3e0:	80 2f       	mov	r24, r16
     3e2:	91 2f       	mov	r25, r17
     3e4:	02 c0       	rjmp	.+4      	; 0x3ea <_Z9to_stringf+0x5c>

    // Allocate memory for the C-string (+1 for null terminator)
    char *cstr = (char *)malloc(strlen(buffer) + 1);
    if (cstr == NULL)
    {
        return NULL; // Handle allocation failure
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	90 e0       	ldi	r25, 0x00	; 0
    }

    strcpy(cstr, buffer); // Copy the formatted string to the allocated memory
    return cstr;          // Return the C-string
}
     3ea:	2f 96       	adiw	r28, 0x0f	; 15
     3ec:	0f b6       	in	r0, 0x3f	; 63
     3ee:	f8 94       	cli
     3f0:	de bf       	out	0x3e, r29	; 62
     3f2:	0f be       	out	0x3f, r0	; 63
     3f4:	cd bf       	out	0x3d, r28	; 61
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	1f 91       	pop	r17
     3fc:	0f 91       	pop	r16
     3fe:	ff 90       	pop	r15
     400:	ef 90       	pop	r14
     402:	08 95       	ret

00000404 <_Z20setup_millis_counterv>:
// Function to configure Timer0 for counting milliseconds
void setup_millis_counter()
{
    // Configure Timer0
    // Set Timer0 to CTC (Clear Timer on Compare Match) mode
    TCCR0A = 0;
     404:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0;
     406:	15 bc       	out	0x25, r1	; 37

    // Set compare match register to desired timer count (250 ticks with a prescaler of 64)
    OCR0A = 249; // Timer0 counts 250 ticks (prescaler is 64)
     408:	89 ef       	ldi	r24, 0xF9	; 249
     40a:	87 bd       	out	0x27, r24	; 39

    // Enable Timer0 compare match A interrupt
    TIMSK0 |= (1 << OCIE0A);
     40c:	ee e6       	ldi	r30, 0x6E	; 110
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	80 81       	ld	r24, Z
     412:	82 60       	ori	r24, 0x02	; 2
     414:	80 83       	st	Z, r24

    // Set prescaler to 64 and start Timer0
    TCCR0B |= (1 << CS01) | (1 << CS00); // prescaler = 64
     416:	85 b5       	in	r24, 0x25	; 37
     418:	83 60       	ori	r24, 0x03	; 3
     41a:	85 bd       	out	0x25, r24	; 37

    // Enable global interrupts
    sei();
     41c:	78 94       	sei
     41e:	08 95       	ret

00000420 <__vector_14>:
}

// Timer0 compare match A interrupt service routine
ISR(TIMER0_COMPA_vect)
{
     420:	1f 92       	push	r1
     422:	0f 92       	push	r0
     424:	0f b6       	in	r0, 0x3f	; 63
     426:	0f 92       	push	r0
     428:	11 24       	eor	r1, r1
     42a:	8f 93       	push	r24
     42c:	9f 93       	push	r25
     42e:	af 93       	push	r26
     430:	bf 93       	push	r27
    timer0_millis_++; // Increment the millisecond counter
     432:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
     436:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__data_end+0x1>
     43a:	a0 91 2a 01 	lds	r26, 0x012A	; 0x80012a <__data_end+0x2>
     43e:	b0 91 2b 01 	lds	r27, 0x012B	; 0x80012b <__data_end+0x3>
     442:	01 96       	adiw	r24, 0x01	; 1
     444:	a1 1d       	adc	r26, r1
     446:	b1 1d       	adc	r27, r1
     448:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
     44c:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__data_end+0x1>
     450:	a0 93 2a 01 	sts	0x012A, r26	; 0x80012a <__data_end+0x2>
     454:	b0 93 2b 01 	sts	0x012B, r27	; 0x80012b <__data_end+0x3>
}
     458:	bf 91       	pop	r27
     45a:	af 91       	pop	r26
     45c:	9f 91       	pop	r25
     45e:	8f 91       	pop	r24
     460:	0f 90       	pop	r0
     462:	0f be       	out	0x3f, r0	; 63
     464:	0f 90       	pop	r0
     466:	1f 90       	pop	r1
     468:	18 95       	reti

0000046a <_Z14millis_elapsedv>:
// Function to get the elapsed milliseconds since Timer0 was configured
unsigned long millis_elapsed()
{
    unsigned long millis;
    // Ensure consistent reading (interrupts should be disabled when reading)
    cli();                   // Disable interrupts
     46a:	f8 94       	cli
    millis = timer0_millis_; // Read the millisecond counter
     46c:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <__data_end>
     470:	70 91 29 01 	lds	r23, 0x0129	; 0x800129 <__data_end+0x1>
     474:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end+0x2>
     478:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__data_end+0x3>
    sei();                   // Enable interrupts
     47c:	78 94       	sei
    return millis;           // Return the elapsed milliseconds
}
     47e:	08 95       	ret

00000480 <_Z13floatToStringfPcji>:
#include <stddef.h>
#include <math.h>
#include "floatToString.h"

char *floatToString(float f, char *S, size_t n, int digitsAfterDP)
{
     480:	2f 92       	push	r2
     482:	3f 92       	push	r3
     484:	4f 92       	push	r4
     486:	5f 92       	push	r5
     488:	6f 92       	push	r6
     48a:	7f 92       	push	r7
     48c:	8f 92       	push	r8
     48e:	9f 92       	push	r9
     490:	af 92       	push	r10
     492:	bf 92       	push	r11
     494:	cf 92       	push	r12
     496:	df 92       	push	r13
     498:	ef 92       	push	r14
     49a:	ff 92       	push	r15
     49c:	0f 93       	push	r16
     49e:	1f 93       	push	r17
     4a0:	cf 93       	push	r28
     4a2:	df 93       	push	r29
     4a4:	cd b7       	in	r28, 0x3d	; 61
     4a6:	de b7       	in	r29, 0x3e	; 62
     4a8:	2a 97       	sbiw	r28, 0x0a	; 10
     4aa:	0f b6       	in	r0, 0x3f	; 63
     4ac:	f8 94       	cli
     4ae:	de bf       	out	0x3e, r29	; 62
     4b0:	0f be       	out	0x3f, r0	; 63
     4b2:	cd bf       	out	0x3d, r28	; 61
     4b4:	6b 01       	movw	r12, r22
     4b6:	7c 01       	movw	r14, r24
     4b8:	84 2e       	mov	r8, r20
     4ba:	95 2e       	mov	r9, r21
     4bc:	32 2e       	mov	r3, r18
     4be:	23 2e       	mov	r2, r19
  if (digitsAfterDP == 0)
     4c0:	01 15       	cp	r16, r1
     4c2:	11 05       	cpc	r17, r1
     4c4:	41 f5       	brne	.+80     	; 0x516 <_Z13floatToStringfPcji+0x96>
    snprintf(S, n, "%d", (int)(f + (f < 0 ? -0.5 : 0.5)));
     4c6:	20 e0       	ldi	r18, 0x00	; 0
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	a9 01       	movw	r20, r18
     4cc:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__cmpsf2>
     4d0:	88 23       	and	r24, r24
     4d2:	2c f4       	brge	.+10     	; 0x4de <_Z13floatToStringfPcji+0x5e>
     4d4:	60 e0       	ldi	r22, 0x00	; 0
     4d6:	70 e0       	ldi	r23, 0x00	; 0
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	9f eb       	ldi	r25, 0xBF	; 191
     4dc:	04 c0       	rjmp	.+8      	; 0x4e6 <_Z13floatToStringfPcji+0x66>
     4de:	60 e0       	ldi	r22, 0x00	; 0
     4e0:	70 e0       	ldi	r23, 0x00	; 0
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	9f e3       	ldi	r25, 0x3F	; 63
     4e6:	a7 01       	movw	r20, r14
     4e8:	96 01       	movw	r18, r12
     4ea:	0e 94 76 08 	call	0x10ec	; 0x10ec <__addsf3>
     4ee:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__fixsfsi>
     4f2:	7f 93       	push	r23
     4f4:	6f 93       	push	r22
     4f6:	87 e0       	ldi	r24, 0x07	; 7
     4f8:	91 e0       	ldi	r25, 0x01	; 1
     4fa:	9f 93       	push	r25
     4fc:	8f 93       	push	r24
     4fe:	2f 92       	push	r2
     500:	3f 92       	push	r3
     502:	9f 92       	push	r9
     504:	8f 92       	push	r8
     506:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <snprintf>
     50a:	0f b6       	in	r0, 0x3f	; 63
     50c:	f8 94       	cli
     50e:	de bf       	out	0x3e, r29	; 62
     510:	0f be       	out	0x3f, r0	; 63
     512:	cd bf       	out	0x3d, r28	; 61
     514:	b9 c0       	rjmp	.+370    	; 0x688 <_Z13floatToStringfPcji+0x208>
  else if (digitsAfterDP < 0)
     516:	11 23       	and	r17, r17
     518:	0c f0       	brlt	.+2      	; 0x51c <_Z13floatToStringfPcji+0x9c>
     51a:	63 c0       	rjmp	.+198    	; 0x5e2 <_Z13floatToStringfPcji+0x162>
     51c:	a1 2c       	mov	r10, r1
     51e:	b1 2c       	mov	r11, r1
  {
    int i;
    for (i = 0; i < -digitsAfterDP && abs(f) >= 10; i++)
     520:	88 27       	eor	r24, r24
     522:	99 27       	eor	r25, r25
     524:	80 1b       	sub	r24, r16
     526:	91 0b       	sbc	r25, r17
     528:	a8 16       	cp	r10, r24
     52a:	b9 06       	cpc	r11, r25
     52c:	e4 f4       	brge	.+56     	; 0x566 <_Z13floatToStringfPcji+0xe6>
     52e:	c7 01       	movw	r24, r14
     530:	b6 01       	movw	r22, r12
     532:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__fixsfsi>
     536:	9b 01       	movw	r18, r22
     538:	77 23       	and	r23, r23
     53a:	24 f4       	brge	.+8      	; 0x544 <_Z13floatToStringfPcji+0xc4>
     53c:	22 27       	eor	r18, r18
     53e:	33 27       	eor	r19, r19
     540:	26 1b       	sub	r18, r22
     542:	37 0b       	sbc	r19, r23
     544:	2a 30       	cpi	r18, 0x0A	; 10
     546:	31 05       	cpc	r19, r1
     548:	74 f0       	brlt	.+28     	; 0x566 <_Z13floatToStringfPcji+0xe6>
      f /= 10;
     54a:	20 e0       	ldi	r18, 0x00	; 0
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	40 e2       	ldi	r20, 0x20	; 32
     550:	51 e4       	ldi	r21, 0x41	; 65
     552:	c7 01       	movw	r24, r14
     554:	b6 01       	movw	r22, r12
     556:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__divsf3>
     55a:	6b 01       	movw	r12, r22
     55c:	7c 01       	movw	r14, r24
  if (digitsAfterDP == 0)
    snprintf(S, n, "%d", (int)(f + (f < 0 ? -0.5 : 0.5)));
  else if (digitsAfterDP < 0)
  {
    int i;
    for (i = 0; i < -digitsAfterDP && abs(f) >= 10; i++)
     55e:	9f ef       	ldi	r25, 0xFF	; 255
     560:	a9 1a       	sub	r10, r25
     562:	b9 0a       	sbc	r11, r25
     564:	dd cf       	rjmp	.-70     	; 0x520 <_Z13floatToStringfPcji+0xa0>
      f /= 10;
    char fmt[10]; // "%d%02d"
    sprintf(fmt, "%%d%%0%dd", i);
     566:	bf 92       	push	r11
     568:	af 92       	push	r10
     56a:	8a e0       	ldi	r24, 0x0A	; 10
     56c:	91 e0       	ldi	r25, 0x01	; 1
     56e:	9f 93       	push	r25
     570:	8f 93       	push	r24
     572:	ce 01       	movw	r24, r28
     574:	01 96       	adiw	r24, 0x01	; 1
     576:	9f 93       	push	r25
     578:	8f 93       	push	r24
     57a:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <sprintf>
    snprintf(S, n, fmt, (int)(f + (f < 0 ? -0.5 : 0.5)), 0);
     57e:	0f 90       	pop	r0
     580:	0f 90       	pop	r0
     582:	0f 90       	pop	r0
     584:	0f 90       	pop	r0
     586:	0f 90       	pop	r0
     588:	0f 90       	pop	r0
     58a:	20 e0       	ldi	r18, 0x00	; 0
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	a9 01       	movw	r20, r18
     590:	c7 01       	movw	r24, r14
     592:	b6 01       	movw	r22, r12
     594:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__cmpsf2>
     598:	88 23       	and	r24, r24
     59a:	2c f4       	brge	.+10     	; 0x5a6 <_Z13floatToStringfPcji+0x126>
     59c:	20 e0       	ldi	r18, 0x00	; 0
     59e:	30 e0       	ldi	r19, 0x00	; 0
     5a0:	40 e0       	ldi	r20, 0x00	; 0
     5a2:	5f eb       	ldi	r21, 0xBF	; 191
     5a4:	04 c0       	rjmp	.+8      	; 0x5ae <_Z13floatToStringfPcji+0x12e>
     5a6:	20 e0       	ldi	r18, 0x00	; 0
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	40 e0       	ldi	r20, 0x00	; 0
     5ac:	5f e3       	ldi	r21, 0x3F	; 63
     5ae:	c7 01       	movw	r24, r14
     5b0:	b6 01       	movw	r22, r12
     5b2:	0e 94 76 08 	call	0x10ec	; 0x10ec <__addsf3>
     5b6:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__fixsfsi>
     5ba:	1f 92       	push	r1
     5bc:	1f 92       	push	r1
     5be:	7f 93       	push	r23
     5c0:	6f 93       	push	r22
     5c2:	ce 01       	movw	r24, r28
     5c4:	01 96       	adiw	r24, 0x01	; 1
     5c6:	9f 93       	push	r25
     5c8:	8f 93       	push	r24
     5ca:	2f 92       	push	r2
     5cc:	3f 92       	push	r3
     5ce:	9f 92       	push	r9
     5d0:	8f 92       	push	r8
     5d2:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <snprintf>
     5d6:	0f b6       	in	r0, 0x3f	; 63
     5d8:	f8 94       	cli
     5da:	de bf       	out	0x3e, r29	; 62
     5dc:	0f be       	out	0x3f, r0	; 63
     5de:	cd bf       	out	0x3d, r28	; 61
     5e0:	53 c0       	rjmp	.+166    	; 0x688 <_Z13floatToStringfPcji+0x208>
  }
  else
  {
    int M = (int)f;
     5e2:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__fixsfsi>
     5e6:	b6 2e       	mov	r11, r22
     5e8:	a7 2e       	mov	r10, r23
    // f = abs(f - (float) M);
    f = modf(f, NULL);
     5ea:	40 e0       	ldi	r20, 0x00	; 0
     5ec:	50 e0       	ldi	r21, 0x00	; 0
     5ee:	c7 01       	movw	r24, r14
     5f0:	b6 01       	movw	r22, r12
     5f2:	0e 94 41 0a 	call	0x1482	; 0x1482 <modf>
     5f6:	2b 01       	movw	r4, r22
     5f8:	3c 01       	movw	r6, r24
    if (f < 0) f *= -1;
     5fa:	20 e0       	ldi	r18, 0x00	; 0
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	a9 01       	movw	r20, r18
     600:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__cmpsf2>
     604:	88 23       	and	r24, r24
     606:	24 f4       	brge	.+8      	; 0x610 <_Z13floatToStringfPcji+0x190>
     608:	77 fa       	bst	r7, 7
     60a:	70 94       	com	r7
     60c:	77 f8       	bld	r7, 7
     60e:	70 94       	com	r7
    int i;
    for (i = 0; i < -digitsAfterDP && abs(f) >= 10; i++)
      f /= 10;
    char fmt[10]; // "%d%02d"
    sprintf(fmt, "%%d%%0%dd", i);
    snprintf(S, n, fmt, (int)(f + (f < 0 ? -0.5 : 0.5)), 0);
     610:	78 01       	movw	r14, r16
  {
    int M = (int)f;
    // f = abs(f - (float) M);
    f = modf(f, NULL);
    if (f < 0) f *= -1;
    for (int i = digitsAfterDP; i > 0; i--)
     612:	1e 14       	cp	r1, r14
     614:	1f 04       	cpc	r1, r15
     616:	74 f4       	brge	.+28     	; 0x634 <_Z13floatToStringfPcji+0x1b4>
      f *= 10;
     618:	20 e0       	ldi	r18, 0x00	; 0
     61a:	30 e0       	ldi	r19, 0x00	; 0
     61c:	40 e2       	ldi	r20, 0x20	; 32
     61e:	51 e4       	ldi	r21, 0x41	; 65
     620:	c3 01       	movw	r24, r6
     622:	b2 01       	movw	r22, r4
     624:	0e 94 75 0a 	call	0x14ea	; 0x14ea <__mulsf3>
     628:	2b 01       	movw	r4, r22
     62a:	3c 01       	movw	r6, r24
  {
    int M = (int)f;
    // f = abs(f - (float) M);
    f = modf(f, NULL);
    if (f < 0) f *= -1;
    for (int i = digitsAfterDP; i > 0; i--)
     62c:	91 e0       	ldi	r25, 0x01	; 1
     62e:	e9 1a       	sub	r14, r25
     630:	f1 08       	sbc	r15, r1
     632:	ef cf       	rjmp	.-34     	; 0x612 <_Z13floatToStringfPcji+0x192>
      f *= 10;
    int E = (int)(f + 0.5);
     634:	20 e0       	ldi	r18, 0x00	; 0
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	40 e0       	ldi	r20, 0x00	; 0
     63a:	5f e3       	ldi	r21, 0x3F	; 63
     63c:	c3 01       	movw	r24, r6
     63e:	b2 01       	movw	r22, r4
     640:	0e 94 76 08 	call	0x10ec	; 0x10ec <__addsf3>
     644:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__fixsfsi>
     648:	f6 2e       	mov	r15, r22
     64a:	e7 2e       	mov	r14, r23
    char fmt[10]; // "%d.%05d"
    sprintf(fmt, "%%d.%%0%dd", digitsAfterDP);
     64c:	1f 93       	push	r17
     64e:	0f 93       	push	r16
     650:	84 e1       	ldi	r24, 0x14	; 20
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	9f 93       	push	r25
     656:	8f 93       	push	r24
     658:	8e 01       	movw	r16, r28
     65a:	0f 5f       	subi	r16, 0xFF	; 255
     65c:	1f 4f       	sbci	r17, 0xFF	; 255
     65e:	1f 93       	push	r17
     660:	0f 93       	push	r16
     662:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <sprintf>
    snprintf(S, n, fmt, M, E);
     666:	ef 92       	push	r14
     668:	ff 92       	push	r15
     66a:	af 92       	push	r10
     66c:	bf 92       	push	r11
     66e:	1f 93       	push	r17
     670:	0f 93       	push	r16
     672:	2f 92       	push	r2
     674:	3f 92       	push	r3
     676:	9f 92       	push	r9
     678:	8f 92       	push	r8
     67a:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <snprintf>
     67e:	0f b6       	in	r0, 0x3f	; 63
     680:	f8 94       	cli
     682:	de bf       	out	0x3e, r29	; 62
     684:	0f be       	out	0x3f, r0	; 63
     686:	cd bf       	out	0x3d, r28	; 61
  }
  return (S);
}
     688:	88 2d       	mov	r24, r8
     68a:	99 2d       	mov	r25, r9
     68c:	2a 96       	adiw	r28, 0x0a	; 10
     68e:	0f b6       	in	r0, 0x3f	; 63
     690:	f8 94       	cli
     692:	de bf       	out	0x3e, r29	; 62
     694:	0f be       	out	0x3f, r0	; 63
     696:	cd bf       	out	0x3d, r28	; 61
     698:	df 91       	pop	r29
     69a:	cf 91       	pop	r28
     69c:	1f 91       	pop	r17
     69e:	0f 91       	pop	r16
     6a0:	ff 90       	pop	r15
     6a2:	ef 90       	pop	r14
     6a4:	df 90       	pop	r13
     6a6:	cf 90       	pop	r12
     6a8:	bf 90       	pop	r11
     6aa:	af 90       	pop	r10
     6ac:	9f 90       	pop	r9
     6ae:	8f 90       	pop	r8
     6b0:	7f 90       	pop	r7
     6b2:	6f 90       	pop	r6
     6b4:	5f 90       	pop	r5
     6b6:	4f 90       	pop	r4
     6b8:	3f 90       	pop	r3
     6ba:	2f 90       	pop	r2
     6bc:	08 95       	ret

000006be <UART_init>:
#include "uart_communication.h"

// Function to initialize UART0
void UART_init(uint32_t baud_rate)
{
    uint16_t ubrr_value = round((F_CPU / (16.0 * baud_rate)) - 1); 
     6be:	0e 94 8f 09 	call	0x131e	; 0x131e <__floatunsisf>
     6c2:	20 e0       	ldi	r18, 0x00	; 0
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	40 e8       	ldi	r20, 0x80	; 128
     6c8:	51 e4       	ldi	r21, 0x41	; 65
     6ca:	0e 94 75 0a 	call	0x14ea	; 0x14ea <__mulsf3>
     6ce:	9b 01       	movw	r18, r22
     6d0:	ac 01       	movw	r20, r24
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	74 e2       	ldi	r23, 0x24	; 36
     6d6:	84 e7       	ldi	r24, 0x74	; 116
     6d8:	9b e4       	ldi	r25, 0x4B	; 75
     6da:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__divsf3>
     6de:	20 e0       	ldi	r18, 0x00	; 0
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	40 e8       	ldi	r20, 0x80	; 128
     6e4:	5f e3       	ldi	r21, 0x3F	; 63
     6e6:	0e 94 75 08 	call	0x10ea	; 0x10ea <__subsf3>
     6ea:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <round>
     6ee:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__fixunssfsi>
    // Calculate the UBRR value for the given baud rate

    // Set baud rate
    UBRR0H = (ubrr_value >> 8); // Set the high byte of the UBRR register
     6f2:	70 93 c5 00 	sts	0x00C5, r23	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    UBRR0L = ubrr_value;        // Set the low byte of the UBRR register
     6f6:	60 93 c4 00 	sts	0x00C4, r22	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

    // Enable receiver and transmitter
    UCSR0B = (1 << RXEN0) | (1 << TXEN0); // Enable the receiver and transmitter
     6fa:	88 e1       	ldi	r24, 0x18	; 24
     6fc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

    // Set frame format: 8 data bits, 1 stop bit, no parity
    UCSR0C = (1 << UCSZ01) | (3 << UCSZ00); 
     700:	86 e0       	ldi	r24, 0x06	; 6
     702:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     706:	08 95       	ret

00000708 <UART_transmit>:

// Function to transmit a character
void UART_transmit(unsigned char data)
{
    // Wait for empty transmit buffer
    while (!(UCSR0A & (1 << UDRE0)))
     708:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     70c:	95 ff       	sbrs	r25, 5
     70e:	fc cf       	rjmp	.-8      	; 0x708 <UART_transmit>
        ; // Wait until the transmit buffer is empty

    // Put data into buffer, sends the data
    UDR0 = data; // Transmit the data
     710:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     714:	08 95       	ret

00000716 <UART_transmit_string>:
}

// Function to transmit a string
void UART_transmit_string(const char *str)
{
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	ec 01       	movw	r28, r24
    while (*str)
     71c:	88 81       	ld	r24, Y
     71e:	88 23       	and	r24, r24
     720:	21 f0       	breq	.+8      	; 0x72a <UART_transmit_string+0x14>
    {
        UART_transmit(*str++); // Transmit each character in the string
     722:	21 96       	adiw	r28, 0x01	; 1
     724:	0e 94 84 03 	call	0x708	; 0x708 <UART_transmit>
}

// Function to transmit a string
void UART_transmit_string(const char *str)
{
    while (*str)
     728:	f9 cf       	rjmp	.-14     	; 0x71c <UART_transmit_string+0x6>
    {
        UART_transmit(*str++); // Transmit each character in the string
    }
}
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	08 95       	ret

00000730 <UART_transmit_string_n>:

// Function to transmit a string with '\n' at the end
void UART_transmit_string_n(const char *str)
{
    UART_transmit_string(str); // Transmit the string
     730:	0e 94 8b 03 	call	0x716	; 0x716 <UART_transmit_string>

    // Write new line
    UART_transmit('\n'); // Transmit a newline character
     734:	8a e0       	ldi	r24, 0x0A	; 10
     736:	0e 94 84 03 	call	0x708	; 0x708 <UART_transmit>
     73a:	08 95       	ret

0000073c <UART_available>:

// Function to check if serial data is available to be read
bool UART_available(void)
{
    // Check if RXC0 flag is set (data available to be read)
    return (UCSR0A & (1 << RXC0)); // Return true if data is available to be read
     73c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
}
     740:	88 1f       	adc	r24, r24
     742:	88 27       	eor	r24, r24
     744:	88 1f       	adc	r24, r24
     746:	08 95       	ret

00000748 <UART_receive>:

// Function to receive a character
char UART_receive(void)
{
    // Wait for data to be received
    while (!(UCSR0A & (1 << RXC0)))
     748:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     74c:	88 23       	and	r24, r24
     74e:	e4 f7       	brge	.-8      	; 0x748 <UART_receive>
        ; // Wait until data is received

    // Get and return received data from buffer
    return UDR0; // Return the received data
     750:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
     754:	08 95       	ret

00000756 <UART_receive_string>:

// Function to receive a string
char *UART_receive_string(void)
{
     756:	0f 93       	push	r16
     758:	1f 93       	push	r17
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
    char *received_string = NULL; // Pointer to store the received string
    uint8_t index = 0;            // Index to keep track of the string length
    char received_char;           // Variable to store the received character

    // Allocate memory for received string
    received_string = (char *)malloc(1); // Start with a small allocation
     75e:	81 e0       	ldi	r24, 0x01	; 1
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <malloc>
     766:	ec 01       	movw	r28, r24

    if (received_string == NULL)
     768:	89 2b       	or	r24, r25
     76a:	09 f1       	breq	.+66     	; 0x7ae <UART_receive_string+0x58>
     76c:	10 e0       	ldi	r17, 0x00	; 0
     76e:	01 c0       	rjmp	.+2      	; 0x772 <UART_receive_string+0x1c>
        {
            return NULL; // Failed to reallocate memory
        }

        // Store character in received string
        received_string[index++] = received_char; // Store the received character
     770:	18 2f       	mov	r17, r24

    // Read characters until newline or maximum length
    do
    {
        // Receive a character
        received_char = UART_receive(); // Receive a character
     772:	0e 94 a4 03 	call	0x748	; 0x748 <UART_receive>
     776:	08 2f       	mov	r16, r24

        // Reallocate memory to accommodate more characters
        received_string = (char *)realloc(received_string, index + 2); 
     778:	61 2f       	mov	r22, r17
     77a:	70 e0       	ldi	r23, 0x00	; 0
     77c:	6e 5f       	subi	r22, 0xFE	; 254
     77e:	7f 4f       	sbci	r23, 0xFF	; 255
     780:	ce 01       	movw	r24, r28
     782:	0e 94 91 0c 	call	0x1922	; 0x1922 <realloc>
     786:	ec 01       	movw	r28, r24
        // Reallocate memory to fit the new character

        if (received_string == NULL)
     788:	89 2b       	or	r24, r25
     78a:	a1 f0       	breq	.+40     	; 0x7b4 <UART_receive_string+0x5e>
        {
            return NULL; // Failed to reallocate memory
        }

        // Store character in received string
        received_string[index++] = received_char; // Store the received character
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	81 0f       	add	r24, r17
     790:	fe 01       	movw	r30, r28
     792:	e1 0f       	add	r30, r17
     794:	f1 1d       	adc	r31, r1
     796:	00 83       	st	Z, r16

    } while (received_char != '\n' && received_char != '\0'); 
     798:	0a 30       	cpi	r16, 0x0A	; 10
     79a:	11 f0       	breq	.+4      	; 0x7a0 <UART_receive_string+0x4a>
     79c:	01 11       	cpse	r16, r1
     79e:	e8 cf       	rjmp	.-48     	; 0x770 <UART_receive_string+0x1a>
    // Continue until newline or null character is received

    // Add null terminator to end of string
    received_string[index] = '\0'; // Add a null terminator to the end of the string
     7a0:	fe 01       	movw	r30, r28
     7a2:	e8 0f       	add	r30, r24
     7a4:	f1 1d       	adc	r31, r1
     7a6:	10 82       	st	Z, r1

    return received_string; // Return the received string
     7a8:	8c 2f       	mov	r24, r28
     7aa:	9d 2f       	mov	r25, r29
     7ac:	05 c0       	rjmp	.+10     	; 0x7b8 <UART_receive_string+0x62>
    // Allocate memory for received string
    received_string = (char *)malloc(1); // Start with a small allocation

    if (received_string == NULL)
    {
        return NULL; // Failed to allocate memory
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <UART_receive_string+0x62>
        received_string = (char *)realloc(received_string, index + 2); 
        // Reallocate memory to fit the new character

        if (received_string == NULL)
        {
            return NULL; // Failed to reallocate memory
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	90 e0       	ldi	r25, 0x00	; 0

    // Add null terminator to end of string
    received_string[index] = '\0'; // Add a null terminator to the end of the string

    return received_string; // Return the received string
}
     7b8:	df 91       	pop	r29
     7ba:	cf 91       	pop	r28
     7bc:	1f 91       	pop	r17
     7be:	0f 91       	pop	r16
     7c0:	08 95       	ret

000007c2 <_ZN3I2C3endEv>:
    }
  }
  *target = TWDR;
  // I suppose that if we get this far we're ok
  return 0;
}
     7c2:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     7c6:	08 95       	ret

000007c8 <_ZN3I2C7timeOutEj>:
     7c8:	70 93 4f 01 	sts	0x014F, r23	; 0x80014f <_ZN3I2C12timeOutDelayE+0x1>
     7cc:	60 93 4e 01 	sts	0x014E, r22	; 0x80014e <_ZN3I2C12timeOutDelayE>
     7d0:	08 95       	ret

000007d2 <_ZN3I2C6pullupEh>:
     7d2:	66 23       	and	r22, r22
     7d4:	39 f0       	breq	.+14     	; 0x7e4 <_ZN3I2C6pullupEh+0x12>
     7d6:	88 b1       	in	r24, 0x08	; 8
     7d8:	80 61       	ori	r24, 0x10	; 16
     7da:	88 b9       	out	0x08, r24	; 8
     7dc:	88 b1       	in	r24, 0x08	; 8
     7de:	80 62       	ori	r24, 0x20	; 32
     7e0:	88 b9       	out	0x08, r24	; 8
     7e2:	08 95       	ret
     7e4:	88 b1       	in	r24, 0x08	; 8
     7e6:	8f 7e       	andi	r24, 0xEF	; 239
     7e8:	88 b9       	out	0x08, r24	; 8
     7ea:	88 b1       	in	r24, 0x08	; 8
     7ec:	8f 7d       	andi	r24, 0xDF	; 223
     7ee:	88 b9       	out	0x08, r24	; 8
     7f0:	08 95       	ret

000007f2 <_ZN3I2C5beginEv>:
     7f2:	61 e0       	ldi	r22, 0x01	; 1
     7f4:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <_ZN3I2C6pullupEh>
     7f8:	e9 eb       	ldi	r30, 0xB9	; 185
     7fa:	f0 e0       	ldi	r31, 0x00	; 0
     7fc:	80 81       	ld	r24, Z
     7fe:	8e 7f       	andi	r24, 0xFE	; 254
     800:	80 83       	st	Z, r24
     802:	80 81       	ld	r24, Z
     804:	8d 7f       	andi	r24, 0xFD	; 253
     806:	80 83       	st	Z, r24
     808:	88 e4       	ldi	r24, 0x48	; 72
     80a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     80e:	84 e4       	ldi	r24, 0x44	; 68
     810:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     814:	08 95       	ret

00000816 <_ZN3I2C7receiveEv>:
     816:	ac 01       	movw	r20, r24
     818:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <_ZN3I2C14bytesAvailableE>
     81c:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <_ZN3I2C10totalBytesE>
     820:	28 1b       	sub	r18, r24
     822:	20 93 51 01 	sts	0x0151, r18	; 0x800151 <_ZN3I2C11bufferIndexE>
     826:	81 11       	cpse	r24, r1
     828:	03 c0       	rjmp	.+6      	; 0x830 <_ZN3I2C7receiveEv+0x1a>
     82a:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <_ZN3I2C11bufferIndexE>
     82e:	08 95       	ret
     830:	9f ef       	ldi	r25, 0xFF	; 255
     832:	98 0f       	add	r25, r24
     834:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <_ZN3I2C14bytesAvailableE>
     838:	fa 01       	movw	r30, r20
     83a:	e2 0f       	add	r30, r18
     83c:	f1 1d       	adc	r31, r1
     83e:	82 81       	ldd	r24, Z+2	; 0x02
     840:	08 95       	ret

00000842 <_ZN3I2C6lockUpEv>:
     842:	ec eb       	ldi	r30, 0xBC	; 188
     844:	f0 e0       	ldi	r31, 0x00	; 0
     846:	10 82       	st	Z, r1
     848:	84 e4       	ldi	r24, 0x44	; 68
     84a:	80 83       	st	Z, r24
     84c:	08 95       	ret

0000084e <_ZN3I2C6_startEv>:
     84e:	cf 92       	push	r12
     850:	df 92       	push	r13
     852:	ef 92       	push	r14
     854:	ff 92       	push	r15
     856:	1f 93       	push	r17
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
     85c:	ec 01       	movw	r28, r24
     85e:	0e 94 35 02 	call	0x46a	; 0x46a <_Z14millis_elapsedv>
     862:	6b 01       	movw	r12, r22
     864:	7c 01       	movw	r14, r24
     866:	84 ea       	ldi	r24, 0xA4	; 164
     868:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     86c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     870:	88 23       	and	r24, r24
     872:	f4 f0       	brlt	.+60     	; 0x8b0 <_ZN3I2C6_startEv+0x62>
     874:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_ZN3I2C12timeOutDelayE>
     878:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_ZN3I2C12timeOutDelayE+0x1>
     87c:	89 2b       	or	r24, r25
     87e:	b1 f3       	breq	.-20     	; 0x86c <_ZN3I2C6_startEv+0x1e>
     880:	0e 94 35 02 	call	0x46a	; 0x46a <_Z14millis_elapsedv>
     884:	ab 01       	movw	r20, r22
     886:	bc 01       	movw	r22, r24
     888:	4c 19       	sub	r20, r12
     88a:	5d 09       	sbc	r21, r13
     88c:	6e 09       	sbc	r22, r14
     88e:	7f 09       	sbc	r23, r15
     890:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_ZN3I2C12timeOutDelayE>
     894:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_ZN3I2C12timeOutDelayE+0x1>
     898:	a0 e0       	ldi	r26, 0x00	; 0
     89a:	b0 e0       	ldi	r27, 0x00	; 0
     89c:	48 17       	cp	r20, r24
     89e:	59 07       	cpc	r21, r25
     8a0:	6a 07       	cpc	r22, r26
     8a2:	7b 07       	cpc	r23, r27
     8a4:	18 f3       	brcs	.-58     	; 0x86c <_ZN3I2C6_startEv+0x1e>
     8a6:	ce 01       	movw	r24, r28
     8a8:	0e 94 21 04 	call	0x842	; 0x842 <_ZN3I2C6lockUpEv>
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	24 c0       	rjmp	.+72     	; 0x8f8 <_ZN3I2C6_startEv+0xaa>
     8b0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     8b4:	88 7f       	andi	r24, 0xF8	; 248
     8b6:	88 30       	cpi	r24, 0x08	; 8
     8b8:	39 f0       	breq	.+14     	; 0x8c8 <_ZN3I2C6_startEv+0x7a>
     8ba:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     8be:	88 7f       	andi	r24, 0xF8	; 248
     8c0:	80 31       	cpi	r24, 0x10	; 16
     8c2:	21 f4       	brne	.+8      	; 0x8cc <_ZN3I2C6_startEv+0x7e>
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	03 c0       	rjmp	.+6      	; 0x8ce <_ZN3I2C6_startEv+0x80>
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	01 c0       	rjmp	.+2      	; 0x8ce <_ZN3I2C6_startEv+0x80>
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	81 11       	cpse	r24, r1
     8d0:	12 c0       	rjmp	.+36     	; 0x8f6 <_ZN3I2C6_startEv+0xa8>
     8d2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     8d6:	88 7f       	andi	r24, 0xF8	; 248
     8d8:	88 33       	cpi	r24, 0x38	; 56
     8da:	49 f4       	brne	.+18     	; 0x8ee <_ZN3I2C6_startEv+0xa0>
     8dc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     8e0:	18 2f       	mov	r17, r24
     8e2:	18 7f       	andi	r17, 0xF8	; 248
     8e4:	ce 01       	movw	r24, r28
     8e6:	0e 94 21 04 	call	0x842	; 0x842 <_ZN3I2C6lockUpEv>
     8ea:	81 2f       	mov	r24, r17
     8ec:	05 c0       	rjmp	.+10     	; 0x8f8 <_ZN3I2C6_startEv+0xaa>
     8ee:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     8f2:	88 7f       	andi	r24, 0xF8	; 248
     8f4:	01 c0       	rjmp	.+2      	; 0x8f8 <_ZN3I2C6_startEv+0xaa>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	ff 90       	pop	r15
     900:	ef 90       	pop	r14
     902:	df 90       	pop	r13
     904:	cf 90       	pop	r12
     906:	08 95       	ret

00000908 <_ZN3I2C12_receiveByteEh>:
     908:	cf 92       	push	r12
     90a:	df 92       	push	r13
     90c:	ef 92       	push	r14
     90e:	ff 92       	push	r15
     910:	0f 93       	push	r16
     912:	1f 93       	push	r17
     914:	cf 93       	push	r28
     916:	8c 01       	movw	r16, r24
     918:	c6 2f       	mov	r28, r22
     91a:	0e 94 35 02 	call	0x46a	; 0x46a <_Z14millis_elapsedv>
     91e:	6b 01       	movw	r12, r22
     920:	7c 01       	movw	r14, r24
     922:	cc 23       	and	r28, r28
     924:	21 f0       	breq	.+8      	; 0x92e <_ZN3I2C12_receiveByteEh+0x26>
     926:	84 ec       	ldi	r24, 0xC4	; 196
     928:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     92c:	03 c0       	rjmp	.+6      	; 0x934 <_ZN3I2C12_receiveByteEh+0x2c>
     92e:	84 e8       	ldi	r24, 0x84	; 132
     930:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     934:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     938:	88 23       	and	r24, r24
     93a:	f4 f0       	brlt	.+60     	; 0x978 <_ZN3I2C12_receiveByteEh+0x70>
     93c:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_ZN3I2C12timeOutDelayE>
     940:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_ZN3I2C12timeOutDelayE+0x1>
     944:	89 2b       	or	r24, r25
     946:	b1 f3       	breq	.-20     	; 0x934 <_ZN3I2C12_receiveByteEh+0x2c>
     948:	0e 94 35 02 	call	0x46a	; 0x46a <_Z14millis_elapsedv>
     94c:	ab 01       	movw	r20, r22
     94e:	bc 01       	movw	r22, r24
     950:	4c 19       	sub	r20, r12
     952:	5d 09       	sbc	r21, r13
     954:	6e 09       	sbc	r22, r14
     956:	7f 09       	sbc	r23, r15
     958:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_ZN3I2C12timeOutDelayE>
     95c:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_ZN3I2C12timeOutDelayE+0x1>
     960:	a0 e0       	ldi	r26, 0x00	; 0
     962:	b0 e0       	ldi	r27, 0x00	; 0
     964:	48 17       	cp	r20, r24
     966:	59 07       	cpc	r21, r25
     968:	6a 07       	cpc	r22, r26
     96a:	7b 07       	cpc	r23, r27
     96c:	18 f3       	brcs	.-58     	; 0x934 <_ZN3I2C12_receiveByteEh+0x2c>
     96e:	c8 01       	movw	r24, r16
     970:	0e 94 21 04 	call	0x842	; 0x842 <_ZN3I2C6lockUpEv>
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	11 c0       	rjmp	.+34     	; 0x99a <_ZN3I2C12_receiveByteEh+0x92>
     978:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     97c:	88 7f       	andi	r24, 0xF8	; 248
     97e:	88 33       	cpi	r24, 0x38	; 56
     980:	49 f4       	brne	.+18     	; 0x994 <_ZN3I2C12_receiveByteEh+0x8c>
     982:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     986:	c8 2f       	mov	r28, r24
     988:	c8 7f       	andi	r28, 0xF8	; 248
     98a:	c8 01       	movw	r24, r16
     98c:	0e 94 21 04 	call	0x842	; 0x842 <_ZN3I2C6lockUpEv>
     990:	8c 2f       	mov	r24, r28
     992:	03 c0       	rjmp	.+6      	; 0x99a <_ZN3I2C12_receiveByteEh+0x92>
     994:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     998:	88 7f       	andi	r24, 0xF8	; 248
     99a:	cf 91       	pop	r28
     99c:	1f 91       	pop	r17
     99e:	0f 91       	pop	r16
     9a0:	ff 90       	pop	r15
     9a2:	ef 90       	pop	r14
     9a4:	df 90       	pop	r13
     9a6:	cf 90       	pop	r12
     9a8:	08 95       	ret

000009aa <_ZN3I2C5_stopEv>:
 *          0: The stop condition was successfully sent
 *          1: The function timed out
 *          2 - 0xFF: See the datasheet
 */
uint8_t I2C::_stop()
{
     9aa:	cf 92       	push	r12
     9ac:	df 92       	push	r13
     9ae:	ef 92       	push	r14
     9b0:	ff 92       	push	r15
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	ec 01       	movw	r28, r24
  unsigned long startingTime = millis_elapsed();
     9b8:	0e 94 35 02 	call	0x46a	; 0x46a <_Z14millis_elapsedv>
     9bc:	6b 01       	movw	r12, r22
     9be:	7c 01       	movw	r14, r24
  TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     9c0:	84 e9       	ldi	r24, 0x94	; 148
     9c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  while ((TWCR & (1 << TWSTO)))
     9c6:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     9ca:	89 2f       	mov	r24, r25
     9cc:	80 71       	andi	r24, 0x10	; 16
     9ce:	94 ff       	sbrs	r25, 4
     9d0:	1d c0       	rjmp	.+58     	; 0xa0c <_ZN3I2C5_stopEv+0x62>
  {
    if (!timeOutDelay)
     9d2:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_ZN3I2C12timeOutDelayE>
     9d6:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_ZN3I2C12timeOutDelayE+0x1>
     9da:	89 2b       	or	r24, r25
     9dc:	a1 f3       	breq	.-24     	; 0x9c6 <_ZN3I2C5_stopEv+0x1c>
    {
      continue;
    }
    if ((millis_elapsed() - startingTime) >= timeOutDelay)
     9de:	0e 94 35 02 	call	0x46a	; 0x46a <_Z14millis_elapsedv>
     9e2:	ab 01       	movw	r20, r22
     9e4:	bc 01       	movw	r22, r24
     9e6:	4c 19       	sub	r20, r12
     9e8:	5d 09       	sbc	r21, r13
     9ea:	6e 09       	sbc	r22, r14
     9ec:	7f 09       	sbc	r23, r15
     9ee:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_ZN3I2C12timeOutDelayE>
     9f2:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_ZN3I2C12timeOutDelayE+0x1>
     9f6:	a0 e0       	ldi	r26, 0x00	; 0
     9f8:	b0 e0       	ldi	r27, 0x00	; 0
     9fa:	48 17       	cp	r20, r24
     9fc:	59 07       	cpc	r21, r25
     9fe:	6a 07       	cpc	r22, r26
     a00:	7b 07       	cpc	r23, r27
     a02:	08 f3       	brcs	.-62     	; 0x9c6 <_ZN3I2C5_stopEv+0x1c>
    {
      lockUp();
     a04:	ce 01       	movw	r24, r28
     a06:	0e 94 21 04 	call	0x842	; 0x842 <_ZN3I2C6lockUpEv>
      return (1);
     a0a:	81 e0       	ldi	r24, 0x01	; 1
    }
  }
  return (0);
}
     a0c:	df 91       	pop	r29
     a0e:	cf 91       	pop	r28
     a10:	ff 90       	pop	r15
     a12:	ef 90       	pop	r14
     a14:	df 90       	pop	r13
     a16:	cf 90       	pop	r12
     a18:	08 95       	ret

00000a1a <_ZN3I2C12_sendAddressEh>:
 *          0: The address byte was successfully sent
 *          1: The function timed out
 *          2 - 0xFF: See the datasheet
 */
uint8_t I2C::_sendAddress(uint8_t i2cAddress)
{
     a1a:	cf 92       	push	r12
     a1c:	df 92       	push	r13
     a1e:	ef 92       	push	r14
     a20:	ff 92       	push	r15
     a22:	0f 93       	push	r16
     a24:	1f 93       	push	r17
     a26:	cf 93       	push	r28
     a28:	8c 01       	movw	r16, r24
  TWDR = i2cAddress;
     a2a:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  unsigned long startingTime = millis_elapsed();
     a2e:	0e 94 35 02 	call	0x46a	; 0x46a <_Z14millis_elapsedv>
     a32:	6b 01       	movw	r12, r22
     a34:	7c 01       	movw	r14, r24
  TWCR = (1 << TWINT) | (1 << TWEN);
     a36:	84 e8       	ldi	r24, 0x84	; 132
     a38:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  while (!(TWCR & (1 << TWINT)))
     a3c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     a40:	88 23       	and	r24, r24
     a42:	f4 f0       	brlt	.+60     	; 0xa80 <_ZN3I2C12_sendAddressEh+0x66>
  {
    if (!timeOutDelay)
     a44:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_ZN3I2C12timeOutDelayE>
     a48:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_ZN3I2C12timeOutDelayE+0x1>
     a4c:	89 2b       	or	r24, r25
     a4e:	b1 f3       	breq	.-20     	; 0xa3c <_ZN3I2C12_sendAddressEh+0x22>
    {
      continue;
    }
    if ((millis_elapsed() - startingTime) >= timeOutDelay)
     a50:	0e 94 35 02 	call	0x46a	; 0x46a <_Z14millis_elapsedv>
     a54:	ab 01       	movw	r20, r22
     a56:	bc 01       	movw	r22, r24
     a58:	4c 19       	sub	r20, r12
     a5a:	5d 09       	sbc	r21, r13
     a5c:	6e 09       	sbc	r22, r14
     a5e:	7f 09       	sbc	r23, r15
     a60:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_ZN3I2C12timeOutDelayE>
     a64:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_ZN3I2C12timeOutDelayE+0x1>
     a68:	a0 e0       	ldi	r26, 0x00	; 0
     a6a:	b0 e0       	ldi	r27, 0x00	; 0
     a6c:	48 17       	cp	r20, r24
     a6e:	59 07       	cpc	r21, r25
     a70:	6a 07       	cpc	r22, r26
     a72:	7b 07       	cpc	r23, r27
     a74:	18 f3       	brcs	.-58     	; 0xa3c <_ZN3I2C12_sendAddressEh+0x22>
    {
      lockUp();
     a76:	c8 01       	movw	r24, r16
     a78:	0e 94 21 04 	call	0x842	; 0x842 <_ZN3I2C6lockUpEv>
      return (1);
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	2f c0       	rjmp	.+94     	; 0xade <_ZN3I2C12_sendAddressEh+0xc4>
    }
  }
  if ((TWI_STATUS == MT_SLA_ACK) || (TWI_STATUS == MR_SLA_ACK))
     a80:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     a84:	88 7f       	andi	r24, 0xF8	; 248
     a86:	88 31       	cpi	r24, 0x18	; 24
     a88:	39 f0       	breq	.+14     	; 0xa98 <_ZN3I2C12_sendAddressEh+0x7e>
     a8a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     a8e:	88 7f       	andi	r24, 0xF8	; 248
     a90:	80 34       	cpi	r24, 0x40	; 64
     a92:	21 f4       	brne	.+8      	; 0xa9c <_ZN3I2C12_sendAddressEh+0x82>
     a94:	91 e0       	ldi	r25, 0x01	; 1
     a96:	03 c0       	rjmp	.+6      	; 0xa9e <_ZN3I2C12_sendAddressEh+0x84>
     a98:	91 e0       	ldi	r25, 0x01	; 1
     a9a:	01 c0       	rjmp	.+2      	; 0xa9e <_ZN3I2C12_sendAddressEh+0x84>
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	91 11       	cpse	r25, r1
     aa0:	1d c0       	rjmp	.+58     	; 0xadc <_ZN3I2C12_sendAddressEh+0xc2>
  {
    return (0);
  }
  uint8_t bufferedStatus = TWI_STATUS;
     aa2:	e9 eb       	ldi	r30, 0xB9	; 185
     aa4:	f0 e0       	ldi	r31, 0x00	; 0
     aa6:	80 81       	ld	r24, Z
     aa8:	c8 2f       	mov	r28, r24
     aaa:	c8 7f       	andi	r28, 0xF8	; 248
  if ((TWI_STATUS == MT_SLA_NACK) || (TWI_STATUS == MR_SLA_NACK))
     aac:	80 81       	ld	r24, Z
     aae:	88 7f       	andi	r24, 0xF8	; 248
     ab0:	80 32       	cpi	r24, 0x20	; 32
     ab2:	39 f0       	breq	.+14     	; 0xac2 <_ZN3I2C12_sendAddressEh+0xa8>
     ab4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     ab8:	88 7f       	andi	r24, 0xF8	; 248
     aba:	88 34       	cpi	r24, 0x48	; 72
     abc:	19 f4       	brne	.+6      	; 0xac4 <_ZN3I2C12_sendAddressEh+0xaa>
     abe:	91 e0       	ldi	r25, 0x01	; 1
     ac0:	01 c0       	rjmp	.+2      	; 0xac4 <_ZN3I2C12_sendAddressEh+0xaa>
     ac2:	91 e0       	ldi	r25, 0x01	; 1
     ac4:	99 23       	and	r25, r25
     ac6:	29 f0       	breq	.+10     	; 0xad2 <_ZN3I2C12_sendAddressEh+0xb8>
  {
    _stop();
     ac8:	c8 01       	movw	r24, r16
     aca:	0e 94 d5 04 	call	0x9aa	; 0x9aa <_ZN3I2C5_stopEv>
    return (bufferedStatus);
     ace:	8c 2f       	mov	r24, r28
     ad0:	06 c0       	rjmp	.+12     	; 0xade <_ZN3I2C12_sendAddressEh+0xc4>
  }
  else
  {
    lockUp();
     ad2:	c8 01       	movw	r24, r16
     ad4:	0e 94 21 04 	call	0x842	; 0x842 <_ZN3I2C6lockUpEv>
    return (bufferedStatus);
     ad8:	8c 2f       	mov	r24, r28
     ada:	01 c0       	rjmp	.+2      	; 0xade <_ZN3I2C12_sendAddressEh+0xc4>
      return (1);
    }
  }
  if ((TWI_STATUS == MT_SLA_ACK) || (TWI_STATUS == MR_SLA_ACK))
  {
    return (0);
     adc:	80 e0       	ldi	r24, 0x00	; 0
  else
  {
    lockUp();
    return (bufferedStatus);
  }
}
     ade:	cf 91       	pop	r28
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	cf 90       	pop	r12
     aec:	08 95       	ret

00000aee <_ZN3I2C9_sendByteEh>:
 *          0: The data byte was successfully sent
 *          1: The function timed out
 *          2 - 0xFF: See the datasheet
 */
uint8_t I2C::_sendByte(uint8_t i2cData)
{
     aee:	cf 92       	push	r12
     af0:	df 92       	push	r13
     af2:	ef 92       	push	r14
     af4:	ff 92       	push	r15
     af6:	0f 93       	push	r16
     af8:	1f 93       	push	r17
     afa:	cf 93       	push	r28
     afc:	8c 01       	movw	r16, r24
  TWDR = i2cData;
     afe:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  unsigned long startingTime = millis_elapsed();
     b02:	0e 94 35 02 	call	0x46a	; 0x46a <_Z14millis_elapsedv>
     b06:	6b 01       	movw	r12, r22
     b08:	7c 01       	movw	r14, r24
  TWCR = (1 << TWINT) | (1 << TWEN);
     b0a:	84 e8       	ldi	r24, 0x84	; 132
     b0c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  while (!(TWCR & (1 << TWINT)))
     b10:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     b14:	88 23       	and	r24, r24
     b16:	f4 f0       	brlt	.+60     	; 0xb54 <_ZN3I2C9_sendByteEh+0x66>
  {
    if (!timeOutDelay)
     b18:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_ZN3I2C12timeOutDelayE>
     b1c:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_ZN3I2C12timeOutDelayE+0x1>
     b20:	89 2b       	or	r24, r25
     b22:	b1 f3       	breq	.-20     	; 0xb10 <_ZN3I2C9_sendByteEh+0x22>
    {
      continue;
    }
    if ((millis_elapsed() - startingTime) >= timeOutDelay)
     b24:	0e 94 35 02 	call	0x46a	; 0x46a <_Z14millis_elapsedv>
     b28:	ab 01       	movw	r20, r22
     b2a:	bc 01       	movw	r22, r24
     b2c:	4c 19       	sub	r20, r12
     b2e:	5d 09       	sbc	r21, r13
     b30:	6e 09       	sbc	r22, r14
     b32:	7f 09       	sbc	r23, r15
     b34:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_ZN3I2C12timeOutDelayE>
     b38:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_ZN3I2C12timeOutDelayE+0x1>
     b3c:	a0 e0       	ldi	r26, 0x00	; 0
     b3e:	b0 e0       	ldi	r27, 0x00	; 0
     b40:	48 17       	cp	r20, r24
     b42:	59 07       	cpc	r21, r25
     b44:	6a 07       	cpc	r22, r26
     b46:	7b 07       	cpc	r23, r27
     b48:	18 f3       	brcs	.-58     	; 0xb10 <_ZN3I2C9_sendByteEh+0x22>
    {
      lockUp();
     b4a:	c8 01       	movw	r24, r16
     b4c:	0e 94 21 04 	call	0x842	; 0x842 <_ZN3I2C6lockUpEv>
      return (1);
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	19 c0       	rjmp	.+50     	; 0xb86 <_ZN3I2C9_sendByteEh+0x98>
    }
  }
  if (TWI_STATUS == MT_DATA_ACK)
     b54:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     b58:	88 7f       	andi	r24, 0xF8	; 248
     b5a:	88 32       	cpi	r24, 0x28	; 40
     b5c:	99 f0       	breq	.+38     	; 0xb84 <_ZN3I2C9_sendByteEh+0x96>
  {
    return (0);
  }
  uint8_t bufferedStatus = TWI_STATUS;
     b5e:	e9 eb       	ldi	r30, 0xB9	; 185
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	c8 2f       	mov	r28, r24
     b66:	c8 7f       	andi	r28, 0xF8	; 248
  if (TWI_STATUS == MT_DATA_NACK)
     b68:	80 81       	ld	r24, Z
     b6a:	88 7f       	andi	r24, 0xF8	; 248
     b6c:	80 33       	cpi	r24, 0x30	; 48
     b6e:	29 f4       	brne	.+10     	; 0xb7a <_ZN3I2C9_sendByteEh+0x8c>
  {
    _stop();
     b70:	c8 01       	movw	r24, r16
     b72:	0e 94 d5 04 	call	0x9aa	; 0x9aa <_ZN3I2C5_stopEv>
    return (bufferedStatus);
     b76:	8c 2f       	mov	r24, r28
     b78:	06 c0       	rjmp	.+12     	; 0xb86 <_ZN3I2C9_sendByteEh+0x98>
  }
  else
  {
    lockUp();
     b7a:	c8 01       	movw	r24, r16
     b7c:	0e 94 21 04 	call	0x842	; 0x842 <_ZN3I2C6lockUpEv>
    return (bufferedStatus);
     b80:	8c 2f       	mov	r24, r28
     b82:	01 c0       	rjmp	.+2      	; 0xb86 <_ZN3I2C9_sendByteEh+0x98>
      return (1);
    }
  }
  if (TWI_STATUS == MT_DATA_ACK)
  {
    return (0);
     b84:	80 e0       	ldi	r24, 0x00	; 0
  else
  {
    lockUp();
    return (bufferedStatus);
  }
}
     b86:	cf 91       	pop	r28
     b88:	1f 91       	pop	r17
     b8a:	0f 91       	pop	r16
     b8c:	ff 90       	pop	r15
     b8e:	ef 90       	pop	r14
     b90:	df 90       	pop	r13
     b92:	cf 90       	pop	r12
     b94:	08 95       	ret

00000b96 <_ZN3I2C5writeEhhh>:
 *  Returns:
 *      uint8_t
 *          See "TRANSMISSION TIMEOUT RETURN VALUES" for return value meaning
 */
uint8_t I2C::write(uint8_t address, uint8_t registerAddress, uint8_t data)
{
     b96:	ff 92       	push	r15
     b98:	0f 93       	push	r16
     b9a:	1f 93       	push	r17
     b9c:	cf 93       	push	r28
     b9e:	df 93       	push	r29
     ba0:	ec 01       	movw	r28, r24
     ba2:	16 2f       	mov	r17, r22
     ba4:	04 2f       	mov	r16, r20
     ba6:	f2 2e       	mov	r15, r18
  returnStatus = 0;
     ba8:	18 82       	st	Y, r1
  returnStatus = _start();
     baa:	0e 94 27 04 	call	0x84e	; 0x84e <_ZN3I2C6_startEv>
     bae:	88 83       	st	Y, r24
  if (returnStatus)
     bb0:	81 11       	cpse	r24, r1
     bb2:	2b c0       	rjmp	.+86     	; 0xc0a <_ZN3I2C5writeEhhh+0x74>
  {
    return (returnStatus);
  }
  returnStatus = _sendAddress(SLA_W(address));
     bb4:	61 2f       	mov	r22, r17
     bb6:	66 0f       	add	r22, r22
     bb8:	ce 01       	movw	r24, r28
     bba:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_ZN3I2C12_sendAddressEh>
     bbe:	88 83       	st	Y, r24
  if (returnStatus)
     bc0:	88 23       	and	r24, r24
     bc2:	21 f0       	breq	.+8      	; 0xbcc <_ZN3I2C5writeEhhh+0x36>
  {
    if (returnStatus == 1)
     bc4:	81 30       	cpi	r24, 0x01	; 1
     bc6:	09 f5       	brne	.+66     	; 0xc0a <_ZN3I2C5writeEhhh+0x74>
    {
      return (2);
     bc8:	82 e0       	ldi	r24, 0x02	; 2
     bca:	1f c0       	rjmp	.+62     	; 0xc0a <_ZN3I2C5writeEhhh+0x74>
    }
    return (returnStatus);
  }
  returnStatus = _sendByte(registerAddress);
     bcc:	60 2f       	mov	r22, r16
     bce:	ce 01       	movw	r24, r28
     bd0:	0e 94 77 05 	call	0xaee	; 0xaee <_ZN3I2C9_sendByteEh>
     bd4:	88 83       	st	Y, r24
  if (returnStatus)
     bd6:	88 23       	and	r24, r24
     bd8:	21 f0       	breq	.+8      	; 0xbe2 <_ZN3I2C5writeEhhh+0x4c>
  {
    if (returnStatus == 1)
     bda:	81 30       	cpi	r24, 0x01	; 1
     bdc:	b1 f4       	brne	.+44     	; 0xc0a <_ZN3I2C5writeEhhh+0x74>
    {
      return (3);
     bde:	83 e0       	ldi	r24, 0x03	; 3
     be0:	14 c0       	rjmp	.+40     	; 0xc0a <_ZN3I2C5writeEhhh+0x74>
    }
    return (returnStatus);
  }
  returnStatus = _sendByte(data);
     be2:	6f 2d       	mov	r22, r15
     be4:	ce 01       	movw	r24, r28
     be6:	0e 94 77 05 	call	0xaee	; 0xaee <_ZN3I2C9_sendByteEh>
     bea:	88 83       	st	Y, r24
  if (returnStatus)
     bec:	88 23       	and	r24, r24
     bee:	21 f0       	breq	.+8      	; 0xbf8 <_ZN3I2C5writeEhhh+0x62>
  {
    if (returnStatus == 1)
     bf0:	81 30       	cpi	r24, 0x01	; 1
     bf2:	59 f4       	brne	.+22     	; 0xc0a <_ZN3I2C5writeEhhh+0x74>
    {
      return (3);
     bf4:	83 e0       	ldi	r24, 0x03	; 3
     bf6:	09 c0       	rjmp	.+18     	; 0xc0a <_ZN3I2C5writeEhhh+0x74>
    }
    return (returnStatus);
  }
  returnStatus = _stop();
     bf8:	ce 01       	movw	r24, r28
     bfa:	0e 94 d5 04 	call	0x9aa	; 0x9aa <_ZN3I2C5_stopEv>
     bfe:	88 83       	st	Y, r24
  if (returnStatus)
     c00:	88 23       	and	r24, r24
     c02:	19 f0       	breq	.+6      	; 0xc0a <_ZN3I2C5writeEhhh+0x74>
  {
    if (returnStatus == 1)
     c04:	81 30       	cpi	r24, 0x01	; 1
     c06:	09 f4       	brne	.+2      	; 0xc0a <_ZN3I2C5writeEhhh+0x74>
    {
      return (7);
     c08:	87 e0       	ldi	r24, 0x07	; 7
    }
    return (returnStatus);
  }
  return (returnStatus);
}
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	1f 91       	pop	r17
     c10:	0f 91       	pop	r16
     c12:	ff 90       	pop	r15
     c14:	08 95       	ret

00000c16 <_ZN3I2C4readEhhh>:
 *          NOTE: Unlike the Wire library the read operation will not return the
 *          number of bytes read, instead it will return the error code which
 *          can be used for debugging.
 */
uint8_t I2C::read(uint8_t address, uint8_t registerAddress, uint8_t numberBytes)
{
     c16:	ff 92       	push	r15
     c18:	0f 93       	push	r16
     c1a:	1f 93       	push	r17
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	ec 01       	movw	r28, r24
     c22:	06 2f       	mov	r16, r22
     c24:	f4 2e       	mov	r15, r20
     c26:	12 2f       	mov	r17, r18
  bytesAvailable = 0;
     c28:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <_ZN3I2C14bytesAvailableE>
  bufferIndex = 0;
     c2c:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <_ZN3I2C11bufferIndexE>
  numberBytes = numberBytes;
  if (numberBytes > MAX_BUFFER_SIZE)
     c30:	21 32       	cpi	r18, 0x21	; 33
     c32:	08 f0       	brcs	.+2      	; 0xc36 <_ZN3I2C4readEhhh+0x20>
  {
    numberBytes = MAX_BUFFER_SIZE;
     c34:	10 e2       	ldi	r17, 0x20	; 32
  }
  if (numberBytes == 0)
     c36:	11 11       	cpse	r17, r1
     c38:	01 c0       	rjmp	.+2      	; 0xc3c <_ZN3I2C4readEhhh+0x26>
  {
    numberBytes++;
     c3a:	1f 5f       	subi	r17, 0xFF	; 255
  }
  nack = numberBytes - 1;
     c3c:	8f ef       	ldi	r24, 0xFF	; 255
     c3e:	81 0f       	add	r24, r17
     c40:	89 83       	std	Y+1, r24	; 0x01
  returnStatus = 0;
     c42:	18 82       	st	Y, r1
  returnStatus = _start();
     c44:	ce 01       	movw	r24, r28
     c46:	0e 94 27 04 	call	0x84e	; 0x84e <_ZN3I2C6_startEv>
     c4a:	88 83       	st	Y, r24
  if (returnStatus)
     c4c:	81 11       	cpse	r24, r1
     c4e:	62 c0       	rjmp	.+196    	; 0xd14 <_ZN3I2C4readEhhh+0xfe>
  {
    return (returnStatus);
  }
  returnStatus = _sendAddress(SLA_W(address));
     c50:	00 0f       	add	r16, r16
     c52:	60 2f       	mov	r22, r16
     c54:	ce 01       	movw	r24, r28
     c56:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_ZN3I2C12_sendAddressEh>
     c5a:	88 83       	st	Y, r24
  if (returnStatus)
     c5c:	88 23       	and	r24, r24
     c5e:	29 f0       	breq	.+10     	; 0xc6a <_ZN3I2C4readEhhh+0x54>
  {
    if (returnStatus == 1)
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	09 f0       	breq	.+2      	; 0xc66 <_ZN3I2C4readEhhh+0x50>
     c64:	57 c0       	rjmp	.+174    	; 0xd14 <_ZN3I2C4readEhhh+0xfe>
    {
      return (2);
     c66:	82 e0       	ldi	r24, 0x02	; 2
     c68:	55 c0       	rjmp	.+170    	; 0xd14 <_ZN3I2C4readEhhh+0xfe>
    }
    return (returnStatus);
  }
  returnStatus = _sendByte(registerAddress);
     c6a:	6f 2d       	mov	r22, r15
     c6c:	ce 01       	movw	r24, r28
     c6e:	0e 94 77 05 	call	0xaee	; 0xaee <_ZN3I2C9_sendByteEh>
     c72:	88 83       	st	Y, r24
  if (returnStatus)
     c74:	88 23       	and	r24, r24
     c76:	29 f0       	breq	.+10     	; 0xc82 <_ZN3I2C4readEhhh+0x6c>
  {
    if (returnStatus == 1)
     c78:	81 30       	cpi	r24, 0x01	; 1
     c7a:	09 f0       	breq	.+2      	; 0xc7e <_ZN3I2C4readEhhh+0x68>
     c7c:	4b c0       	rjmp	.+150    	; 0xd14 <_ZN3I2C4readEhhh+0xfe>
    {
      return (3);
     c7e:	83 e0       	ldi	r24, 0x03	; 3
     c80:	49 c0       	rjmp	.+146    	; 0xd14 <_ZN3I2C4readEhhh+0xfe>
    }
    return (returnStatus);
  }
  returnStatus = _start();
     c82:	ce 01       	movw	r24, r28
     c84:	0e 94 27 04 	call	0x84e	; 0x84e <_ZN3I2C6_startEv>
     c88:	88 83       	st	Y, r24
  if (returnStatus)
     c8a:	88 23       	and	r24, r24
     c8c:	29 f0       	breq	.+10     	; 0xc98 <_ZN3I2C4readEhhh+0x82>
  {
    if (returnStatus == 1)
     c8e:	81 30       	cpi	r24, 0x01	; 1
     c90:	09 f0       	breq	.+2      	; 0xc94 <_ZN3I2C4readEhhh+0x7e>
     c92:	40 c0       	rjmp	.+128    	; 0xd14 <_ZN3I2C4readEhhh+0xfe>
    {
      return (4);
     c94:	84 e0       	ldi	r24, 0x04	; 4
     c96:	3e c0       	rjmp	.+124    	; 0xd14 <_ZN3I2C4readEhhh+0xfe>
    }
    return (returnStatus);
  }
  returnStatus = _sendAddress(SLA_R(address));
     c98:	61 e0       	ldi	r22, 0x01	; 1
     c9a:	60 0f       	add	r22, r16
     c9c:	ce 01       	movw	r24, r28
     c9e:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_ZN3I2C12_sendAddressEh>
     ca2:	88 83       	st	Y, r24
  if (returnStatus)
     ca4:	88 23       	and	r24, r24
     ca6:	21 f0       	breq	.+8      	; 0xcb0 <_ZN3I2C4readEhhh+0x9a>
  {
    if (returnStatus == 1)
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	a1 f5       	brne	.+104    	; 0xd14 <_ZN3I2C4readEhhh+0xfe>
    {
      return (5);
     cac:	85 e0       	ldi	r24, 0x05	; 5
     cae:	32 c0       	rjmp	.+100    	; 0xd14 <_ZN3I2C4readEhhh+0xfe>
     cb0:	00 e0       	ldi	r16, 0x00	; 0
    }
    return (returnStatus);
  }
  for (uint8_t i = 0; i < numberBytes; i++)
     cb2:	01 17       	cp	r16, r17
     cb4:	10 f5       	brcc	.+68     	; 0xcfa <_ZN3I2C4readEhhh+0xe4>
  {
    if (i == nack)
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	08 13       	cpse	r16, r24
     cba:	0a c0       	rjmp	.+20     	; 0xcd0 <_ZN3I2C4readEhhh+0xba>
    {
      returnStatus = _receiveByte(0);
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	ce 01       	movw	r24, r28
     cc0:	0e 94 84 04 	call	0x908	; 0x908 <_ZN3I2C12_receiveByteEh>
     cc4:	88 83       	st	Y, r24
      if (returnStatus == 1)
     cc6:	81 30       	cpi	r24, 0x01	; 1
     cc8:	11 f1       	breq	.+68     	; 0xd0e <_ZN3I2C4readEhhh+0xf8>
      {
        return (6);
      }
      if (returnStatus != MR_DATA_NACK)
     cca:	88 35       	cpi	r24, 0x58	; 88
     ccc:	51 f0       	breq	.+20     	; 0xce2 <_ZN3I2C4readEhhh+0xcc>
     cce:	22 c0       	rjmp	.+68     	; 0xd14 <_ZN3I2C4readEhhh+0xfe>
        return (returnStatus);
      }
    }
    else
    {
      returnStatus = _receiveByte(1);
     cd0:	61 e0       	ldi	r22, 0x01	; 1
     cd2:	ce 01       	movw	r24, r28
     cd4:	0e 94 84 04 	call	0x908	; 0x908 <_ZN3I2C12_receiveByteEh>
     cd8:	88 83       	st	Y, r24
      if (returnStatus == 1)
     cda:	81 30       	cpi	r24, 0x01	; 1
     cdc:	d1 f0       	breq	.+52     	; 0xd12 <_ZN3I2C4readEhhh+0xfc>
      {
        return (6);
      }
      if (returnStatus != MR_DATA_ACK)
     cde:	80 35       	cpi	r24, 0x50	; 80
     ce0:	c9 f4       	brne	.+50     	; 0xd14 <_ZN3I2C4readEhhh+0xfe>
      {
        return (returnStatus);
      }
    }
    data[i] = TWDR;
     ce2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     ce6:	fe 01       	movw	r30, r28
     ce8:	e0 0f       	add	r30, r16
     cea:	f1 1d       	adc	r31, r1
     cec:	82 83       	std	Z+2, r24	; 0x02
    bytesAvailable = i + 1;
     cee:	0f 5f       	subi	r16, 0xFF	; 255
     cf0:	00 93 52 01 	sts	0x0152, r16	; 0x800152 <_ZN3I2C14bytesAvailableE>
    totalBytes = i + 1;
     cf4:	00 93 50 01 	sts	0x0150, r16	; 0x800150 <_ZN3I2C10totalBytesE>
    {
      return (5);
    }
    return (returnStatus);
  }
  for (uint8_t i = 0; i < numberBytes; i++)
     cf8:	dc cf       	rjmp	.-72     	; 0xcb2 <_ZN3I2C4readEhhh+0x9c>
    }
    data[i] = TWDR;
    bytesAvailable = i + 1;
    totalBytes = i + 1;
  }
  returnStatus = _stop();
     cfa:	ce 01       	movw	r24, r28
     cfc:	0e 94 d5 04 	call	0x9aa	; 0x9aa <_ZN3I2C5_stopEv>
     d00:	88 83       	st	Y, r24
  if (returnStatus)
     d02:	88 23       	and	r24, r24
     d04:	39 f0       	breq	.+14     	; 0xd14 <_ZN3I2C4readEhhh+0xfe>
  {
    if (returnStatus == 1)
     d06:	81 30       	cpi	r24, 0x01	; 1
     d08:	29 f4       	brne	.+10     	; 0xd14 <_ZN3I2C4readEhhh+0xfe>
    {
      return (7);
     d0a:	87 e0       	ldi	r24, 0x07	; 7
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <_ZN3I2C4readEhhh+0xfe>
    if (i == nack)
    {
      returnStatus = _receiveByte(0);
      if (returnStatus == 1)
      {
        return (6);
     d0e:	86 e0       	ldi	r24, 0x06	; 6
     d10:	01 c0       	rjmp	.+2      	; 0xd14 <_ZN3I2C4readEhhh+0xfe>
    else
    {
      returnStatus = _receiveByte(1);
      if (returnStatus == 1)
      {
        return (6);
     d12:	86 e0       	ldi	r24, 0x06	; 6
      return (7);
    }
    return (returnStatus);
  }
  return (returnStatus);
}
     d14:	df 91       	pop	r29
     d16:	cf 91       	pop	r28
     d18:	1f 91       	pop	r17
     d1a:	0f 91       	pop	r16
     d1c:	ff 90       	pop	r15
     d1e:	08 95       	ret

00000d20 <_Z20setSamplingFrequencyi>:
  }
}

// Function to set the sampling frequency using timer interrupts
void setSamplingFrequency(int frequency)
{
     d20:	0f 93       	push	r16
     d22:	1f 93       	push	r17
     d24:	8c 01       	movw	r16, r24
  // Ensure frequency is within the defined limits
  if (frequency < FREQUENCY_LOWER_LIMIT)
     d26:	18 16       	cp	r1, r24
     d28:	19 06       	cpc	r1, r25
     d2a:	14 f0       	brlt	.+4      	; 0xd30 <_Z20setSamplingFrequencyi+0x10>
  {
    frequency = FREQUENCY_LOWER_LIMIT;
     d2c:	01 e0       	ldi	r16, 0x01	; 1
     d2e:	10 e0       	ldi	r17, 0x00	; 0
  }
  if (frequency > FREQUENCY_UPPER_LIMIT)
     d30:	09 3e       	cpi	r16, 0xE9	; 233
     d32:	83 e0       	ldi	r24, 0x03	; 3
     d34:	18 07       	cpc	r17, r24
     d36:	14 f0       	brlt	.+4      	; 0xd3c <_Z20setSamplingFrequencyi+0x1c>
  {
    frequency = FREQUENCY_UPPER_LIMIT;
     d38:	08 ee       	ldi	r16, 0xE8	; 232
     d3a:	13 e0       	ldi	r17, 0x03	; 3
  }

  TCCR1A = 0;
     d3c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
  TCCR1B = 0;
     d40:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

  // Calculate suitable prescaler values based on the frequency
  int prescaler;
  if (frequency <= 10)
     d44:	0b 30       	cpi	r16, 0x0B	; 11
     d46:	11 05       	cpc	r17, r1
     d48:	44 f4       	brge	.+16     	; 0xd5a <_Z20setSamplingFrequencyi+0x3a>
  {
    prescaler = 256;
    TCCR1B |= (1 << CS12);
     d4a:	e1 e8       	ldi	r30, 0x81	; 129
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	84 60       	ori	r24, 0x04	; 4
     d52:	80 83       	st	Z, r24

  // Calculate suitable prescaler values based on the frequency
  int prescaler;
  if (frequency <= 10)
  {
    prescaler = 256;
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	31 e0       	ldi	r19, 0x01	; 1
     d58:	1e c0       	rjmp	.+60     	; 0xd96 <_Z20setSamplingFrequencyi+0x76>
    TCCR1B |= (1 << CS12);
  }
  else if (frequency <= 50)
     d5a:	03 33       	cpi	r16, 0x33	; 51
     d5c:	11 05       	cpc	r17, r1
     d5e:	44 f4       	brge	.+16     	; 0xd70 <_Z20setSamplingFrequencyi+0x50>
  {
    prescaler = 64;
    TCCR1B |= (1 << CS10) | (1 << CS11);
     d60:	e1 e8       	ldi	r30, 0x81	; 129
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	83 60       	ori	r24, 0x03	; 3
     d68:	80 83       	st	Z, r24
    prescaler = 256;
    TCCR1B |= (1 << CS12);
  }
  else if (frequency <= 50)
  {
    prescaler = 64;
     d6a:	20 e4       	ldi	r18, 0x40	; 64
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	13 c0       	rjmp	.+38     	; 0xd96 <_Z20setSamplingFrequencyi+0x76>
    TCCR1B |= (1 << CS10) | (1 << CS11);
  }
  else if (frequency <= 500)
     d70:	05 3f       	cpi	r16, 0xF5	; 245
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	18 07       	cpc	r17, r24
     d76:	44 f4       	brge	.+16     	; 0xd88 <_Z20setSamplingFrequencyi+0x68>
  {
    prescaler = 8;
    TCCR1B |= (1 << CS11);
     d78:	e1 e8       	ldi	r30, 0x81	; 129
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	82 60       	ori	r24, 0x02	; 2
     d80:	80 83       	st	Z, r24
    prescaler = 64;
    TCCR1B |= (1 << CS10) | (1 << CS11);
  }
  else if (frequency <= 500)
  {
    prescaler = 8;
     d82:	28 e0       	ldi	r18, 0x08	; 8
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	07 c0       	rjmp	.+14     	; 0xd96 <_Z20setSamplingFrequencyi+0x76>
    TCCR1B |= (1 << CS11);
  }
  else
  {
    prescaler = 1;
    TCCR1B |= (1 << CS10);
     d88:	e1 e8       	ldi	r30, 0x81	; 129
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	81 60       	ori	r24, 0x01	; 1
     d90:	80 83       	st	Z, r24
    prescaler = 8;
    TCCR1B |= (1 << CS11);
  }
  else
  {
    prescaler = 1;
     d92:	21 e0       	ldi	r18, 0x01	; 1
     d94:	30 e0       	ldi	r19, 0x00	; 0
    TCCR1B |= (1 << CS10);
  }

  // Calculate the counter start value based on the prescaler and frequency
  counterStartValue = 65536 - CLOCK_FREQUENCY / prescaler / frequency;
     d96:	03 2e       	mov	r0, r19
     d98:	00 0c       	add	r0, r0
     d9a:	44 0b       	sbc	r20, r20
     d9c:	55 0b       	sbc	r21, r21
     d9e:	60 e0       	ldi	r22, 0x00	; 0
     da0:	74 e2       	ldi	r23, 0x24	; 36
     da2:	84 ef       	ldi	r24, 0xF4	; 244
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	0e 94 2f 0b 	call	0x165e	; 0x165e <__divmodsi4>
     daa:	ca 01       	movw	r24, r20
     dac:	b9 01       	movw	r22, r18
     dae:	98 01       	movw	r18, r16
     db0:	11 0f       	add	r17, r17
     db2:	44 0b       	sbc	r20, r20
     db4:	55 0b       	sbc	r21, r21
     db6:	0e 94 2f 0b 	call	0x165e	; 0x165e <__divmodsi4>
     dba:	31 95       	neg	r19
     dbc:	21 95       	neg	r18
     dbe:	31 09       	sbc	r19, r1
     dc0:	30 93 66 01 	sts	0x0166, r19	; 0x800166 <counterStartValue+0x1>
     dc4:	20 93 65 01 	sts	0x0165, r18	; 0x800165 <counterStartValue>
  TCNT1 = counterStartValue;
     dc8:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     dcc:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>

  // Enable timer interrupts
  TIMSK1 |= (1 << TOIE1);
     dd0:	ef e6       	ldi	r30, 0x6F	; 111
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	81 60       	ori	r24, 0x01	; 1
     dd8:	80 83       	st	Z, r24
}
     dda:	1f 91       	pop	r17
     ddc:	0f 91       	pop	r16
     dde:	08 95       	ret

00000de0 <_Z5setupv>:
}

// Setup function to initialize peripherals and variables
void setup()
{
  setup_millis_counter(); // Initialize millisecond counter
     de0:	0e 94 02 02 	call	0x404	; 0x404 <_Z20setup_millis_counterv>

  UART_init(115200); // Initialize UART with baud rate 115200
     de4:	60 e0       	ldi	r22, 0x00	; 0
     de6:	72 ec       	ldi	r23, 0xC2	; 194
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	0e 94 5f 03 	call	0x6be	; 0x6be <UART_init>

  // Pin type declaration
  DDRB = DDRB | (1 << PORTB0); // Set PORTB0 as output
     df0:	84 b1       	in	r24, 0x04	; 4
     df2:	81 60       	ori	r24, 0x01	; 1
     df4:	84 b9       	out	0x04, r24	; 4

  accelerometer.begin(MPU); // Initialize accelerometer
     df6:	68 e6       	ldi	r22, 0x68	; 104
     df8:	70 e0       	ldi	r23, 0x00	; 0
     dfa:	87 e5       	ldi	r24, 0x57	; 87
     dfc:	91 e0       	ldi	r25, 0x01	; 1
     dfe:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN13Accelerometer5beginEi>

  // Set the sampling frequency for data collection
  setSamplingFrequency(SAMPLING_FREQUENCY);
     e02:	88 ec       	ldi	r24, 0xC8	; 200
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	0e 94 90 06 	call	0xd20	; 0xd20 <_Z20setSamplingFrequencyi>
     e0a:	08 95       	ret

00000e0c <__vector_13>:
  TIMSK1 |= (1 << TOIE1);
}

// Timer1 overflow interrupt service routine
ISR(TIMER1_OVF_vect)
{
     e0c:	1f 92       	push	r1
     e0e:	0f 92       	push	r0
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	0f 92       	push	r0
     e14:	11 24       	eor	r1, r1
     e16:	2f 93       	push	r18
     e18:	8f 93       	push	r24
     e1a:	9f 93       	push	r25
     e1c:	ef 93       	push	r30
     e1e:	ff 93       	push	r31
  // Check if the buffer is ready to be filled
  if (bufferReady)
     e20:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <bufferReady>
     e24:	88 23       	and	r24, r24
     e26:	69 f1       	breq	.+90     	; 0xe82 <__vector_13+0x76>
  {
    buffer[0][bufferIndex] = AccX;
     e28:	e0 91 67 01 	lds	r30, 0x0167	; 0x800167 <bufferIndex>
     e2c:	f0 91 68 01 	lds	r31, 0x0168	; 0x800168 <bufferIndex+0x1>
     e30:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <AccX>
     e34:	e7 59       	subi	r30, 0x97	; 151
     e36:	fe 4f       	sbci	r31, 0xFE	; 254
     e38:	80 83       	st	Z, r24
    buffer[1][bufferIndex] = AccY;
     e3a:	e0 91 67 01 	lds	r30, 0x0167	; 0x800167 <bufferIndex>
     e3e:	f0 91 68 01 	lds	r31, 0x0168	; 0x800168 <bufferIndex+0x1>
     e42:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <AccY>
     e46:	e7 59       	subi	r30, 0x97	; 151
     e48:	fd 4f       	sbci	r31, 0xFD	; 253
     e4a:	80 83       	st	Z, r24
    buffer[2][bufferIndex] = AccZ;
     e4c:	e0 91 67 01 	lds	r30, 0x0167	; 0x800167 <bufferIndex>
     e50:	f0 91 68 01 	lds	r31, 0x0168	; 0x800168 <bufferIndex+0x1>
     e54:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <AccZ>
     e58:	e7 59       	subi	r30, 0x97	; 151
     e5a:	fc 4f       	sbci	r31, 0xFC	; 252
     e5c:	80 83       	st	Z, r24

    bufferIndex++;
     e5e:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <bufferIndex>
     e62:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <bufferIndex+0x1>
     e66:	01 96       	adiw	r24, 0x01	; 1
     e68:	90 93 68 01 	sts	0x0168, r25	; 0x800168 <bufferIndex+0x1>
     e6c:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <bufferIndex>
    // Check if the buffer is full
    if (bufferIndex == BUFFER_SIZE)
     e70:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <bufferIndex>
     e74:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <bufferIndex+0x1>
     e78:	81 15       	cp	r24, r1
     e7a:	91 40       	sbci	r25, 0x01	; 1
     e7c:	11 f4       	brne	.+4      	; 0xe82 <__vector_13+0x76>
    {
      bufferReady = false;
     e7e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <bufferReady>
    }
  }

  // Reset the counter to the start value
  TCNT1 = counterStartValue;
     e82:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <counterStartValue>
     e86:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <counterStartValue+0x1>
     e8a:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     e8e:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
}
     e92:	ff 91       	pop	r31
     e94:	ef 91       	pop	r30
     e96:	9f 91       	pop	r25
     e98:	8f 91       	pop	r24
     e9a:	2f 91       	pop	r18
     e9c:	0f 90       	pop	r0
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	0f 90       	pop	r0
     ea2:	1f 90       	pop	r1
     ea4:	18 95       	reti

00000ea6 <_Z10sendBufferv>:

// Function to send the buffered data over UART
void sendBuffer()
{
     ea6:	af 92       	push	r10
     ea8:	bf 92       	push	r11
     eaa:	cf 92       	push	r12
     eac:	df 92       	push	r13
     eae:	ef 92       	push	r14
     eb0:	ff 92       	push	r15
     eb2:	0f 93       	push	r16
     eb4:	1f 93       	push	r17
     eb6:	cf 93       	push	r28
     eb8:	df 93       	push	r29
  UART_transmit_string_n("x");
     eba:	8f e1       	ldi	r24, 0x1F	; 31
     ebc:	91 e0       	ldi	r25, 0x01	; 1
     ebe:	0e 94 98 03 	call	0x730	; 0x730 <UART_transmit_string_n>
  for (int i = 0; i < BUFFER_SIZE; i++)
     ec2:	c0 e0       	ldi	r28, 0x00	; 0
     ec4:	d0 e0       	ldi	r29, 0x00	; 0
     ec6:	cf 3f       	cpi	r28, 0xFF	; 255
     ec8:	d1 05       	cpc	r29, r1
     eca:	09 f0       	breq	.+2      	; 0xece <_Z10sendBufferv+0x28>
     ecc:	a4 f5       	brge	.+104    	; 0xf36 <_Z10sendBufferv+0x90>
  {
    char *value_to_transmit = to_string((map_range(buffer[0][i], 0, 255, -200, 200) / 100.0));
     ece:	fe 01       	movw	r30, r28
     ed0:	e7 59       	subi	r30, 0x97	; 151
     ed2:	fe 4f       	sbci	r31, 0xFE	; 254
     ed4:	60 81       	ld	r22, Z
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	0e 94 8f 09 	call	0x131e	; 0x131e <__floatunsisf>
     ee0:	23 e4       	ldi	r18, 0x43	; 67
     ee2:	2f 93       	push	r18
     ee4:	28 e4       	ldi	r18, 0x48	; 72
     ee6:	2f 93       	push	r18
     ee8:	1f 92       	push	r1
     eea:	1f 92       	push	r1
     eec:	0f 2e       	mov	r0, r31
     eee:	a1 2c       	mov	r10, r1
     ef0:	b1 2c       	mov	r11, r1
     ef2:	f8 e4       	ldi	r31, 0x48	; 72
     ef4:	cf 2e       	mov	r12, r31
     ef6:	f3 ec       	ldi	r31, 0xC3	; 195
     ef8:	df 2e       	mov	r13, r31
     efa:	f0 2d       	mov	r31, r0
     efc:	e1 2c       	mov	r14, r1
     efe:	f1 2c       	mov	r15, r1
     f00:	0f e7       	ldi	r16, 0x7F	; 127
     f02:	13 e4       	ldi	r17, 0x43	; 67
     f04:	20 e0       	ldi	r18, 0x00	; 0
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	a9 01       	movw	r20, r18
     f0a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z9map_rangefffff>
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	48 ec       	ldi	r20, 0xC8	; 200
     f14:	52 e4       	ldi	r21, 0x42	; 66
     f16:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__divsf3>
     f1a:	0e 94 c7 01 	call	0x38e	; 0x38e <_Z9to_stringf>
     f1e:	8c 01       	movw	r16, r24
    UART_transmit_string_n(value_to_transmit);
     f20:	0e 94 98 03 	call	0x730	; 0x730 <UART_transmit_string_n>
    free(value_to_transmit);
     f24:	c8 01       	movw	r24, r16
     f26:	0e 94 08 0c 	call	0x1810	; 0x1810 <free>

// Function to send the buffered data over UART
void sendBuffer()
{
  UART_transmit_string_n("x");
  for (int i = 0; i < BUFFER_SIZE; i++)
     f2a:	21 96       	adiw	r28, 0x01	; 1
     f2c:	0f 90       	pop	r0
     f2e:	0f 90       	pop	r0
     f30:	0f 90       	pop	r0
     f32:	0f 90       	pop	r0
     f34:	c8 cf       	rjmp	.-112    	; 0xec6 <_Z10sendBufferv+0x20>
    char *value_to_transmit = to_string((map_range(buffer[0][i], 0, 255, -200, 200) / 100.0));
    UART_transmit_string_n(value_to_transmit);
    free(value_to_transmit);
  }

  UART_transmit_string_n("y");
     f36:	81 e2       	ldi	r24, 0x21	; 33
     f38:	91 e0       	ldi	r25, 0x01	; 1
     f3a:	0e 94 98 03 	call	0x730	; 0x730 <UART_transmit_string_n>
  for (int i = 0; i < BUFFER_SIZE; i++)
     f3e:	c0 e0       	ldi	r28, 0x00	; 0
     f40:	d0 e0       	ldi	r29, 0x00	; 0
     f42:	cf 3f       	cpi	r28, 0xFF	; 255
     f44:	d1 05       	cpc	r29, r1
     f46:	09 f0       	breq	.+2      	; 0xf4a <_Z10sendBufferv+0xa4>
     f48:	a4 f5       	brge	.+104    	; 0xfb2 <_Z10sendBufferv+0x10c>
  {
    char *value_to_transmit = to_string((map_range(buffer[1][i], 0, 255, -200, 200) / 100.0));
     f4a:	fe 01       	movw	r30, r28
     f4c:	e7 59       	subi	r30, 0x97	; 151
     f4e:	fd 4f       	sbci	r31, 0xFD	; 253
     f50:	60 81       	ld	r22, Z
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	0e 94 8f 09 	call	0x131e	; 0x131e <__floatunsisf>
     f5c:	23 e4       	ldi	r18, 0x43	; 67
     f5e:	2f 93       	push	r18
     f60:	28 e4       	ldi	r18, 0x48	; 72
     f62:	2f 93       	push	r18
     f64:	1f 92       	push	r1
     f66:	1f 92       	push	r1
     f68:	0f 2e       	mov	r0, r31
     f6a:	a1 2c       	mov	r10, r1
     f6c:	b1 2c       	mov	r11, r1
     f6e:	f8 e4       	ldi	r31, 0x48	; 72
     f70:	cf 2e       	mov	r12, r31
     f72:	f3 ec       	ldi	r31, 0xC3	; 195
     f74:	df 2e       	mov	r13, r31
     f76:	f0 2d       	mov	r31, r0
     f78:	e1 2c       	mov	r14, r1
     f7a:	f1 2c       	mov	r15, r1
     f7c:	0f e7       	ldi	r16, 0x7F	; 127
     f7e:	13 e4       	ldi	r17, 0x43	; 67
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	a9 01       	movw	r20, r18
     f86:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z9map_rangefffff>
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	48 ec       	ldi	r20, 0xC8	; 200
     f90:	52 e4       	ldi	r21, 0x42	; 66
     f92:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__divsf3>
     f96:	0e 94 c7 01 	call	0x38e	; 0x38e <_Z9to_stringf>
     f9a:	8c 01       	movw	r16, r24
    UART_transmit_string_n(value_to_transmit);
     f9c:	0e 94 98 03 	call	0x730	; 0x730 <UART_transmit_string_n>
    free(value_to_transmit);
     fa0:	c8 01       	movw	r24, r16
     fa2:	0e 94 08 0c 	call	0x1810	; 0x1810 <free>
    UART_transmit_string_n(value_to_transmit);
    free(value_to_transmit);
  }

  UART_transmit_string_n("y");
  for (int i = 0; i < BUFFER_SIZE; i++)
     fa6:	21 96       	adiw	r28, 0x01	; 1
     fa8:	0f 90       	pop	r0
     faa:	0f 90       	pop	r0
     fac:	0f 90       	pop	r0
     fae:	0f 90       	pop	r0
     fb0:	c8 cf       	rjmp	.-112    	; 0xf42 <_Z10sendBufferv+0x9c>
    char *value_to_transmit = to_string((map_range(buffer[1][i], 0, 255, -200, 200) / 100.0));
    UART_transmit_string_n(value_to_transmit);
    free(value_to_transmit);
  }

  UART_transmit_string_n("z");
     fb2:	83 e2       	ldi	r24, 0x23	; 35
     fb4:	91 e0       	ldi	r25, 0x01	; 1
     fb6:	0e 94 98 03 	call	0x730	; 0x730 <UART_transmit_string_n>
  for (int i = 0; i < BUFFER_SIZE; i++)
     fba:	c0 e0       	ldi	r28, 0x00	; 0
     fbc:	d0 e0       	ldi	r29, 0x00	; 0
     fbe:	cf 3f       	cpi	r28, 0xFF	; 255
     fc0:	d1 05       	cpc	r29, r1
     fc2:	09 f0       	breq	.+2      	; 0xfc6 <_Z10sendBufferv+0x120>
     fc4:	a4 f5       	brge	.+104    	; 0x102e <_Z10sendBufferv+0x188>
  {
    char *value_to_transmit = to_string((map_range(buffer[2][i], 0, 255, -200, 200) / 100.0));
     fc6:	fe 01       	movw	r30, r28
     fc8:	e7 59       	subi	r30, 0x97	; 151
     fca:	fc 4f       	sbci	r31, 0xFC	; 252
     fcc:	60 81       	ld	r22, Z
     fce:	70 e0       	ldi	r23, 0x00	; 0
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	0e 94 8f 09 	call	0x131e	; 0x131e <__floatunsisf>
     fd8:	23 e4       	ldi	r18, 0x43	; 67
     fda:	2f 93       	push	r18
     fdc:	28 e4       	ldi	r18, 0x48	; 72
     fde:	2f 93       	push	r18
     fe0:	1f 92       	push	r1
     fe2:	1f 92       	push	r1
     fe4:	0f 2e       	mov	r0, r31
     fe6:	a1 2c       	mov	r10, r1
     fe8:	b1 2c       	mov	r11, r1
     fea:	f8 e4       	ldi	r31, 0x48	; 72
     fec:	cf 2e       	mov	r12, r31
     fee:	f3 ec       	ldi	r31, 0xC3	; 195
     ff0:	df 2e       	mov	r13, r31
     ff2:	f0 2d       	mov	r31, r0
     ff4:	e1 2c       	mov	r14, r1
     ff6:	f1 2c       	mov	r15, r1
     ff8:	0f e7       	ldi	r16, 0x7F	; 127
     ffa:	13 e4       	ldi	r17, 0x43	; 67
     ffc:	20 e0       	ldi	r18, 0x00	; 0
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	a9 01       	movw	r20, r18
    1002:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z9map_rangefffff>
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	48 ec       	ldi	r20, 0xC8	; 200
    100c:	52 e4       	ldi	r21, 0x42	; 66
    100e:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__divsf3>
    1012:	0e 94 c7 01 	call	0x38e	; 0x38e <_Z9to_stringf>
    1016:	8c 01       	movw	r16, r24
    UART_transmit_string_n(value_to_transmit);
    1018:	0e 94 98 03 	call	0x730	; 0x730 <UART_transmit_string_n>
    free(value_to_transmit);
    101c:	c8 01       	movw	r24, r16
    101e:	0e 94 08 0c 	call	0x1810	; 0x1810 <free>
    UART_transmit_string_n(value_to_transmit);
    free(value_to_transmit);
  }

  UART_transmit_string_n("z");
  for (int i = 0; i < BUFFER_SIZE; i++)
    1022:	21 96       	adiw	r28, 0x01	; 1
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	c8 cf       	rjmp	.-112    	; 0xfbe <_Z10sendBufferv+0x118>
  {
    char *value_to_transmit = to_string((map_range(buffer[2][i], 0, 255, -200, 200) / 100.0));
    UART_transmit_string_n(value_to_transmit);
    free(value_to_transmit);
  }
}
    102e:	df 91       	pop	r29
    1030:	cf 91       	pop	r28
    1032:	1f 91       	pop	r17
    1034:	0f 91       	pop	r16
    1036:	ff 90       	pop	r15
    1038:	ef 90       	pop	r14
    103a:	df 90       	pop	r13
    103c:	cf 90       	pop	r12
    103e:	bf 90       	pop	r11
    1040:	af 90       	pop	r10
    1042:	08 95       	ret

00001044 <_Z4loopv>:
  setSamplingFrequency(SAMPLING_FREQUENCY);
}

// Main loop function to continuously read accelerometer data and handle UART communication
void loop()
{
    1044:	0f 93       	push	r16
    1046:	1f 93       	push	r17
  // Read accelerometer data
  struct accComp readings;
  readings = accelerometer.getAcceleration();
    1048:	87 e5       	ldi	r24, 0x57	; 87
    104a:	91 e0       	ldi	r25, 0x01	; 1
    104c:	0e 94 ed 00 	call	0x1da	; 0x1da <_ZN13Accelerometer15getAccelerationEv>

  // Store accelerometer readings in global variables
  AccX = readings.AccX; // X-axis value
    1050:	60 93 6b 04 	sts	0x046B, r22	; 0x80046b <AccX>
  AccY = readings.AccY; // Y-axis value
    1054:	70 93 6a 04 	sts	0x046A, r23	; 0x80046a <AccY>
  AccZ = readings.AccZ; // Z-axis value
    1058:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <AccZ>

  // Check if buffer is full and ready to be sent
  if (!bufferReady)
    105c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <bufferReady>
    1060:	81 11       	cpse	r24, r1
    1062:	09 c0       	rjmp	.+18     	; 0x1076 <_Z4loopv+0x32>
  {
    // Buffer is full. Send data to the computer.
    sendBuffer();
    1064:	0e 94 53 07 	call	0xea6	; 0xea6 <_Z10sendBufferv>

    // Reset the buffer
    bufferIndex = 0;
    1068:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <bufferIndex+0x1>
    106c:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <bufferIndex>
    bufferReady = true;
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <bufferReady>
  }

  if (millis_elapsed() - alertedTime >= ALERT_RETAIN_TIME)
    1076:	0e 94 35 02 	call	0x46a	; 0x46a <_Z14millis_elapsedv>
    107a:	00 91 53 01 	lds	r16, 0x0153	; 0x800153 <alertedTime>
    107e:	10 91 54 01 	lds	r17, 0x0154	; 0x800154 <alertedTime+0x1>
    1082:	20 91 55 01 	lds	r18, 0x0155	; 0x800155 <alertedTime+0x2>
    1086:	30 91 56 01 	lds	r19, 0x0156	; 0x800156 <alertedTime+0x3>
    108a:	dc 01       	movw	r26, r24
    108c:	cb 01       	movw	r24, r22
    108e:	80 1b       	sub	r24, r16
    1090:	91 0b       	sbc	r25, r17
    1092:	a2 0b       	sbc	r26, r18
    1094:	b3 0b       	sbc	r27, r19
    1096:	88 3e       	cpi	r24, 0xE8	; 232
    1098:	93 40       	sbci	r25, 0x03	; 3
    109a:	a1 05       	cpc	r26, r1
    109c:	b1 05       	cpc	r27, r1
    109e:	10 f0       	brcs	.+4      	; 0x10a4 <_Z4loopv+0x60>
  {
    PORTB = (1 << PORTB0); // Set PORTB0 to HIGH
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	85 b9       	out	0x05, r24	; 5
  }

  // Check for incoming UART data
  if (UART_available())
    10a4:	0e 94 9e 03 	call	0x73c	; 0x73c <UART_available>
    10a8:	88 23       	and	r24, r24
    10aa:	b9 f0       	breq	.+46     	; 0x10da <_Z4loopv+0x96>
  {
    char *inputSerial = UART_receive_string(); // Receive string from UART
    10ac:	0e 94 ab 03 	call	0x756	; 0x756 <UART_receive_string>
    10b0:	8c 01       	movw	r16, r24
    // // Convert received string to std::string
    // char *inputSerial = (char *) malloc(strlen(inputBuffer) + 1); // Allocate memory for the new string
    // strcpy(inputSerial, inputBuffer); // Copy the received string

    // Handle different UART commands
    if (strcmp(inputSerial, "A\n") == 0)
    10b2:	65 e2       	ldi	r22, 0x25	; 37
    10b4:	71 e0       	ldi	r23, 0x01	; 1
    10b6:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <strcmp>
    10ba:	89 2b       	or	r24, r25
    10bc:	59 f4       	brne	.+22     	; 0x10d4 <_Z4loopv+0x90>
    {
      PORTB = (0 << PORTB0); // Set PORTB0 to LOW
    10be:	15 b8       	out	0x05, r1	; 5
      alertedTime = millis_elapsed();
    10c0:	0e 94 35 02 	call	0x46a	; 0x46a <_Z14millis_elapsedv>
    10c4:	60 93 53 01 	sts	0x0153, r22	; 0x800153 <alertedTime>
    10c8:	70 93 54 01 	sts	0x0154, r23	; 0x800154 <alertedTime+0x1>
    10cc:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <alertedTime+0x2>
    10d0:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <alertedTime+0x3>
    // else if (strcmp(inputSerial, "NO_ALERT") == 0)
    // {
    //   PORTB = (1 << PORTB0); // Set PORTB0 to HIGH
    // }

    free(inputSerial);
    10d4:	c8 01       	movw	r24, r16
    10d6:	0e 94 08 0c 	call	0x1810	; 0x1810 <free>
  }
}
    10da:	1f 91       	pop	r17
    10dc:	0f 91       	pop	r16
    10de:	08 95       	ret

000010e0 <main>:
void setup();
void loop();

int main(void)
{
  setup();
    10e0:	0e 94 f0 06 	call	0xde0	; 0xde0 <_Z5setupv>

  while (true)
    loop();
    10e4:	0e 94 22 08 	call	0x1044	; 0x1044 <_Z4loopv>
    10e8:	fd cf       	rjmp	.-6      	; 0x10e4 <main+0x4>

000010ea <__subsf3>:
    10ea:	50 58       	subi	r21, 0x80	; 128

000010ec <__addsf3>:
    10ec:	bb 27       	eor	r27, r27
    10ee:	aa 27       	eor	r26, r26
    10f0:	0e 94 8d 08 	call	0x111a	; 0x111a <__addsf3x>
    10f4:	0c 94 07 0a 	jmp	0x140e	; 0x140e <__fp_round>
    10f8:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__fp_pscA>
    10fc:	38 f0       	brcs	.+14     	; 0x110c <__addsf3+0x20>
    10fe:	0e 94 00 0a 	call	0x1400	; 0x1400 <__fp_pscB>
    1102:	20 f0       	brcs	.+8      	; 0x110c <__addsf3+0x20>
    1104:	39 f4       	brne	.+14     	; 0x1114 <__addsf3+0x28>
    1106:	9f 3f       	cpi	r25, 0xFF	; 255
    1108:	19 f4       	brne	.+6      	; 0x1110 <__addsf3+0x24>
    110a:	26 f4       	brtc	.+8      	; 0x1114 <__addsf3+0x28>
    110c:	0c 94 f6 09 	jmp	0x13ec	; 0x13ec <__fp_nan>
    1110:	0e f4       	brtc	.+2      	; 0x1114 <__addsf3+0x28>
    1112:	e0 95       	com	r30
    1114:	e7 fb       	bst	r30, 7
    1116:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <__fp_inf>

0000111a <__addsf3x>:
    111a:	e9 2f       	mov	r30, r25
    111c:	0e 94 18 0a 	call	0x1430	; 0x1430 <__fp_split3>
    1120:	58 f3       	brcs	.-42     	; 0x10f8 <__addsf3+0xc>
    1122:	ba 17       	cp	r27, r26
    1124:	62 07       	cpc	r22, r18
    1126:	73 07       	cpc	r23, r19
    1128:	84 07       	cpc	r24, r20
    112a:	95 07       	cpc	r25, r21
    112c:	20 f0       	brcs	.+8      	; 0x1136 <__addsf3x+0x1c>
    112e:	79 f4       	brne	.+30     	; 0x114e <__addsf3x+0x34>
    1130:	a6 f5       	brtc	.+104    	; 0x119a <__addsf3x+0x80>
    1132:	0c 94 3a 0a 	jmp	0x1474	; 0x1474 <__fp_zero>
    1136:	0e f4       	brtc	.+2      	; 0x113a <__addsf3x+0x20>
    1138:	e0 95       	com	r30
    113a:	0b 2e       	mov	r0, r27
    113c:	ba 2f       	mov	r27, r26
    113e:	a0 2d       	mov	r26, r0
    1140:	0b 01       	movw	r0, r22
    1142:	b9 01       	movw	r22, r18
    1144:	90 01       	movw	r18, r0
    1146:	0c 01       	movw	r0, r24
    1148:	ca 01       	movw	r24, r20
    114a:	a0 01       	movw	r20, r0
    114c:	11 24       	eor	r1, r1
    114e:	ff 27       	eor	r31, r31
    1150:	59 1b       	sub	r21, r25
    1152:	99 f0       	breq	.+38     	; 0x117a <__addsf3x+0x60>
    1154:	59 3f       	cpi	r21, 0xF9	; 249
    1156:	50 f4       	brcc	.+20     	; 0x116c <__addsf3x+0x52>
    1158:	50 3e       	cpi	r21, 0xE0	; 224
    115a:	68 f1       	brcs	.+90     	; 0x11b6 <__addsf3x+0x9c>
    115c:	1a 16       	cp	r1, r26
    115e:	f0 40       	sbci	r31, 0x00	; 0
    1160:	a2 2f       	mov	r26, r18
    1162:	23 2f       	mov	r18, r19
    1164:	34 2f       	mov	r19, r20
    1166:	44 27       	eor	r20, r20
    1168:	58 5f       	subi	r21, 0xF8	; 248
    116a:	f3 cf       	rjmp	.-26     	; 0x1152 <__addsf3x+0x38>
    116c:	46 95       	lsr	r20
    116e:	37 95       	ror	r19
    1170:	27 95       	ror	r18
    1172:	a7 95       	ror	r26
    1174:	f0 40       	sbci	r31, 0x00	; 0
    1176:	53 95       	inc	r21
    1178:	c9 f7       	brne	.-14     	; 0x116c <__addsf3x+0x52>
    117a:	7e f4       	brtc	.+30     	; 0x119a <__addsf3x+0x80>
    117c:	1f 16       	cp	r1, r31
    117e:	ba 0b       	sbc	r27, r26
    1180:	62 0b       	sbc	r22, r18
    1182:	73 0b       	sbc	r23, r19
    1184:	84 0b       	sbc	r24, r20
    1186:	ba f0       	brmi	.+46     	; 0x11b6 <__addsf3x+0x9c>
    1188:	91 50       	subi	r25, 0x01	; 1
    118a:	a1 f0       	breq	.+40     	; 0x11b4 <__addsf3x+0x9a>
    118c:	ff 0f       	add	r31, r31
    118e:	bb 1f       	adc	r27, r27
    1190:	66 1f       	adc	r22, r22
    1192:	77 1f       	adc	r23, r23
    1194:	88 1f       	adc	r24, r24
    1196:	c2 f7       	brpl	.-16     	; 0x1188 <__addsf3x+0x6e>
    1198:	0e c0       	rjmp	.+28     	; 0x11b6 <__addsf3x+0x9c>
    119a:	ba 0f       	add	r27, r26
    119c:	62 1f       	adc	r22, r18
    119e:	73 1f       	adc	r23, r19
    11a0:	84 1f       	adc	r24, r20
    11a2:	48 f4       	brcc	.+18     	; 0x11b6 <__addsf3x+0x9c>
    11a4:	87 95       	ror	r24
    11a6:	77 95       	ror	r23
    11a8:	67 95       	ror	r22
    11aa:	b7 95       	ror	r27
    11ac:	f7 95       	ror	r31
    11ae:	9e 3f       	cpi	r25, 0xFE	; 254
    11b0:	08 f0       	brcs	.+2      	; 0x11b4 <__addsf3x+0x9a>
    11b2:	b0 cf       	rjmp	.-160    	; 0x1114 <__addsf3+0x28>
    11b4:	93 95       	inc	r25
    11b6:	88 0f       	add	r24, r24
    11b8:	08 f0       	brcs	.+2      	; 0x11bc <__addsf3x+0xa2>
    11ba:	99 27       	eor	r25, r25
    11bc:	ee 0f       	add	r30, r30
    11be:	97 95       	ror	r25
    11c0:	87 95       	ror	r24
    11c2:	08 95       	ret

000011c4 <__cmpsf2>:
    11c4:	0e 94 cc 09 	call	0x1398	; 0x1398 <__fp_cmp>
    11c8:	08 f4       	brcc	.+2      	; 0x11cc <__cmpsf2+0x8>
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	08 95       	ret

000011ce <__divsf3>:
    11ce:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__divsf3x>
    11d2:	0c 94 07 0a 	jmp	0x140e	; 0x140e <__fp_round>
    11d6:	0e 94 00 0a 	call	0x1400	; 0x1400 <__fp_pscB>
    11da:	58 f0       	brcs	.+22     	; 0x11f2 <__divsf3+0x24>
    11dc:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__fp_pscA>
    11e0:	40 f0       	brcs	.+16     	; 0x11f2 <__divsf3+0x24>
    11e2:	29 f4       	brne	.+10     	; 0x11ee <__divsf3+0x20>
    11e4:	5f 3f       	cpi	r21, 0xFF	; 255
    11e6:	29 f0       	breq	.+10     	; 0x11f2 <__divsf3+0x24>
    11e8:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <__fp_inf>
    11ec:	51 11       	cpse	r21, r1
    11ee:	0c 94 3b 0a 	jmp	0x1476	; 0x1476 <__fp_szero>
    11f2:	0c 94 f6 09 	jmp	0x13ec	; 0x13ec <__fp_nan>

000011f6 <__divsf3x>:
    11f6:	0e 94 18 0a 	call	0x1430	; 0x1430 <__fp_split3>
    11fa:	68 f3       	brcs	.-38     	; 0x11d6 <__divsf3+0x8>

000011fc <__divsf3_pse>:
    11fc:	99 23       	and	r25, r25
    11fe:	b1 f3       	breq	.-20     	; 0x11ec <__divsf3+0x1e>
    1200:	55 23       	and	r21, r21
    1202:	91 f3       	breq	.-28     	; 0x11e8 <__divsf3+0x1a>
    1204:	95 1b       	sub	r25, r21
    1206:	55 0b       	sbc	r21, r21
    1208:	bb 27       	eor	r27, r27
    120a:	aa 27       	eor	r26, r26
    120c:	62 17       	cp	r22, r18
    120e:	73 07       	cpc	r23, r19
    1210:	84 07       	cpc	r24, r20
    1212:	38 f0       	brcs	.+14     	; 0x1222 <__divsf3_pse+0x26>
    1214:	9f 5f       	subi	r25, 0xFF	; 255
    1216:	5f 4f       	sbci	r21, 0xFF	; 255
    1218:	22 0f       	add	r18, r18
    121a:	33 1f       	adc	r19, r19
    121c:	44 1f       	adc	r20, r20
    121e:	aa 1f       	adc	r26, r26
    1220:	a9 f3       	breq	.-22     	; 0x120c <__divsf3_pse+0x10>
    1222:	35 d0       	rcall	.+106    	; 0x128e <__divsf3_pse+0x92>
    1224:	0e 2e       	mov	r0, r30
    1226:	3a f0       	brmi	.+14     	; 0x1236 <__divsf3_pse+0x3a>
    1228:	e0 e8       	ldi	r30, 0x80	; 128
    122a:	32 d0       	rcall	.+100    	; 0x1290 <__divsf3_pse+0x94>
    122c:	91 50       	subi	r25, 0x01	; 1
    122e:	50 40       	sbci	r21, 0x00	; 0
    1230:	e6 95       	lsr	r30
    1232:	00 1c       	adc	r0, r0
    1234:	ca f7       	brpl	.-14     	; 0x1228 <__divsf3_pse+0x2c>
    1236:	2b d0       	rcall	.+86     	; 0x128e <__divsf3_pse+0x92>
    1238:	fe 2f       	mov	r31, r30
    123a:	29 d0       	rcall	.+82     	; 0x128e <__divsf3_pse+0x92>
    123c:	66 0f       	add	r22, r22
    123e:	77 1f       	adc	r23, r23
    1240:	88 1f       	adc	r24, r24
    1242:	bb 1f       	adc	r27, r27
    1244:	26 17       	cp	r18, r22
    1246:	37 07       	cpc	r19, r23
    1248:	48 07       	cpc	r20, r24
    124a:	ab 07       	cpc	r26, r27
    124c:	b0 e8       	ldi	r27, 0x80	; 128
    124e:	09 f0       	breq	.+2      	; 0x1252 <__divsf3_pse+0x56>
    1250:	bb 0b       	sbc	r27, r27
    1252:	80 2d       	mov	r24, r0
    1254:	bf 01       	movw	r22, r30
    1256:	ff 27       	eor	r31, r31
    1258:	93 58       	subi	r25, 0x83	; 131
    125a:	5f 4f       	sbci	r21, 0xFF	; 255
    125c:	3a f0       	brmi	.+14     	; 0x126c <__divsf3_pse+0x70>
    125e:	9e 3f       	cpi	r25, 0xFE	; 254
    1260:	51 05       	cpc	r21, r1
    1262:	78 f0       	brcs	.+30     	; 0x1282 <__divsf3_pse+0x86>
    1264:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <__fp_inf>
    1268:	0c 94 3b 0a 	jmp	0x1476	; 0x1476 <__fp_szero>
    126c:	5f 3f       	cpi	r21, 0xFF	; 255
    126e:	e4 f3       	brlt	.-8      	; 0x1268 <__divsf3_pse+0x6c>
    1270:	98 3e       	cpi	r25, 0xE8	; 232
    1272:	d4 f3       	brlt	.-12     	; 0x1268 <__divsf3_pse+0x6c>
    1274:	86 95       	lsr	r24
    1276:	77 95       	ror	r23
    1278:	67 95       	ror	r22
    127a:	b7 95       	ror	r27
    127c:	f7 95       	ror	r31
    127e:	9f 5f       	subi	r25, 0xFF	; 255
    1280:	c9 f7       	brne	.-14     	; 0x1274 <__divsf3_pse+0x78>
    1282:	88 0f       	add	r24, r24
    1284:	91 1d       	adc	r25, r1
    1286:	96 95       	lsr	r25
    1288:	87 95       	ror	r24
    128a:	97 f9       	bld	r25, 7
    128c:	08 95       	ret
    128e:	e1 e0       	ldi	r30, 0x01	; 1
    1290:	66 0f       	add	r22, r22
    1292:	77 1f       	adc	r23, r23
    1294:	88 1f       	adc	r24, r24
    1296:	bb 1f       	adc	r27, r27
    1298:	62 17       	cp	r22, r18
    129a:	73 07       	cpc	r23, r19
    129c:	84 07       	cpc	r24, r20
    129e:	ba 07       	cpc	r27, r26
    12a0:	20 f0       	brcs	.+8      	; 0x12aa <__divsf3_pse+0xae>
    12a2:	62 1b       	sub	r22, r18
    12a4:	73 0b       	sbc	r23, r19
    12a6:	84 0b       	sbc	r24, r20
    12a8:	ba 0b       	sbc	r27, r26
    12aa:	ee 1f       	adc	r30, r30
    12ac:	88 f7       	brcc	.-30     	; 0x1290 <__divsf3_pse+0x94>
    12ae:	e0 95       	com	r30
    12b0:	08 95       	ret

000012b2 <__fixsfsi>:
    12b2:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__fixunssfsi>
    12b6:	68 94       	set
    12b8:	b1 11       	cpse	r27, r1
    12ba:	0c 94 3b 0a 	jmp	0x1476	; 0x1476 <__fp_szero>
    12be:	08 95       	ret

000012c0 <__fixunssfsi>:
    12c0:	0e 94 20 0a 	call	0x1440	; 0x1440 <__fp_splitA>
    12c4:	88 f0       	brcs	.+34     	; 0x12e8 <__fixunssfsi+0x28>
    12c6:	9f 57       	subi	r25, 0x7F	; 127
    12c8:	98 f0       	brcs	.+38     	; 0x12f0 <__fixunssfsi+0x30>
    12ca:	b9 2f       	mov	r27, r25
    12cc:	99 27       	eor	r25, r25
    12ce:	b7 51       	subi	r27, 0x17	; 23
    12d0:	b0 f0       	brcs	.+44     	; 0x12fe <__fixunssfsi+0x3e>
    12d2:	e1 f0       	breq	.+56     	; 0x130c <__fixunssfsi+0x4c>
    12d4:	66 0f       	add	r22, r22
    12d6:	77 1f       	adc	r23, r23
    12d8:	88 1f       	adc	r24, r24
    12da:	99 1f       	adc	r25, r25
    12dc:	1a f0       	brmi	.+6      	; 0x12e4 <__fixunssfsi+0x24>
    12de:	ba 95       	dec	r27
    12e0:	c9 f7       	brne	.-14     	; 0x12d4 <__fixunssfsi+0x14>
    12e2:	14 c0       	rjmp	.+40     	; 0x130c <__fixunssfsi+0x4c>
    12e4:	b1 30       	cpi	r27, 0x01	; 1
    12e6:	91 f0       	breq	.+36     	; 0x130c <__fixunssfsi+0x4c>
    12e8:	0e 94 3a 0a 	call	0x1474	; 0x1474 <__fp_zero>
    12ec:	b1 e0       	ldi	r27, 0x01	; 1
    12ee:	08 95       	ret
    12f0:	0c 94 3a 0a 	jmp	0x1474	; 0x1474 <__fp_zero>
    12f4:	67 2f       	mov	r22, r23
    12f6:	78 2f       	mov	r23, r24
    12f8:	88 27       	eor	r24, r24
    12fa:	b8 5f       	subi	r27, 0xF8	; 248
    12fc:	39 f0       	breq	.+14     	; 0x130c <__fixunssfsi+0x4c>
    12fe:	b9 3f       	cpi	r27, 0xF9	; 249
    1300:	cc f3       	brlt	.-14     	; 0x12f4 <__fixunssfsi+0x34>
    1302:	86 95       	lsr	r24
    1304:	77 95       	ror	r23
    1306:	67 95       	ror	r22
    1308:	b3 95       	inc	r27
    130a:	d9 f7       	brne	.-10     	; 0x1302 <__fixunssfsi+0x42>
    130c:	3e f4       	brtc	.+14     	; 0x131c <__fixunssfsi+0x5c>
    130e:	90 95       	com	r25
    1310:	80 95       	com	r24
    1312:	70 95       	com	r23
    1314:	61 95       	neg	r22
    1316:	7f 4f       	sbci	r23, 0xFF	; 255
    1318:	8f 4f       	sbci	r24, 0xFF	; 255
    131a:	9f 4f       	sbci	r25, 0xFF	; 255
    131c:	08 95       	ret

0000131e <__floatunsisf>:
    131e:	e8 94       	clt
    1320:	09 c0       	rjmp	.+18     	; 0x1334 <__floatsisf+0x12>

00001322 <__floatsisf>:
    1322:	97 fb       	bst	r25, 7
    1324:	3e f4       	brtc	.+14     	; 0x1334 <__floatsisf+0x12>
    1326:	90 95       	com	r25
    1328:	80 95       	com	r24
    132a:	70 95       	com	r23
    132c:	61 95       	neg	r22
    132e:	7f 4f       	sbci	r23, 0xFF	; 255
    1330:	8f 4f       	sbci	r24, 0xFF	; 255
    1332:	9f 4f       	sbci	r25, 0xFF	; 255
    1334:	99 23       	and	r25, r25
    1336:	a9 f0       	breq	.+42     	; 0x1362 <__floatsisf+0x40>
    1338:	f9 2f       	mov	r31, r25
    133a:	96 e9       	ldi	r25, 0x96	; 150
    133c:	bb 27       	eor	r27, r27
    133e:	93 95       	inc	r25
    1340:	f6 95       	lsr	r31
    1342:	87 95       	ror	r24
    1344:	77 95       	ror	r23
    1346:	67 95       	ror	r22
    1348:	b7 95       	ror	r27
    134a:	f1 11       	cpse	r31, r1
    134c:	f8 cf       	rjmp	.-16     	; 0x133e <__floatsisf+0x1c>
    134e:	fa f4       	brpl	.+62     	; 0x138e <__floatsisf+0x6c>
    1350:	bb 0f       	add	r27, r27
    1352:	11 f4       	brne	.+4      	; 0x1358 <__floatsisf+0x36>
    1354:	60 ff       	sbrs	r22, 0
    1356:	1b c0       	rjmp	.+54     	; 0x138e <__floatsisf+0x6c>
    1358:	6f 5f       	subi	r22, 0xFF	; 255
    135a:	7f 4f       	sbci	r23, 0xFF	; 255
    135c:	8f 4f       	sbci	r24, 0xFF	; 255
    135e:	9f 4f       	sbci	r25, 0xFF	; 255
    1360:	16 c0       	rjmp	.+44     	; 0x138e <__floatsisf+0x6c>
    1362:	88 23       	and	r24, r24
    1364:	11 f0       	breq	.+4      	; 0x136a <__floatsisf+0x48>
    1366:	96 e9       	ldi	r25, 0x96	; 150
    1368:	11 c0       	rjmp	.+34     	; 0x138c <__floatsisf+0x6a>
    136a:	77 23       	and	r23, r23
    136c:	21 f0       	breq	.+8      	; 0x1376 <__floatsisf+0x54>
    136e:	9e e8       	ldi	r25, 0x8E	; 142
    1370:	87 2f       	mov	r24, r23
    1372:	76 2f       	mov	r23, r22
    1374:	05 c0       	rjmp	.+10     	; 0x1380 <__floatsisf+0x5e>
    1376:	66 23       	and	r22, r22
    1378:	71 f0       	breq	.+28     	; 0x1396 <__floatsisf+0x74>
    137a:	96 e8       	ldi	r25, 0x86	; 134
    137c:	86 2f       	mov	r24, r22
    137e:	70 e0       	ldi	r23, 0x00	; 0
    1380:	60 e0       	ldi	r22, 0x00	; 0
    1382:	2a f0       	brmi	.+10     	; 0x138e <__floatsisf+0x6c>
    1384:	9a 95       	dec	r25
    1386:	66 0f       	add	r22, r22
    1388:	77 1f       	adc	r23, r23
    138a:	88 1f       	adc	r24, r24
    138c:	da f7       	brpl	.-10     	; 0x1384 <__floatsisf+0x62>
    138e:	88 0f       	add	r24, r24
    1390:	96 95       	lsr	r25
    1392:	87 95       	ror	r24
    1394:	97 f9       	bld	r25, 7
    1396:	08 95       	ret

00001398 <__fp_cmp>:
    1398:	99 0f       	add	r25, r25
    139a:	00 08       	sbc	r0, r0
    139c:	55 0f       	add	r21, r21
    139e:	aa 0b       	sbc	r26, r26
    13a0:	e0 e8       	ldi	r30, 0x80	; 128
    13a2:	fe ef       	ldi	r31, 0xFE	; 254
    13a4:	16 16       	cp	r1, r22
    13a6:	17 06       	cpc	r1, r23
    13a8:	e8 07       	cpc	r30, r24
    13aa:	f9 07       	cpc	r31, r25
    13ac:	c0 f0       	brcs	.+48     	; 0x13de <__fp_cmp+0x46>
    13ae:	12 16       	cp	r1, r18
    13b0:	13 06       	cpc	r1, r19
    13b2:	e4 07       	cpc	r30, r20
    13b4:	f5 07       	cpc	r31, r21
    13b6:	98 f0       	brcs	.+38     	; 0x13de <__fp_cmp+0x46>
    13b8:	62 1b       	sub	r22, r18
    13ba:	73 0b       	sbc	r23, r19
    13bc:	84 0b       	sbc	r24, r20
    13be:	95 0b       	sbc	r25, r21
    13c0:	39 f4       	brne	.+14     	; 0x13d0 <__fp_cmp+0x38>
    13c2:	0a 26       	eor	r0, r26
    13c4:	61 f0       	breq	.+24     	; 0x13de <__fp_cmp+0x46>
    13c6:	23 2b       	or	r18, r19
    13c8:	24 2b       	or	r18, r20
    13ca:	25 2b       	or	r18, r21
    13cc:	21 f4       	brne	.+8      	; 0x13d6 <__fp_cmp+0x3e>
    13ce:	08 95       	ret
    13d0:	0a 26       	eor	r0, r26
    13d2:	09 f4       	brne	.+2      	; 0x13d6 <__fp_cmp+0x3e>
    13d4:	a1 40       	sbci	r26, 0x01	; 1
    13d6:	a6 95       	lsr	r26
    13d8:	8f ef       	ldi	r24, 0xFF	; 255
    13da:	81 1d       	adc	r24, r1
    13dc:	81 1d       	adc	r24, r1
    13de:	08 95       	ret

000013e0 <__fp_inf>:
    13e0:	97 f9       	bld	r25, 7
    13e2:	9f 67       	ori	r25, 0x7F	; 127
    13e4:	80 e8       	ldi	r24, 0x80	; 128
    13e6:	70 e0       	ldi	r23, 0x00	; 0
    13e8:	60 e0       	ldi	r22, 0x00	; 0
    13ea:	08 95       	ret

000013ec <__fp_nan>:
    13ec:	9f ef       	ldi	r25, 0xFF	; 255
    13ee:	80 ec       	ldi	r24, 0xC0	; 192
    13f0:	08 95       	ret

000013f2 <__fp_pscA>:
    13f2:	00 24       	eor	r0, r0
    13f4:	0a 94       	dec	r0
    13f6:	16 16       	cp	r1, r22
    13f8:	17 06       	cpc	r1, r23
    13fa:	18 06       	cpc	r1, r24
    13fc:	09 06       	cpc	r0, r25
    13fe:	08 95       	ret

00001400 <__fp_pscB>:
    1400:	00 24       	eor	r0, r0
    1402:	0a 94       	dec	r0
    1404:	12 16       	cp	r1, r18
    1406:	13 06       	cpc	r1, r19
    1408:	14 06       	cpc	r1, r20
    140a:	05 06       	cpc	r0, r21
    140c:	08 95       	ret

0000140e <__fp_round>:
    140e:	09 2e       	mov	r0, r25
    1410:	03 94       	inc	r0
    1412:	00 0c       	add	r0, r0
    1414:	11 f4       	brne	.+4      	; 0x141a <__fp_round+0xc>
    1416:	88 23       	and	r24, r24
    1418:	52 f0       	brmi	.+20     	; 0x142e <__fp_round+0x20>
    141a:	bb 0f       	add	r27, r27
    141c:	40 f4       	brcc	.+16     	; 0x142e <__fp_round+0x20>
    141e:	bf 2b       	or	r27, r31
    1420:	11 f4       	brne	.+4      	; 0x1426 <__fp_round+0x18>
    1422:	60 ff       	sbrs	r22, 0
    1424:	04 c0       	rjmp	.+8      	; 0x142e <__fp_round+0x20>
    1426:	6f 5f       	subi	r22, 0xFF	; 255
    1428:	7f 4f       	sbci	r23, 0xFF	; 255
    142a:	8f 4f       	sbci	r24, 0xFF	; 255
    142c:	9f 4f       	sbci	r25, 0xFF	; 255
    142e:	08 95       	ret

00001430 <__fp_split3>:
    1430:	57 fd       	sbrc	r21, 7
    1432:	90 58       	subi	r25, 0x80	; 128
    1434:	44 0f       	add	r20, r20
    1436:	55 1f       	adc	r21, r21
    1438:	59 f0       	breq	.+22     	; 0x1450 <__fp_splitA+0x10>
    143a:	5f 3f       	cpi	r21, 0xFF	; 255
    143c:	71 f0       	breq	.+28     	; 0x145a <__fp_splitA+0x1a>
    143e:	47 95       	ror	r20

00001440 <__fp_splitA>:
    1440:	88 0f       	add	r24, r24
    1442:	97 fb       	bst	r25, 7
    1444:	99 1f       	adc	r25, r25
    1446:	61 f0       	breq	.+24     	; 0x1460 <__fp_splitA+0x20>
    1448:	9f 3f       	cpi	r25, 0xFF	; 255
    144a:	79 f0       	breq	.+30     	; 0x146a <__fp_splitA+0x2a>
    144c:	87 95       	ror	r24
    144e:	08 95       	ret
    1450:	12 16       	cp	r1, r18
    1452:	13 06       	cpc	r1, r19
    1454:	14 06       	cpc	r1, r20
    1456:	55 1f       	adc	r21, r21
    1458:	f2 cf       	rjmp	.-28     	; 0x143e <__fp_split3+0xe>
    145a:	46 95       	lsr	r20
    145c:	f1 df       	rcall	.-30     	; 0x1440 <__fp_splitA>
    145e:	08 c0       	rjmp	.+16     	; 0x1470 <__fp_splitA+0x30>
    1460:	16 16       	cp	r1, r22
    1462:	17 06       	cpc	r1, r23
    1464:	18 06       	cpc	r1, r24
    1466:	99 1f       	adc	r25, r25
    1468:	f1 cf       	rjmp	.-30     	; 0x144c <__fp_splitA+0xc>
    146a:	86 95       	lsr	r24
    146c:	71 05       	cpc	r23, r1
    146e:	61 05       	cpc	r22, r1
    1470:	08 94       	sec
    1472:	08 95       	ret

00001474 <__fp_zero>:
    1474:	e8 94       	clt

00001476 <__fp_szero>:
    1476:	bb 27       	eor	r27, r27
    1478:	66 27       	eor	r22, r22
    147a:	77 27       	eor	r23, r23
    147c:	cb 01       	movw	r24, r22
    147e:	97 f9       	bld	r25, 7
    1480:	08 95       	ret

00001482 <modf>:
    1482:	fa 01       	movw	r30, r20
    1484:	dc 01       	movw	r26, r24
    1486:	aa 0f       	add	r26, r26
    1488:	bb 1f       	adc	r27, r27
    148a:	9b 01       	movw	r18, r22
    148c:	ac 01       	movw	r20, r24
    148e:	bf 57       	subi	r27, 0x7F	; 127
    1490:	28 f4       	brcc	.+10     	; 0x149c <modf+0x1a>
    1492:	22 27       	eor	r18, r18
    1494:	33 27       	eor	r19, r19
    1496:	44 27       	eor	r20, r20
    1498:	50 78       	andi	r21, 0x80	; 128
    149a:	20 c0       	rjmp	.+64     	; 0x14dc <modf+0x5a>
    149c:	b7 51       	subi	r27, 0x17	; 23
    149e:	90 f4       	brcc	.+36     	; 0x14c4 <modf+0x42>
    14a0:	ab 2f       	mov	r26, r27
    14a2:	00 24       	eor	r0, r0
    14a4:	46 95       	lsr	r20
    14a6:	37 95       	ror	r19
    14a8:	27 95       	ror	r18
    14aa:	01 1c       	adc	r0, r1
    14ac:	a3 95       	inc	r26
    14ae:	d2 f3       	brmi	.-12     	; 0x14a4 <modf+0x22>
    14b0:	00 20       	and	r0, r0
    14b2:	71 f0       	breq	.+28     	; 0x14d0 <modf+0x4e>
    14b4:	22 0f       	add	r18, r18
    14b6:	33 1f       	adc	r19, r19
    14b8:	44 1f       	adc	r20, r20
    14ba:	b3 95       	inc	r27
    14bc:	da f3       	brmi	.-10     	; 0x14b4 <modf+0x32>
    14be:	0e d0       	rcall	.+28     	; 0x14dc <modf+0x5a>
    14c0:	0c 94 75 08 	jmp	0x10ea	; 0x10ea <__subsf3>
    14c4:	61 30       	cpi	r22, 0x01	; 1
    14c6:	71 05       	cpc	r23, r1
    14c8:	a0 e8       	ldi	r26, 0x80	; 128
    14ca:	8a 07       	cpc	r24, r26
    14cc:	b9 46       	sbci	r27, 0x69	; 105
    14ce:	30 f4       	brcc	.+12     	; 0x14dc <modf+0x5a>
    14d0:	9b 01       	movw	r18, r22
    14d2:	ac 01       	movw	r20, r24
    14d4:	66 27       	eor	r22, r22
    14d6:	77 27       	eor	r23, r23
    14d8:	88 27       	eor	r24, r24
    14da:	90 78       	andi	r25, 0x80	; 128
    14dc:	30 96       	adiw	r30, 0x00	; 0
    14de:	21 f0       	breq	.+8      	; 0x14e8 <modf+0x66>
    14e0:	20 83       	st	Z, r18
    14e2:	31 83       	std	Z+1, r19	; 0x01
    14e4:	42 83       	std	Z+2, r20	; 0x02
    14e6:	53 83       	std	Z+3, r21	; 0x03
    14e8:	08 95       	ret

000014ea <__mulsf3>:
    14ea:	0e 94 88 0a 	call	0x1510	; 0x1510 <__mulsf3x>
    14ee:	0c 94 07 0a 	jmp	0x140e	; 0x140e <__fp_round>
    14f2:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__fp_pscA>
    14f6:	38 f0       	brcs	.+14     	; 0x1506 <__mulsf3+0x1c>
    14f8:	0e 94 00 0a 	call	0x1400	; 0x1400 <__fp_pscB>
    14fc:	20 f0       	brcs	.+8      	; 0x1506 <__mulsf3+0x1c>
    14fe:	95 23       	and	r25, r21
    1500:	11 f0       	breq	.+4      	; 0x1506 <__mulsf3+0x1c>
    1502:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <__fp_inf>
    1506:	0c 94 f6 09 	jmp	0x13ec	; 0x13ec <__fp_nan>
    150a:	11 24       	eor	r1, r1
    150c:	0c 94 3b 0a 	jmp	0x1476	; 0x1476 <__fp_szero>

00001510 <__mulsf3x>:
    1510:	0e 94 18 0a 	call	0x1430	; 0x1430 <__fp_split3>
    1514:	70 f3       	brcs	.-36     	; 0x14f2 <__mulsf3+0x8>

00001516 <__mulsf3_pse>:
    1516:	95 9f       	mul	r25, r21
    1518:	c1 f3       	breq	.-16     	; 0x150a <__mulsf3+0x20>
    151a:	95 0f       	add	r25, r21
    151c:	50 e0       	ldi	r21, 0x00	; 0
    151e:	55 1f       	adc	r21, r21
    1520:	62 9f       	mul	r22, r18
    1522:	f0 01       	movw	r30, r0
    1524:	72 9f       	mul	r23, r18
    1526:	bb 27       	eor	r27, r27
    1528:	f0 0d       	add	r31, r0
    152a:	b1 1d       	adc	r27, r1
    152c:	63 9f       	mul	r22, r19
    152e:	aa 27       	eor	r26, r26
    1530:	f0 0d       	add	r31, r0
    1532:	b1 1d       	adc	r27, r1
    1534:	aa 1f       	adc	r26, r26
    1536:	64 9f       	mul	r22, r20
    1538:	66 27       	eor	r22, r22
    153a:	b0 0d       	add	r27, r0
    153c:	a1 1d       	adc	r26, r1
    153e:	66 1f       	adc	r22, r22
    1540:	82 9f       	mul	r24, r18
    1542:	22 27       	eor	r18, r18
    1544:	b0 0d       	add	r27, r0
    1546:	a1 1d       	adc	r26, r1
    1548:	62 1f       	adc	r22, r18
    154a:	73 9f       	mul	r23, r19
    154c:	b0 0d       	add	r27, r0
    154e:	a1 1d       	adc	r26, r1
    1550:	62 1f       	adc	r22, r18
    1552:	83 9f       	mul	r24, r19
    1554:	a0 0d       	add	r26, r0
    1556:	61 1d       	adc	r22, r1
    1558:	22 1f       	adc	r18, r18
    155a:	74 9f       	mul	r23, r20
    155c:	33 27       	eor	r19, r19
    155e:	a0 0d       	add	r26, r0
    1560:	61 1d       	adc	r22, r1
    1562:	23 1f       	adc	r18, r19
    1564:	84 9f       	mul	r24, r20
    1566:	60 0d       	add	r22, r0
    1568:	21 1d       	adc	r18, r1
    156a:	82 2f       	mov	r24, r18
    156c:	76 2f       	mov	r23, r22
    156e:	6a 2f       	mov	r22, r26
    1570:	11 24       	eor	r1, r1
    1572:	9f 57       	subi	r25, 0x7F	; 127
    1574:	50 40       	sbci	r21, 0x00	; 0
    1576:	9a f0       	brmi	.+38     	; 0x159e <__mulsf3_pse+0x88>
    1578:	f1 f0       	breq	.+60     	; 0x15b6 <__mulsf3_pse+0xa0>
    157a:	88 23       	and	r24, r24
    157c:	4a f0       	brmi	.+18     	; 0x1590 <__mulsf3_pse+0x7a>
    157e:	ee 0f       	add	r30, r30
    1580:	ff 1f       	adc	r31, r31
    1582:	bb 1f       	adc	r27, r27
    1584:	66 1f       	adc	r22, r22
    1586:	77 1f       	adc	r23, r23
    1588:	88 1f       	adc	r24, r24
    158a:	91 50       	subi	r25, 0x01	; 1
    158c:	50 40       	sbci	r21, 0x00	; 0
    158e:	a9 f7       	brne	.-22     	; 0x157a <__mulsf3_pse+0x64>
    1590:	9e 3f       	cpi	r25, 0xFE	; 254
    1592:	51 05       	cpc	r21, r1
    1594:	80 f0       	brcs	.+32     	; 0x15b6 <__mulsf3_pse+0xa0>
    1596:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <__fp_inf>
    159a:	0c 94 3b 0a 	jmp	0x1476	; 0x1476 <__fp_szero>
    159e:	5f 3f       	cpi	r21, 0xFF	; 255
    15a0:	e4 f3       	brlt	.-8      	; 0x159a <__mulsf3_pse+0x84>
    15a2:	98 3e       	cpi	r25, 0xE8	; 232
    15a4:	d4 f3       	brlt	.-12     	; 0x159a <__mulsf3_pse+0x84>
    15a6:	86 95       	lsr	r24
    15a8:	77 95       	ror	r23
    15aa:	67 95       	ror	r22
    15ac:	b7 95       	ror	r27
    15ae:	f7 95       	ror	r31
    15b0:	e7 95       	ror	r30
    15b2:	9f 5f       	subi	r25, 0xFF	; 255
    15b4:	c1 f7       	brne	.-16     	; 0x15a6 <__mulsf3_pse+0x90>
    15b6:	fe 2b       	or	r31, r30
    15b8:	88 0f       	add	r24, r24
    15ba:	91 1d       	adc	r25, r1
    15bc:	96 95       	lsr	r25
    15be:	87 95       	ror	r24
    15c0:	97 f9       	bld	r25, 7
    15c2:	08 95       	ret

000015c4 <round>:
    15c4:	0e 94 20 0a 	call	0x1440	; 0x1440 <__fp_splitA>
    15c8:	e8 f0       	brcs	.+58     	; 0x1604 <round+0x40>
    15ca:	9e 37       	cpi	r25, 0x7E	; 126
    15cc:	e8 f0       	brcs	.+58     	; 0x1608 <round+0x44>
    15ce:	96 39       	cpi	r25, 0x96	; 150
    15d0:	b8 f4       	brcc	.+46     	; 0x1600 <round+0x3c>
    15d2:	9e 38       	cpi	r25, 0x8E	; 142
    15d4:	48 f4       	brcc	.+18     	; 0x15e8 <round+0x24>
    15d6:	67 2f       	mov	r22, r23
    15d8:	78 2f       	mov	r23, r24
    15da:	88 27       	eor	r24, r24
    15dc:	98 5f       	subi	r25, 0xF8	; 248
    15de:	f9 cf       	rjmp	.-14     	; 0x15d2 <round+0xe>
    15e0:	86 95       	lsr	r24
    15e2:	77 95       	ror	r23
    15e4:	67 95       	ror	r22
    15e6:	93 95       	inc	r25
    15e8:	95 39       	cpi	r25, 0x95	; 149
    15ea:	d0 f3       	brcs	.-12     	; 0x15e0 <round+0x1c>
    15ec:	b6 2f       	mov	r27, r22
    15ee:	b1 70       	andi	r27, 0x01	; 1
    15f0:	6b 0f       	add	r22, r27
    15f2:	71 1d       	adc	r23, r1
    15f4:	81 1d       	adc	r24, r1
    15f6:	20 f4       	brcc	.+8      	; 0x1600 <round+0x3c>
    15f8:	87 95       	ror	r24
    15fa:	77 95       	ror	r23
    15fc:	67 95       	ror	r22
    15fe:	93 95       	inc	r25
    1600:	0c 94 06 0b 	jmp	0x160c	; 0x160c <__fp_mintl>
    1604:	0c 94 21 0b 	jmp	0x1642	; 0x1642 <__fp_mpack>
    1608:	0c 94 3b 0a 	jmp	0x1476	; 0x1476 <__fp_szero>

0000160c <__fp_mintl>:
    160c:	88 23       	and	r24, r24
    160e:	71 f4       	brne	.+28     	; 0x162c <__fp_mintl+0x20>
    1610:	77 23       	and	r23, r23
    1612:	21 f0       	breq	.+8      	; 0x161c <__fp_mintl+0x10>
    1614:	98 50       	subi	r25, 0x08	; 8
    1616:	87 2b       	or	r24, r23
    1618:	76 2f       	mov	r23, r22
    161a:	07 c0       	rjmp	.+14     	; 0x162a <__fp_mintl+0x1e>
    161c:	66 23       	and	r22, r22
    161e:	11 f4       	brne	.+4      	; 0x1624 <__fp_mintl+0x18>
    1620:	99 27       	eor	r25, r25
    1622:	0d c0       	rjmp	.+26     	; 0x163e <__fp_mintl+0x32>
    1624:	90 51       	subi	r25, 0x10	; 16
    1626:	86 2b       	or	r24, r22
    1628:	70 e0       	ldi	r23, 0x00	; 0
    162a:	60 e0       	ldi	r22, 0x00	; 0
    162c:	2a f0       	brmi	.+10     	; 0x1638 <__fp_mintl+0x2c>
    162e:	9a 95       	dec	r25
    1630:	66 0f       	add	r22, r22
    1632:	77 1f       	adc	r23, r23
    1634:	88 1f       	adc	r24, r24
    1636:	da f7       	brpl	.-10     	; 0x162e <__fp_mintl+0x22>
    1638:	88 0f       	add	r24, r24
    163a:	96 95       	lsr	r25
    163c:	87 95       	ror	r24
    163e:	97 f9       	bld	r25, 7
    1640:	08 95       	ret

00001642 <__fp_mpack>:
    1642:	9f 3f       	cpi	r25, 0xFF	; 255
    1644:	31 f0       	breq	.+12     	; 0x1652 <__fp_mpack_finite+0xc>

00001646 <__fp_mpack_finite>:
    1646:	91 50       	subi	r25, 0x01	; 1
    1648:	20 f4       	brcc	.+8      	; 0x1652 <__fp_mpack_finite+0xc>
    164a:	87 95       	ror	r24
    164c:	77 95       	ror	r23
    164e:	67 95       	ror	r22
    1650:	b7 95       	ror	r27
    1652:	88 0f       	add	r24, r24
    1654:	91 1d       	adc	r25, r1
    1656:	96 95       	lsr	r25
    1658:	87 95       	ror	r24
    165a:	97 f9       	bld	r25, 7
    165c:	08 95       	ret

0000165e <__divmodsi4>:
    165e:	05 2e       	mov	r0, r21
    1660:	97 fb       	bst	r25, 7
    1662:	1e f4       	brtc	.+6      	; 0x166a <__divmodsi4+0xc>
    1664:	00 94       	com	r0
    1666:	0e 94 46 0b 	call	0x168c	; 0x168c <__negsi2>
    166a:	57 fd       	sbrc	r21, 7
    166c:	07 d0       	rcall	.+14     	; 0x167c <__divmodsi4_neg2>
    166e:	0e 94 4e 0b 	call	0x169c	; 0x169c <__udivmodsi4>
    1672:	07 fc       	sbrc	r0, 7
    1674:	03 d0       	rcall	.+6      	; 0x167c <__divmodsi4_neg2>
    1676:	4e f4       	brtc	.+18     	; 0x168a <__divmodsi4_exit>
    1678:	0c 94 46 0b 	jmp	0x168c	; 0x168c <__negsi2>

0000167c <__divmodsi4_neg2>:
    167c:	50 95       	com	r21
    167e:	40 95       	com	r20
    1680:	30 95       	com	r19
    1682:	21 95       	neg	r18
    1684:	3f 4f       	sbci	r19, 0xFF	; 255
    1686:	4f 4f       	sbci	r20, 0xFF	; 255
    1688:	5f 4f       	sbci	r21, 0xFF	; 255

0000168a <__divmodsi4_exit>:
    168a:	08 95       	ret

0000168c <__negsi2>:
    168c:	90 95       	com	r25
    168e:	80 95       	com	r24
    1690:	70 95       	com	r23
    1692:	61 95       	neg	r22
    1694:	7f 4f       	sbci	r23, 0xFF	; 255
    1696:	8f 4f       	sbci	r24, 0xFF	; 255
    1698:	9f 4f       	sbci	r25, 0xFF	; 255
    169a:	08 95       	ret

0000169c <__udivmodsi4>:
    169c:	a1 e2       	ldi	r26, 0x21	; 33
    169e:	1a 2e       	mov	r1, r26
    16a0:	aa 1b       	sub	r26, r26
    16a2:	bb 1b       	sub	r27, r27
    16a4:	fd 01       	movw	r30, r26
    16a6:	0d c0       	rjmp	.+26     	; 0x16c2 <__udivmodsi4_ep>

000016a8 <__udivmodsi4_loop>:
    16a8:	aa 1f       	adc	r26, r26
    16aa:	bb 1f       	adc	r27, r27
    16ac:	ee 1f       	adc	r30, r30
    16ae:	ff 1f       	adc	r31, r31
    16b0:	a2 17       	cp	r26, r18
    16b2:	b3 07       	cpc	r27, r19
    16b4:	e4 07       	cpc	r30, r20
    16b6:	f5 07       	cpc	r31, r21
    16b8:	20 f0       	brcs	.+8      	; 0x16c2 <__udivmodsi4_ep>
    16ba:	a2 1b       	sub	r26, r18
    16bc:	b3 0b       	sbc	r27, r19
    16be:	e4 0b       	sbc	r30, r20
    16c0:	f5 0b       	sbc	r31, r21

000016c2 <__udivmodsi4_ep>:
    16c2:	66 1f       	adc	r22, r22
    16c4:	77 1f       	adc	r23, r23
    16c6:	88 1f       	adc	r24, r24
    16c8:	99 1f       	adc	r25, r25
    16ca:	1a 94       	dec	r1
    16cc:	69 f7       	brne	.-38     	; 0x16a8 <__udivmodsi4_loop>
    16ce:	60 95       	com	r22
    16d0:	70 95       	com	r23
    16d2:	80 95       	com	r24
    16d4:	90 95       	com	r25
    16d6:	9b 01       	movw	r18, r22
    16d8:	ac 01       	movw	r20, r24
    16da:	bd 01       	movw	r22, r26
    16dc:	cf 01       	movw	r24, r30
    16de:	08 95       	ret

000016e0 <malloc>:
    16e0:	0f 93       	push	r16
    16e2:	1f 93       	push	r17
    16e4:	cf 93       	push	r28
    16e6:	df 93       	push	r29
    16e8:	82 30       	cpi	r24, 0x02	; 2
    16ea:	91 05       	cpc	r25, r1
    16ec:	10 f4       	brcc	.+4      	; 0x16f2 <malloc+0x12>
    16ee:	82 e0       	ldi	r24, 0x02	; 2
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	e0 91 6e 04 	lds	r30, 0x046E	; 0x80046e <__flp>
    16f6:	f0 91 6f 04 	lds	r31, 0x046F	; 0x80046f <__flp+0x1>
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	a0 e0       	ldi	r26, 0x00	; 0
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	30 97       	sbiw	r30, 0x00	; 0
    1704:	19 f1       	breq	.+70     	; 0x174c <malloc+0x6c>
    1706:	40 81       	ld	r20, Z
    1708:	51 81       	ldd	r21, Z+1	; 0x01
    170a:	02 81       	ldd	r16, Z+2	; 0x02
    170c:	13 81       	ldd	r17, Z+3	; 0x03
    170e:	48 17       	cp	r20, r24
    1710:	59 07       	cpc	r21, r25
    1712:	c8 f0       	brcs	.+50     	; 0x1746 <malloc+0x66>
    1714:	84 17       	cp	r24, r20
    1716:	95 07       	cpc	r25, r21
    1718:	69 f4       	brne	.+26     	; 0x1734 <malloc+0x54>
    171a:	10 97       	sbiw	r26, 0x00	; 0
    171c:	31 f0       	breq	.+12     	; 0x172a <malloc+0x4a>
    171e:	12 96       	adiw	r26, 0x02	; 2
    1720:	0c 93       	st	X, r16
    1722:	12 97       	sbiw	r26, 0x02	; 2
    1724:	13 96       	adiw	r26, 0x03	; 3
    1726:	1c 93       	st	X, r17
    1728:	27 c0       	rjmp	.+78     	; 0x1778 <malloc+0x98>
    172a:	00 93 6e 04 	sts	0x046E, r16	; 0x80046e <__flp>
    172e:	10 93 6f 04 	sts	0x046F, r17	; 0x80046f <__flp+0x1>
    1732:	22 c0       	rjmp	.+68     	; 0x1778 <malloc+0x98>
    1734:	21 15       	cp	r18, r1
    1736:	31 05       	cpc	r19, r1
    1738:	19 f0       	breq	.+6      	; 0x1740 <malloc+0x60>
    173a:	42 17       	cp	r20, r18
    173c:	53 07       	cpc	r21, r19
    173e:	18 f4       	brcc	.+6      	; 0x1746 <malloc+0x66>
    1740:	9a 01       	movw	r18, r20
    1742:	bd 01       	movw	r22, r26
    1744:	ef 01       	movw	r28, r30
    1746:	df 01       	movw	r26, r30
    1748:	f8 01       	movw	r30, r16
    174a:	db cf       	rjmp	.-74     	; 0x1702 <malloc+0x22>
    174c:	21 15       	cp	r18, r1
    174e:	31 05       	cpc	r19, r1
    1750:	f9 f0       	breq	.+62     	; 0x1790 <malloc+0xb0>
    1752:	28 1b       	sub	r18, r24
    1754:	39 0b       	sbc	r19, r25
    1756:	24 30       	cpi	r18, 0x04	; 4
    1758:	31 05       	cpc	r19, r1
    175a:	80 f4       	brcc	.+32     	; 0x177c <malloc+0x9c>
    175c:	8a 81       	ldd	r24, Y+2	; 0x02
    175e:	9b 81       	ldd	r25, Y+3	; 0x03
    1760:	61 15       	cp	r22, r1
    1762:	71 05       	cpc	r23, r1
    1764:	21 f0       	breq	.+8      	; 0x176e <malloc+0x8e>
    1766:	fb 01       	movw	r30, r22
    1768:	93 83       	std	Z+3, r25	; 0x03
    176a:	82 83       	std	Z+2, r24	; 0x02
    176c:	04 c0       	rjmp	.+8      	; 0x1776 <malloc+0x96>
    176e:	90 93 6f 04 	sts	0x046F, r25	; 0x80046f <__flp+0x1>
    1772:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <__flp>
    1776:	fe 01       	movw	r30, r28
    1778:	32 96       	adiw	r30, 0x02	; 2
    177a:	44 c0       	rjmp	.+136    	; 0x1804 <malloc+0x124>
    177c:	fe 01       	movw	r30, r28
    177e:	e2 0f       	add	r30, r18
    1780:	f3 1f       	adc	r31, r19
    1782:	81 93       	st	Z+, r24
    1784:	91 93       	st	Z+, r25
    1786:	22 50       	subi	r18, 0x02	; 2
    1788:	31 09       	sbc	r19, r1
    178a:	39 83       	std	Y+1, r19	; 0x01
    178c:	28 83       	st	Y, r18
    178e:	3a c0       	rjmp	.+116    	; 0x1804 <malloc+0x124>
    1790:	20 91 6c 04 	lds	r18, 0x046C	; 0x80046c <__brkval>
    1794:	30 91 6d 04 	lds	r19, 0x046D	; 0x80046d <__brkval+0x1>
    1798:	23 2b       	or	r18, r19
    179a:	41 f4       	brne	.+16     	; 0x17ac <malloc+0xcc>
    179c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    17a0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    17a4:	30 93 6d 04 	sts	0x046D, r19	; 0x80046d <__brkval+0x1>
    17a8:	20 93 6c 04 	sts	0x046C, r18	; 0x80046c <__brkval>
    17ac:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    17b0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    17b4:	21 15       	cp	r18, r1
    17b6:	31 05       	cpc	r19, r1
    17b8:	41 f4       	brne	.+16     	; 0x17ca <malloc+0xea>
    17ba:	2d b7       	in	r18, 0x3d	; 61
    17bc:	3e b7       	in	r19, 0x3e	; 62
    17be:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    17c2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    17c6:	24 1b       	sub	r18, r20
    17c8:	35 0b       	sbc	r19, r21
    17ca:	e0 91 6c 04 	lds	r30, 0x046C	; 0x80046c <__brkval>
    17ce:	f0 91 6d 04 	lds	r31, 0x046D	; 0x80046d <__brkval+0x1>
    17d2:	e2 17       	cp	r30, r18
    17d4:	f3 07       	cpc	r31, r19
    17d6:	a0 f4       	brcc	.+40     	; 0x1800 <malloc+0x120>
    17d8:	2e 1b       	sub	r18, r30
    17da:	3f 0b       	sbc	r19, r31
    17dc:	28 17       	cp	r18, r24
    17de:	39 07       	cpc	r19, r25
    17e0:	78 f0       	brcs	.+30     	; 0x1800 <malloc+0x120>
    17e2:	ac 01       	movw	r20, r24
    17e4:	4e 5f       	subi	r20, 0xFE	; 254
    17e6:	5f 4f       	sbci	r21, 0xFF	; 255
    17e8:	24 17       	cp	r18, r20
    17ea:	35 07       	cpc	r19, r21
    17ec:	48 f0       	brcs	.+18     	; 0x1800 <malloc+0x120>
    17ee:	4e 0f       	add	r20, r30
    17f0:	5f 1f       	adc	r21, r31
    17f2:	50 93 6d 04 	sts	0x046D, r21	; 0x80046d <__brkval+0x1>
    17f6:	40 93 6c 04 	sts	0x046C, r20	; 0x80046c <__brkval>
    17fa:	81 93       	st	Z+, r24
    17fc:	91 93       	st	Z+, r25
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <malloc+0x124>
    1800:	e0 e0       	ldi	r30, 0x00	; 0
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	cf 01       	movw	r24, r30
    1806:	df 91       	pop	r29
    1808:	cf 91       	pop	r28
    180a:	1f 91       	pop	r17
    180c:	0f 91       	pop	r16
    180e:	08 95       	ret

00001810 <free>:
    1810:	cf 93       	push	r28
    1812:	df 93       	push	r29
    1814:	00 97       	sbiw	r24, 0x00	; 0
    1816:	09 f4       	brne	.+2      	; 0x181a <free+0xa>
    1818:	81 c0       	rjmp	.+258    	; 0x191c <free+0x10c>
    181a:	fc 01       	movw	r30, r24
    181c:	32 97       	sbiw	r30, 0x02	; 2
    181e:	13 82       	std	Z+3, r1	; 0x03
    1820:	12 82       	std	Z+2, r1	; 0x02
    1822:	a0 91 6e 04 	lds	r26, 0x046E	; 0x80046e <__flp>
    1826:	b0 91 6f 04 	lds	r27, 0x046F	; 0x80046f <__flp+0x1>
    182a:	10 97       	sbiw	r26, 0x00	; 0
    182c:	81 f4       	brne	.+32     	; 0x184e <free+0x3e>
    182e:	20 81       	ld	r18, Z
    1830:	31 81       	ldd	r19, Z+1	; 0x01
    1832:	82 0f       	add	r24, r18
    1834:	93 1f       	adc	r25, r19
    1836:	20 91 6c 04 	lds	r18, 0x046C	; 0x80046c <__brkval>
    183a:	30 91 6d 04 	lds	r19, 0x046D	; 0x80046d <__brkval+0x1>
    183e:	28 17       	cp	r18, r24
    1840:	39 07       	cpc	r19, r25
    1842:	51 f5       	brne	.+84     	; 0x1898 <free+0x88>
    1844:	f0 93 6d 04 	sts	0x046D, r31	; 0x80046d <__brkval+0x1>
    1848:	e0 93 6c 04 	sts	0x046C, r30	; 0x80046c <__brkval>
    184c:	67 c0       	rjmp	.+206    	; 0x191c <free+0x10c>
    184e:	ed 01       	movw	r28, r26
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	ce 17       	cp	r28, r30
    1856:	df 07       	cpc	r29, r31
    1858:	40 f4       	brcc	.+16     	; 0x186a <free+0x5a>
    185a:	4a 81       	ldd	r20, Y+2	; 0x02
    185c:	5b 81       	ldd	r21, Y+3	; 0x03
    185e:	9e 01       	movw	r18, r28
    1860:	41 15       	cp	r20, r1
    1862:	51 05       	cpc	r21, r1
    1864:	f1 f0       	breq	.+60     	; 0x18a2 <free+0x92>
    1866:	ea 01       	movw	r28, r20
    1868:	f5 cf       	rjmp	.-22     	; 0x1854 <free+0x44>
    186a:	d3 83       	std	Z+3, r29	; 0x03
    186c:	c2 83       	std	Z+2, r28	; 0x02
    186e:	40 81       	ld	r20, Z
    1870:	51 81       	ldd	r21, Z+1	; 0x01
    1872:	84 0f       	add	r24, r20
    1874:	95 1f       	adc	r25, r21
    1876:	c8 17       	cp	r28, r24
    1878:	d9 07       	cpc	r29, r25
    187a:	59 f4       	brne	.+22     	; 0x1892 <free+0x82>
    187c:	88 81       	ld	r24, Y
    187e:	99 81       	ldd	r25, Y+1	; 0x01
    1880:	84 0f       	add	r24, r20
    1882:	95 1f       	adc	r25, r21
    1884:	02 96       	adiw	r24, 0x02	; 2
    1886:	91 83       	std	Z+1, r25	; 0x01
    1888:	80 83       	st	Z, r24
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	9b 81       	ldd	r25, Y+3	; 0x03
    188e:	93 83       	std	Z+3, r25	; 0x03
    1890:	82 83       	std	Z+2, r24	; 0x02
    1892:	21 15       	cp	r18, r1
    1894:	31 05       	cpc	r19, r1
    1896:	29 f4       	brne	.+10     	; 0x18a2 <free+0x92>
    1898:	f0 93 6f 04 	sts	0x046F, r31	; 0x80046f <__flp+0x1>
    189c:	e0 93 6e 04 	sts	0x046E, r30	; 0x80046e <__flp>
    18a0:	3d c0       	rjmp	.+122    	; 0x191c <free+0x10c>
    18a2:	e9 01       	movw	r28, r18
    18a4:	fb 83       	std	Y+3, r31	; 0x03
    18a6:	ea 83       	std	Y+2, r30	; 0x02
    18a8:	49 91       	ld	r20, Y+
    18aa:	59 91       	ld	r21, Y+
    18ac:	c4 0f       	add	r28, r20
    18ae:	d5 1f       	adc	r29, r21
    18b0:	ec 17       	cp	r30, r28
    18b2:	fd 07       	cpc	r31, r29
    18b4:	61 f4       	brne	.+24     	; 0x18ce <free+0xbe>
    18b6:	80 81       	ld	r24, Z
    18b8:	91 81       	ldd	r25, Z+1	; 0x01
    18ba:	84 0f       	add	r24, r20
    18bc:	95 1f       	adc	r25, r21
    18be:	02 96       	adiw	r24, 0x02	; 2
    18c0:	e9 01       	movw	r28, r18
    18c2:	99 83       	std	Y+1, r25	; 0x01
    18c4:	88 83       	st	Y, r24
    18c6:	82 81       	ldd	r24, Z+2	; 0x02
    18c8:	93 81       	ldd	r25, Z+3	; 0x03
    18ca:	9b 83       	std	Y+3, r25	; 0x03
    18cc:	8a 83       	std	Y+2, r24	; 0x02
    18ce:	e0 e0       	ldi	r30, 0x00	; 0
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	12 96       	adiw	r26, 0x02	; 2
    18d4:	8d 91       	ld	r24, X+
    18d6:	9c 91       	ld	r25, X
    18d8:	13 97       	sbiw	r26, 0x03	; 3
    18da:	00 97       	sbiw	r24, 0x00	; 0
    18dc:	19 f0       	breq	.+6      	; 0x18e4 <free+0xd4>
    18de:	fd 01       	movw	r30, r26
    18e0:	dc 01       	movw	r26, r24
    18e2:	f7 cf       	rjmp	.-18     	; 0x18d2 <free+0xc2>
    18e4:	8d 91       	ld	r24, X+
    18e6:	9c 91       	ld	r25, X
    18e8:	11 97       	sbiw	r26, 0x01	; 1
    18ea:	9d 01       	movw	r18, r26
    18ec:	2e 5f       	subi	r18, 0xFE	; 254
    18ee:	3f 4f       	sbci	r19, 0xFF	; 255
    18f0:	82 0f       	add	r24, r18
    18f2:	93 1f       	adc	r25, r19
    18f4:	20 91 6c 04 	lds	r18, 0x046C	; 0x80046c <__brkval>
    18f8:	30 91 6d 04 	lds	r19, 0x046D	; 0x80046d <__brkval+0x1>
    18fc:	28 17       	cp	r18, r24
    18fe:	39 07       	cpc	r19, r25
    1900:	69 f4       	brne	.+26     	; 0x191c <free+0x10c>
    1902:	30 97       	sbiw	r30, 0x00	; 0
    1904:	29 f4       	brne	.+10     	; 0x1910 <free+0x100>
    1906:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <__flp+0x1>
    190a:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <__flp>
    190e:	02 c0       	rjmp	.+4      	; 0x1914 <free+0x104>
    1910:	13 82       	std	Z+3, r1	; 0x03
    1912:	12 82       	std	Z+2, r1	; 0x02
    1914:	b0 93 6d 04 	sts	0x046D, r27	; 0x80046d <__brkval+0x1>
    1918:	a0 93 6c 04 	sts	0x046C, r26	; 0x80046c <__brkval>
    191c:	df 91       	pop	r29
    191e:	cf 91       	pop	r28
    1920:	08 95       	ret

00001922 <realloc>:
    1922:	a0 e0       	ldi	r26, 0x00	; 0
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	e7 e9       	ldi	r30, 0x97	; 151
    1928:	fc e0       	ldi	r31, 0x0C	; 12
    192a:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <__prologue_saves__+0x8>
    192e:	ec 01       	movw	r28, r24
    1930:	00 97       	sbiw	r24, 0x00	; 0
    1932:	21 f4       	brne	.+8      	; 0x193c <realloc+0x1a>
    1934:	cb 01       	movw	r24, r22
    1936:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <malloc>
    193a:	b4 c0       	rjmp	.+360    	; 0x1aa4 <realloc+0x182>
    193c:	fc 01       	movw	r30, r24
    193e:	e6 0f       	add	r30, r22
    1940:	f7 1f       	adc	r31, r23
    1942:	9c 01       	movw	r18, r24
    1944:	22 50       	subi	r18, 0x02	; 2
    1946:	31 09       	sbc	r19, r1
    1948:	e2 17       	cp	r30, r18
    194a:	f3 07       	cpc	r31, r19
    194c:	08 f4       	brcc	.+2      	; 0x1950 <realloc+0x2e>
    194e:	a8 c0       	rjmp	.+336    	; 0x1aa0 <realloc+0x17e>
    1950:	d9 01       	movw	r26, r18
    1952:	0d 91       	ld	r16, X+
    1954:	1c 91       	ld	r17, X
    1956:	11 97       	sbiw	r26, 0x01	; 1
    1958:	06 17       	cp	r16, r22
    195a:	17 07       	cpc	r17, r23
    195c:	b0 f0       	brcs	.+44     	; 0x198a <realloc+0x68>
    195e:	05 30       	cpi	r16, 0x05	; 5
    1960:	11 05       	cpc	r17, r1
    1962:	08 f4       	brcc	.+2      	; 0x1966 <realloc+0x44>
    1964:	9b c0       	rjmp	.+310    	; 0x1a9c <realloc+0x17a>
    1966:	c8 01       	movw	r24, r16
    1968:	04 97       	sbiw	r24, 0x04	; 4
    196a:	86 17       	cp	r24, r22
    196c:	97 07       	cpc	r25, r23
    196e:	08 f4       	brcc	.+2      	; 0x1972 <realloc+0x50>
    1970:	95 c0       	rjmp	.+298    	; 0x1a9c <realloc+0x17a>
    1972:	02 50       	subi	r16, 0x02	; 2
    1974:	11 09       	sbc	r17, r1
    1976:	06 1b       	sub	r16, r22
    1978:	17 0b       	sbc	r17, r23
    197a:	01 93       	st	Z+, r16
    197c:	11 93       	st	Z+, r17
    197e:	6d 93       	st	X+, r22
    1980:	7c 93       	st	X, r23
    1982:	cf 01       	movw	r24, r30
    1984:	0e 94 08 0c 	call	0x1810	; 0x1810 <free>
    1988:	89 c0       	rjmp	.+274    	; 0x1a9c <realloc+0x17a>
    198a:	5b 01       	movw	r10, r22
    198c:	a0 1a       	sub	r10, r16
    198e:	b1 0a       	sbc	r11, r17
    1990:	4c 01       	movw	r8, r24
    1992:	80 0e       	add	r8, r16
    1994:	91 1e       	adc	r9, r17
    1996:	a0 91 6e 04 	lds	r26, 0x046E	; 0x80046e <__flp>
    199a:	b0 91 6f 04 	lds	r27, 0x046F	; 0x80046f <__flp+0x1>
    199e:	61 2c       	mov	r6, r1
    19a0:	71 2c       	mov	r7, r1
    19a2:	e1 2c       	mov	r14, r1
    19a4:	f1 2c       	mov	r15, r1
    19a6:	10 97       	sbiw	r26, 0x00	; 0
    19a8:	09 f4       	brne	.+2      	; 0x19ac <realloc+0x8a>
    19aa:	46 c0       	rjmp	.+140    	; 0x1a38 <realloc+0x116>
    19ac:	8d 91       	ld	r24, X+
    19ae:	9c 91       	ld	r25, X
    19b0:	11 97       	sbiw	r26, 0x01	; 1
    19b2:	a8 15       	cp	r26, r8
    19b4:	b9 05       	cpc	r27, r9
    19b6:	b1 f5       	brne	.+108    	; 0x1a24 <realloc+0x102>
    19b8:	6c 01       	movw	r12, r24
    19ba:	42 e0       	ldi	r20, 0x02	; 2
    19bc:	c4 0e       	add	r12, r20
    19be:	d1 1c       	adc	r13, r1
    19c0:	ca 14       	cp	r12, r10
    19c2:	db 04       	cpc	r13, r11
    19c4:	78 f1       	brcs	.+94     	; 0x1a24 <realloc+0x102>
    19c6:	4c 01       	movw	r8, r24
    19c8:	8a 18       	sub	r8, r10
    19ca:	9b 08       	sbc	r9, r11
    19cc:	64 01       	movw	r12, r8
    19ce:	42 e0       	ldi	r20, 0x02	; 2
    19d0:	c4 0e       	add	r12, r20
    19d2:	d1 1c       	adc	r13, r1
    19d4:	12 96       	adiw	r26, 0x02	; 2
    19d6:	bc 90       	ld	r11, X
    19d8:	12 97       	sbiw	r26, 0x02	; 2
    19da:	13 96       	adiw	r26, 0x03	; 3
    19dc:	ac 91       	ld	r26, X
    19de:	b5 e0       	ldi	r27, 0x05	; 5
    19e0:	cb 16       	cp	r12, r27
    19e2:	d1 04       	cpc	r13, r1
    19e4:	40 f0       	brcs	.+16     	; 0x19f6 <realloc+0xd4>
    19e6:	b2 82       	std	Z+2, r11	; 0x02
    19e8:	a3 83       	std	Z+3, r26	; 0x03
    19ea:	91 82       	std	Z+1, r9	; 0x01
    19ec:	80 82       	st	Z, r8
    19ee:	d9 01       	movw	r26, r18
    19f0:	6d 93       	st	X+, r22
    19f2:	7c 93       	st	X, r23
    19f4:	09 c0       	rjmp	.+18     	; 0x1a08 <realloc+0xe6>
    19f6:	0e 5f       	subi	r16, 0xFE	; 254
    19f8:	1f 4f       	sbci	r17, 0xFF	; 255
    19fa:	80 0f       	add	r24, r16
    19fc:	91 1f       	adc	r25, r17
    19fe:	f9 01       	movw	r30, r18
    1a00:	91 83       	std	Z+1, r25	; 0x01
    1a02:	80 83       	st	Z, r24
    1a04:	eb 2d       	mov	r30, r11
    1a06:	fa 2f       	mov	r31, r26
    1a08:	e1 14       	cp	r14, r1
    1a0a:	f1 04       	cpc	r15, r1
    1a0c:	31 f0       	breq	.+12     	; 0x1a1a <realloc+0xf8>
    1a0e:	d7 01       	movw	r26, r14
    1a10:	13 96       	adiw	r26, 0x03	; 3
    1a12:	fc 93       	st	X, r31
    1a14:	ee 93       	st	-X, r30
    1a16:	12 97       	sbiw	r26, 0x02	; 2
    1a18:	41 c0       	rjmp	.+130    	; 0x1a9c <realloc+0x17a>
    1a1a:	f0 93 6f 04 	sts	0x046F, r31	; 0x80046f <__flp+0x1>
    1a1e:	e0 93 6e 04 	sts	0x046E, r30	; 0x80046e <__flp>
    1a22:	3c c0       	rjmp	.+120    	; 0x1a9c <realloc+0x17a>
    1a24:	68 16       	cp	r6, r24
    1a26:	79 06       	cpc	r7, r25
    1a28:	08 f4       	brcc	.+2      	; 0x1a2c <realloc+0x10a>
    1a2a:	3c 01       	movw	r6, r24
    1a2c:	7d 01       	movw	r14, r26
    1a2e:	12 96       	adiw	r26, 0x02	; 2
    1a30:	0d 90       	ld	r0, X+
    1a32:	bc 91       	ld	r27, X
    1a34:	a0 2d       	mov	r26, r0
    1a36:	b7 cf       	rjmp	.-146    	; 0x19a6 <realloc+0x84>
    1a38:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <__brkval>
    1a3c:	90 91 6d 04 	lds	r25, 0x046D	; 0x80046d <__brkval+0x1>
    1a40:	88 16       	cp	r8, r24
    1a42:	99 06       	cpc	r9, r25
    1a44:	e1 f4       	brne	.+56     	; 0x1a7e <realloc+0x15c>
    1a46:	66 16       	cp	r6, r22
    1a48:	77 06       	cpc	r7, r23
    1a4a:	c8 f4       	brcc	.+50     	; 0x1a7e <realloc+0x15c>
    1a4c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1a50:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1a54:	00 97       	sbiw	r24, 0x00	; 0
    1a56:	41 f4       	brne	.+16     	; 0x1a68 <realloc+0x146>
    1a58:	8d b7       	in	r24, 0x3d	; 61
    1a5a:	9e b7       	in	r25, 0x3e	; 62
    1a5c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1a60:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1a64:	84 1b       	sub	r24, r20
    1a66:	95 0b       	sbc	r25, r21
    1a68:	e8 17       	cp	r30, r24
    1a6a:	f9 07       	cpc	r31, r25
    1a6c:	c8 f4       	brcc	.+50     	; 0x1aa0 <realloc+0x17e>
    1a6e:	f0 93 6d 04 	sts	0x046D, r31	; 0x80046d <__brkval+0x1>
    1a72:	e0 93 6c 04 	sts	0x046C, r30	; 0x80046c <__brkval>
    1a76:	f9 01       	movw	r30, r18
    1a78:	71 83       	std	Z+1, r23	; 0x01
    1a7a:	60 83       	st	Z, r22
    1a7c:	0f c0       	rjmp	.+30     	; 0x1a9c <realloc+0x17a>
    1a7e:	cb 01       	movw	r24, r22
    1a80:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <malloc>
    1a84:	7c 01       	movw	r14, r24
    1a86:	00 97       	sbiw	r24, 0x00	; 0
    1a88:	59 f0       	breq	.+22     	; 0x1aa0 <realloc+0x17e>
    1a8a:	a8 01       	movw	r20, r16
    1a8c:	be 01       	movw	r22, r28
    1a8e:	0e 94 57 0d 	call	0x1aae	; 0x1aae <memcpy>
    1a92:	ce 01       	movw	r24, r28
    1a94:	0e 94 08 0c 	call	0x1810	; 0x1810 <free>
    1a98:	c7 01       	movw	r24, r14
    1a9a:	04 c0       	rjmp	.+8      	; 0x1aa4 <realloc+0x182>
    1a9c:	ce 01       	movw	r24, r28
    1a9e:	02 c0       	rjmp	.+4      	; 0x1aa4 <realloc+0x182>
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	cd b7       	in	r28, 0x3d	; 61
    1aa6:	de b7       	in	r29, 0x3e	; 62
    1aa8:	ee e0       	ldi	r30, 0x0E	; 14
    1aaa:	0c 94 73 10 	jmp	0x20e6	; 0x20e6 <__epilogue_restores__+0x8>

00001aae <memcpy>:
    1aae:	fb 01       	movw	r30, r22
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	02 c0       	rjmp	.+4      	; 0x1ab8 <memcpy+0xa>
    1ab4:	01 90       	ld	r0, Z+
    1ab6:	0d 92       	st	X+, r0
    1ab8:	41 50       	subi	r20, 0x01	; 1
    1aba:	50 40       	sbci	r21, 0x00	; 0
    1abc:	d8 f7       	brcc	.-10     	; 0x1ab4 <memcpy+0x6>
    1abe:	08 95       	ret

00001ac0 <strcmp>:
    1ac0:	fb 01       	movw	r30, r22
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	8d 91       	ld	r24, X+
    1ac6:	01 90       	ld	r0, Z+
    1ac8:	80 19       	sub	r24, r0
    1aca:	01 10       	cpse	r0, r1
    1acc:	d9 f3       	breq	.-10     	; 0x1ac4 <strcmp+0x4>
    1ace:	99 0b       	sbc	r25, r25
    1ad0:	08 95       	ret

00001ad2 <strcpy>:
    1ad2:	fb 01       	movw	r30, r22
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	01 90       	ld	r0, Z+
    1ad8:	0d 92       	st	X+, r0
    1ada:	00 20       	and	r0, r0
    1adc:	e1 f7       	brne	.-8      	; 0x1ad6 <strcpy+0x4>
    1ade:	08 95       	ret

00001ae0 <snprintf>:
    1ae0:	ae e0       	ldi	r26, 0x0E	; 14
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	e6 e7       	ldi	r30, 0x76	; 118
    1ae6:	fd e0       	ldi	r31, 0x0D	; 13
    1ae8:	0c 94 61 10 	jmp	0x20c2	; 0x20c2 <__prologue_saves__+0x1c>
    1aec:	0d 89       	ldd	r16, Y+21	; 0x15
    1aee:	1e 89       	ldd	r17, Y+22	; 0x16
    1af0:	8f 89       	ldd	r24, Y+23	; 0x17
    1af2:	98 8d       	ldd	r25, Y+24	; 0x18
    1af4:	26 e0       	ldi	r18, 0x06	; 6
    1af6:	2c 83       	std	Y+4, r18	; 0x04
    1af8:	1a 83       	std	Y+2, r17	; 0x02
    1afa:	09 83       	std	Y+1, r16	; 0x01
    1afc:	97 ff       	sbrs	r25, 7
    1afe:	02 c0       	rjmp	.+4      	; 0x1b04 <snprintf+0x24>
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	90 e8       	ldi	r25, 0x80	; 128
    1b04:	01 97       	sbiw	r24, 0x01	; 1
    1b06:	9e 83       	std	Y+6, r25	; 0x06
    1b08:	8d 83       	std	Y+5, r24	; 0x05
    1b0a:	ae 01       	movw	r20, r28
    1b0c:	45 5e       	subi	r20, 0xE5	; 229
    1b0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b10:	69 8d       	ldd	r22, Y+25	; 0x19
    1b12:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b14:	ce 01       	movw	r24, r28
    1b16:	01 96       	adiw	r24, 0x01	; 1
    1b18:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <vfprintf>
    1b1c:	4d 81       	ldd	r20, Y+5	; 0x05
    1b1e:	5e 81       	ldd	r21, Y+6	; 0x06
    1b20:	57 fd       	sbrc	r21, 7
    1b22:	0a c0       	rjmp	.+20     	; 0x1b38 <snprintf+0x58>
    1b24:	2f 81       	ldd	r18, Y+7	; 0x07
    1b26:	38 85       	ldd	r19, Y+8	; 0x08
    1b28:	42 17       	cp	r20, r18
    1b2a:	53 07       	cpc	r21, r19
    1b2c:	0c f4       	brge	.+2      	; 0x1b30 <snprintf+0x50>
    1b2e:	9a 01       	movw	r18, r20
    1b30:	f8 01       	movw	r30, r16
    1b32:	e2 0f       	add	r30, r18
    1b34:	f3 1f       	adc	r31, r19
    1b36:	10 82       	st	Z, r1
    1b38:	2e 96       	adiw	r28, 0x0e	; 14
    1b3a:	e4 e0       	ldi	r30, 0x04	; 4
    1b3c:	0c 94 7d 10 	jmp	0x20fa	; 0x20fa <__epilogue_restores__+0x1c>

00001b40 <sprintf>:
    1b40:	ae e0       	ldi	r26, 0x0E	; 14
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	e6 ea       	ldi	r30, 0xA6	; 166
    1b46:	fd e0       	ldi	r31, 0x0D	; 13
    1b48:	0c 94 61 10 	jmp	0x20c2	; 0x20c2 <__prologue_saves__+0x1c>
    1b4c:	0d 89       	ldd	r16, Y+21	; 0x15
    1b4e:	1e 89       	ldd	r17, Y+22	; 0x16
    1b50:	86 e0       	ldi	r24, 0x06	; 6
    1b52:	8c 83       	std	Y+4, r24	; 0x04
    1b54:	1a 83       	std	Y+2, r17	; 0x02
    1b56:	09 83       	std	Y+1, r16	; 0x01
    1b58:	8f ef       	ldi	r24, 0xFF	; 255
    1b5a:	9f e7       	ldi	r25, 0x7F	; 127
    1b5c:	9e 83       	std	Y+6, r25	; 0x06
    1b5e:	8d 83       	std	Y+5, r24	; 0x05
    1b60:	ae 01       	movw	r20, r28
    1b62:	47 5e       	subi	r20, 0xE7	; 231
    1b64:	5f 4f       	sbci	r21, 0xFF	; 255
    1b66:	6f 89       	ldd	r22, Y+23	; 0x17
    1b68:	78 8d       	ldd	r23, Y+24	; 0x18
    1b6a:	ce 01       	movw	r24, r28
    1b6c:	01 96       	adiw	r24, 0x01	; 1
    1b6e:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <vfprintf>
    1b72:	ef 81       	ldd	r30, Y+7	; 0x07
    1b74:	f8 85       	ldd	r31, Y+8	; 0x08
    1b76:	e0 0f       	add	r30, r16
    1b78:	f1 1f       	adc	r31, r17
    1b7a:	10 82       	st	Z, r1
    1b7c:	2e 96       	adiw	r28, 0x0e	; 14
    1b7e:	e4 e0       	ldi	r30, 0x04	; 4
    1b80:	0c 94 7d 10 	jmp	0x20fa	; 0x20fa <__epilogue_restores__+0x1c>

00001b84 <vfprintf>:
    1b84:	ab e0       	ldi	r26, 0x0B	; 11
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	e8 ec       	ldi	r30, 0xC8	; 200
    1b8a:	fd e0       	ldi	r31, 0x0D	; 13
    1b8c:	0c 94 53 10 	jmp	0x20a6	; 0x20a6 <__prologue_saves__>
    1b90:	6c 01       	movw	r12, r24
    1b92:	7b 01       	movw	r14, r22
    1b94:	8a 01       	movw	r16, r20
    1b96:	fc 01       	movw	r30, r24
    1b98:	17 82       	std	Z+7, r1	; 0x07
    1b9a:	16 82       	std	Z+6, r1	; 0x06
    1b9c:	83 81       	ldd	r24, Z+3	; 0x03
    1b9e:	81 ff       	sbrs	r24, 1
    1ba0:	cc c1       	rjmp	.+920    	; 0x1f3a <vfprintf+0x3b6>
    1ba2:	ce 01       	movw	r24, r28
    1ba4:	01 96       	adiw	r24, 0x01	; 1
    1ba6:	3c 01       	movw	r6, r24
    1ba8:	f6 01       	movw	r30, r12
    1baa:	93 81       	ldd	r25, Z+3	; 0x03
    1bac:	f7 01       	movw	r30, r14
    1bae:	93 fd       	sbrc	r25, 3
    1bb0:	85 91       	lpm	r24, Z+
    1bb2:	93 ff       	sbrs	r25, 3
    1bb4:	81 91       	ld	r24, Z+
    1bb6:	7f 01       	movw	r14, r30
    1bb8:	88 23       	and	r24, r24
    1bba:	09 f4       	brne	.+2      	; 0x1bbe <vfprintf+0x3a>
    1bbc:	ba c1       	rjmp	.+884    	; 0x1f32 <vfprintf+0x3ae>
    1bbe:	85 32       	cpi	r24, 0x25	; 37
    1bc0:	39 f4       	brne	.+14     	; 0x1bd0 <vfprintf+0x4c>
    1bc2:	93 fd       	sbrc	r25, 3
    1bc4:	85 91       	lpm	r24, Z+
    1bc6:	93 ff       	sbrs	r25, 3
    1bc8:	81 91       	ld	r24, Z+
    1bca:	7f 01       	movw	r14, r30
    1bcc:	85 32       	cpi	r24, 0x25	; 37
    1bce:	29 f4       	brne	.+10     	; 0x1bda <vfprintf+0x56>
    1bd0:	b6 01       	movw	r22, r12
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <fputc>
    1bd8:	e7 cf       	rjmp	.-50     	; 0x1ba8 <vfprintf+0x24>
    1bda:	91 2c       	mov	r9, r1
    1bdc:	21 2c       	mov	r2, r1
    1bde:	31 2c       	mov	r3, r1
    1be0:	ff e1       	ldi	r31, 0x1F	; 31
    1be2:	f3 15       	cp	r31, r3
    1be4:	d8 f0       	brcs	.+54     	; 0x1c1c <vfprintf+0x98>
    1be6:	8b 32       	cpi	r24, 0x2B	; 43
    1be8:	79 f0       	breq	.+30     	; 0x1c08 <vfprintf+0x84>
    1bea:	38 f4       	brcc	.+14     	; 0x1bfa <vfprintf+0x76>
    1bec:	80 32       	cpi	r24, 0x20	; 32
    1bee:	79 f0       	breq	.+30     	; 0x1c0e <vfprintf+0x8a>
    1bf0:	83 32       	cpi	r24, 0x23	; 35
    1bf2:	a1 f4       	brne	.+40     	; 0x1c1c <vfprintf+0x98>
    1bf4:	23 2d       	mov	r18, r3
    1bf6:	20 61       	ori	r18, 0x10	; 16
    1bf8:	1d c0       	rjmp	.+58     	; 0x1c34 <vfprintf+0xb0>
    1bfa:	8d 32       	cpi	r24, 0x2D	; 45
    1bfc:	61 f0       	breq	.+24     	; 0x1c16 <vfprintf+0x92>
    1bfe:	80 33       	cpi	r24, 0x30	; 48
    1c00:	69 f4       	brne	.+26     	; 0x1c1c <vfprintf+0x98>
    1c02:	23 2d       	mov	r18, r3
    1c04:	21 60       	ori	r18, 0x01	; 1
    1c06:	16 c0       	rjmp	.+44     	; 0x1c34 <vfprintf+0xb0>
    1c08:	83 2d       	mov	r24, r3
    1c0a:	82 60       	ori	r24, 0x02	; 2
    1c0c:	38 2e       	mov	r3, r24
    1c0e:	e3 2d       	mov	r30, r3
    1c10:	e4 60       	ori	r30, 0x04	; 4
    1c12:	3e 2e       	mov	r3, r30
    1c14:	2a c0       	rjmp	.+84     	; 0x1c6a <vfprintf+0xe6>
    1c16:	f3 2d       	mov	r31, r3
    1c18:	f8 60       	ori	r31, 0x08	; 8
    1c1a:	1d c0       	rjmp	.+58     	; 0x1c56 <vfprintf+0xd2>
    1c1c:	37 fc       	sbrc	r3, 7
    1c1e:	2d c0       	rjmp	.+90     	; 0x1c7a <vfprintf+0xf6>
    1c20:	20 ed       	ldi	r18, 0xD0	; 208
    1c22:	28 0f       	add	r18, r24
    1c24:	2a 30       	cpi	r18, 0x0A	; 10
    1c26:	40 f0       	brcs	.+16     	; 0x1c38 <vfprintf+0xb4>
    1c28:	8e 32       	cpi	r24, 0x2E	; 46
    1c2a:	b9 f4       	brne	.+46     	; 0x1c5a <vfprintf+0xd6>
    1c2c:	36 fc       	sbrc	r3, 6
    1c2e:	81 c1       	rjmp	.+770    	; 0x1f32 <vfprintf+0x3ae>
    1c30:	23 2d       	mov	r18, r3
    1c32:	20 64       	ori	r18, 0x40	; 64
    1c34:	32 2e       	mov	r3, r18
    1c36:	19 c0       	rjmp	.+50     	; 0x1c6a <vfprintf+0xe6>
    1c38:	36 fe       	sbrs	r3, 6
    1c3a:	06 c0       	rjmp	.+12     	; 0x1c48 <vfprintf+0xc4>
    1c3c:	8a e0       	ldi	r24, 0x0A	; 10
    1c3e:	98 9e       	mul	r9, r24
    1c40:	20 0d       	add	r18, r0
    1c42:	11 24       	eor	r1, r1
    1c44:	92 2e       	mov	r9, r18
    1c46:	11 c0       	rjmp	.+34     	; 0x1c6a <vfprintf+0xe6>
    1c48:	ea e0       	ldi	r30, 0x0A	; 10
    1c4a:	2e 9e       	mul	r2, r30
    1c4c:	20 0d       	add	r18, r0
    1c4e:	11 24       	eor	r1, r1
    1c50:	22 2e       	mov	r2, r18
    1c52:	f3 2d       	mov	r31, r3
    1c54:	f0 62       	ori	r31, 0x20	; 32
    1c56:	3f 2e       	mov	r3, r31
    1c58:	08 c0       	rjmp	.+16     	; 0x1c6a <vfprintf+0xe6>
    1c5a:	8c 36       	cpi	r24, 0x6C	; 108
    1c5c:	21 f4       	brne	.+8      	; 0x1c66 <vfprintf+0xe2>
    1c5e:	83 2d       	mov	r24, r3
    1c60:	80 68       	ori	r24, 0x80	; 128
    1c62:	38 2e       	mov	r3, r24
    1c64:	02 c0       	rjmp	.+4      	; 0x1c6a <vfprintf+0xe6>
    1c66:	88 36       	cpi	r24, 0x68	; 104
    1c68:	41 f4       	brne	.+16     	; 0x1c7a <vfprintf+0xf6>
    1c6a:	f7 01       	movw	r30, r14
    1c6c:	93 fd       	sbrc	r25, 3
    1c6e:	85 91       	lpm	r24, Z+
    1c70:	93 ff       	sbrs	r25, 3
    1c72:	81 91       	ld	r24, Z+
    1c74:	7f 01       	movw	r14, r30
    1c76:	81 11       	cpse	r24, r1
    1c78:	b3 cf       	rjmp	.-154    	; 0x1be0 <vfprintf+0x5c>
    1c7a:	98 2f       	mov	r25, r24
    1c7c:	9f 7d       	andi	r25, 0xDF	; 223
    1c7e:	95 54       	subi	r25, 0x45	; 69
    1c80:	93 30       	cpi	r25, 0x03	; 3
    1c82:	28 f4       	brcc	.+10     	; 0x1c8e <vfprintf+0x10a>
    1c84:	0c 5f       	subi	r16, 0xFC	; 252
    1c86:	1f 4f       	sbci	r17, 0xFF	; 255
    1c88:	9f e3       	ldi	r25, 0x3F	; 63
    1c8a:	99 83       	std	Y+1, r25	; 0x01
    1c8c:	0d c0       	rjmp	.+26     	; 0x1ca8 <vfprintf+0x124>
    1c8e:	83 36       	cpi	r24, 0x63	; 99
    1c90:	31 f0       	breq	.+12     	; 0x1c9e <vfprintf+0x11a>
    1c92:	83 37       	cpi	r24, 0x73	; 115
    1c94:	71 f0       	breq	.+28     	; 0x1cb2 <vfprintf+0x12e>
    1c96:	83 35       	cpi	r24, 0x53	; 83
    1c98:	09 f0       	breq	.+2      	; 0x1c9c <vfprintf+0x118>
    1c9a:	59 c0       	rjmp	.+178    	; 0x1d4e <vfprintf+0x1ca>
    1c9c:	21 c0       	rjmp	.+66     	; 0x1ce0 <vfprintf+0x15c>
    1c9e:	f8 01       	movw	r30, r16
    1ca0:	80 81       	ld	r24, Z
    1ca2:	89 83       	std	Y+1, r24	; 0x01
    1ca4:	0e 5f       	subi	r16, 0xFE	; 254
    1ca6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ca8:	88 24       	eor	r8, r8
    1caa:	83 94       	inc	r8
    1cac:	91 2c       	mov	r9, r1
    1cae:	53 01       	movw	r10, r6
    1cb0:	13 c0       	rjmp	.+38     	; 0x1cd8 <vfprintf+0x154>
    1cb2:	28 01       	movw	r4, r16
    1cb4:	f2 e0       	ldi	r31, 0x02	; 2
    1cb6:	4f 0e       	add	r4, r31
    1cb8:	51 1c       	adc	r5, r1
    1cba:	f8 01       	movw	r30, r16
    1cbc:	a0 80       	ld	r10, Z
    1cbe:	b1 80       	ldd	r11, Z+1	; 0x01
    1cc0:	36 fe       	sbrs	r3, 6
    1cc2:	03 c0       	rjmp	.+6      	; 0x1cca <vfprintf+0x146>
    1cc4:	69 2d       	mov	r22, r9
    1cc6:	70 e0       	ldi	r23, 0x00	; 0
    1cc8:	02 c0       	rjmp	.+4      	; 0x1cce <vfprintf+0x14a>
    1cca:	6f ef       	ldi	r22, 0xFF	; 255
    1ccc:	7f ef       	ldi	r23, 0xFF	; 255
    1cce:	c5 01       	movw	r24, r10
    1cd0:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <strnlen>
    1cd4:	4c 01       	movw	r8, r24
    1cd6:	82 01       	movw	r16, r4
    1cd8:	f3 2d       	mov	r31, r3
    1cda:	ff 77       	andi	r31, 0x7F	; 127
    1cdc:	3f 2e       	mov	r3, r31
    1cde:	16 c0       	rjmp	.+44     	; 0x1d0c <vfprintf+0x188>
    1ce0:	28 01       	movw	r4, r16
    1ce2:	22 e0       	ldi	r18, 0x02	; 2
    1ce4:	42 0e       	add	r4, r18
    1ce6:	51 1c       	adc	r5, r1
    1ce8:	f8 01       	movw	r30, r16
    1cea:	a0 80       	ld	r10, Z
    1cec:	b1 80       	ldd	r11, Z+1	; 0x01
    1cee:	36 fe       	sbrs	r3, 6
    1cf0:	03 c0       	rjmp	.+6      	; 0x1cf8 <vfprintf+0x174>
    1cf2:	69 2d       	mov	r22, r9
    1cf4:	70 e0       	ldi	r23, 0x00	; 0
    1cf6:	02 c0       	rjmp	.+4      	; 0x1cfc <vfprintf+0x178>
    1cf8:	6f ef       	ldi	r22, 0xFF	; 255
    1cfa:	7f ef       	ldi	r23, 0xFF	; 255
    1cfc:	c5 01       	movw	r24, r10
    1cfe:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <strnlen_P>
    1d02:	4c 01       	movw	r8, r24
    1d04:	f3 2d       	mov	r31, r3
    1d06:	f0 68       	ori	r31, 0x80	; 128
    1d08:	3f 2e       	mov	r3, r31
    1d0a:	82 01       	movw	r16, r4
    1d0c:	33 fc       	sbrc	r3, 3
    1d0e:	1b c0       	rjmp	.+54     	; 0x1d46 <vfprintf+0x1c2>
    1d10:	82 2d       	mov	r24, r2
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	88 16       	cp	r8, r24
    1d16:	99 06       	cpc	r9, r25
    1d18:	b0 f4       	brcc	.+44     	; 0x1d46 <vfprintf+0x1c2>
    1d1a:	b6 01       	movw	r22, r12
    1d1c:	80 e2       	ldi	r24, 0x20	; 32
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <fputc>
    1d24:	2a 94       	dec	r2
    1d26:	f4 cf       	rjmp	.-24     	; 0x1d10 <vfprintf+0x18c>
    1d28:	f5 01       	movw	r30, r10
    1d2a:	37 fc       	sbrc	r3, 7
    1d2c:	85 91       	lpm	r24, Z+
    1d2e:	37 fe       	sbrs	r3, 7
    1d30:	81 91       	ld	r24, Z+
    1d32:	5f 01       	movw	r10, r30
    1d34:	b6 01       	movw	r22, r12
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <fputc>
    1d3c:	21 10       	cpse	r2, r1
    1d3e:	2a 94       	dec	r2
    1d40:	21 e0       	ldi	r18, 0x01	; 1
    1d42:	82 1a       	sub	r8, r18
    1d44:	91 08       	sbc	r9, r1
    1d46:	81 14       	cp	r8, r1
    1d48:	91 04       	cpc	r9, r1
    1d4a:	71 f7       	brne	.-36     	; 0x1d28 <vfprintf+0x1a4>
    1d4c:	e8 c0       	rjmp	.+464    	; 0x1f1e <vfprintf+0x39a>
    1d4e:	84 36       	cpi	r24, 0x64	; 100
    1d50:	11 f0       	breq	.+4      	; 0x1d56 <vfprintf+0x1d2>
    1d52:	89 36       	cpi	r24, 0x69	; 105
    1d54:	41 f5       	brne	.+80     	; 0x1da6 <vfprintf+0x222>
    1d56:	f8 01       	movw	r30, r16
    1d58:	37 fe       	sbrs	r3, 7
    1d5a:	07 c0       	rjmp	.+14     	; 0x1d6a <vfprintf+0x1e6>
    1d5c:	60 81       	ld	r22, Z
    1d5e:	71 81       	ldd	r23, Z+1	; 0x01
    1d60:	82 81       	ldd	r24, Z+2	; 0x02
    1d62:	93 81       	ldd	r25, Z+3	; 0x03
    1d64:	0c 5f       	subi	r16, 0xFC	; 252
    1d66:	1f 4f       	sbci	r17, 0xFF	; 255
    1d68:	08 c0       	rjmp	.+16     	; 0x1d7a <vfprintf+0x1f6>
    1d6a:	60 81       	ld	r22, Z
    1d6c:	71 81       	ldd	r23, Z+1	; 0x01
    1d6e:	07 2e       	mov	r0, r23
    1d70:	00 0c       	add	r0, r0
    1d72:	88 0b       	sbc	r24, r24
    1d74:	99 0b       	sbc	r25, r25
    1d76:	0e 5f       	subi	r16, 0xFE	; 254
    1d78:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7a:	f3 2d       	mov	r31, r3
    1d7c:	ff 76       	andi	r31, 0x6F	; 111
    1d7e:	3f 2e       	mov	r3, r31
    1d80:	97 ff       	sbrs	r25, 7
    1d82:	09 c0       	rjmp	.+18     	; 0x1d96 <vfprintf+0x212>
    1d84:	90 95       	com	r25
    1d86:	80 95       	com	r24
    1d88:	70 95       	com	r23
    1d8a:	61 95       	neg	r22
    1d8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d8e:	8f 4f       	sbci	r24, 0xFF	; 255
    1d90:	9f 4f       	sbci	r25, 0xFF	; 255
    1d92:	f0 68       	ori	r31, 0x80	; 128
    1d94:	3f 2e       	mov	r3, r31
    1d96:	2a e0       	ldi	r18, 0x0A	; 10
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	a3 01       	movw	r20, r6
    1d9c:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__ultoa_invert>
    1da0:	88 2e       	mov	r8, r24
    1da2:	86 18       	sub	r8, r6
    1da4:	45 c0       	rjmp	.+138    	; 0x1e30 <vfprintf+0x2ac>
    1da6:	85 37       	cpi	r24, 0x75	; 117
    1da8:	31 f4       	brne	.+12     	; 0x1db6 <vfprintf+0x232>
    1daa:	23 2d       	mov	r18, r3
    1dac:	2f 7e       	andi	r18, 0xEF	; 239
    1dae:	b2 2e       	mov	r11, r18
    1db0:	2a e0       	ldi	r18, 0x0A	; 10
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	25 c0       	rjmp	.+74     	; 0x1e00 <vfprintf+0x27c>
    1db6:	93 2d       	mov	r25, r3
    1db8:	99 7f       	andi	r25, 0xF9	; 249
    1dba:	b9 2e       	mov	r11, r25
    1dbc:	8f 36       	cpi	r24, 0x6F	; 111
    1dbe:	c1 f0       	breq	.+48     	; 0x1df0 <vfprintf+0x26c>
    1dc0:	18 f4       	brcc	.+6      	; 0x1dc8 <vfprintf+0x244>
    1dc2:	88 35       	cpi	r24, 0x58	; 88
    1dc4:	79 f0       	breq	.+30     	; 0x1de4 <vfprintf+0x260>
    1dc6:	b5 c0       	rjmp	.+362    	; 0x1f32 <vfprintf+0x3ae>
    1dc8:	80 37       	cpi	r24, 0x70	; 112
    1dca:	19 f0       	breq	.+6      	; 0x1dd2 <vfprintf+0x24e>
    1dcc:	88 37       	cpi	r24, 0x78	; 120
    1dce:	21 f0       	breq	.+8      	; 0x1dd8 <vfprintf+0x254>
    1dd0:	b0 c0       	rjmp	.+352    	; 0x1f32 <vfprintf+0x3ae>
    1dd2:	e9 2f       	mov	r30, r25
    1dd4:	e0 61       	ori	r30, 0x10	; 16
    1dd6:	be 2e       	mov	r11, r30
    1dd8:	b4 fe       	sbrs	r11, 4
    1dda:	0d c0       	rjmp	.+26     	; 0x1df6 <vfprintf+0x272>
    1ddc:	fb 2d       	mov	r31, r11
    1dde:	f4 60       	ori	r31, 0x04	; 4
    1de0:	bf 2e       	mov	r11, r31
    1de2:	09 c0       	rjmp	.+18     	; 0x1df6 <vfprintf+0x272>
    1de4:	34 fe       	sbrs	r3, 4
    1de6:	0a c0       	rjmp	.+20     	; 0x1dfc <vfprintf+0x278>
    1de8:	29 2f       	mov	r18, r25
    1dea:	26 60       	ori	r18, 0x06	; 6
    1dec:	b2 2e       	mov	r11, r18
    1dee:	06 c0       	rjmp	.+12     	; 0x1dfc <vfprintf+0x278>
    1df0:	28 e0       	ldi	r18, 0x08	; 8
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	05 c0       	rjmp	.+10     	; 0x1e00 <vfprintf+0x27c>
    1df6:	20 e1       	ldi	r18, 0x10	; 16
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	02 c0       	rjmp	.+4      	; 0x1e00 <vfprintf+0x27c>
    1dfc:	20 e1       	ldi	r18, 0x10	; 16
    1dfe:	32 e0       	ldi	r19, 0x02	; 2
    1e00:	f8 01       	movw	r30, r16
    1e02:	b7 fe       	sbrs	r11, 7
    1e04:	07 c0       	rjmp	.+14     	; 0x1e14 <vfprintf+0x290>
    1e06:	60 81       	ld	r22, Z
    1e08:	71 81       	ldd	r23, Z+1	; 0x01
    1e0a:	82 81       	ldd	r24, Z+2	; 0x02
    1e0c:	93 81       	ldd	r25, Z+3	; 0x03
    1e0e:	0c 5f       	subi	r16, 0xFC	; 252
    1e10:	1f 4f       	sbci	r17, 0xFF	; 255
    1e12:	06 c0       	rjmp	.+12     	; 0x1e20 <vfprintf+0x29c>
    1e14:	60 81       	ld	r22, Z
    1e16:	71 81       	ldd	r23, Z+1	; 0x01
    1e18:	80 e0       	ldi	r24, 0x00	; 0
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	0e 5f       	subi	r16, 0xFE	; 254
    1e1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e20:	a3 01       	movw	r20, r6
    1e22:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__ultoa_invert>
    1e26:	88 2e       	mov	r8, r24
    1e28:	86 18       	sub	r8, r6
    1e2a:	fb 2d       	mov	r31, r11
    1e2c:	ff 77       	andi	r31, 0x7F	; 127
    1e2e:	3f 2e       	mov	r3, r31
    1e30:	36 fe       	sbrs	r3, 6
    1e32:	0d c0       	rjmp	.+26     	; 0x1e4e <vfprintf+0x2ca>
    1e34:	23 2d       	mov	r18, r3
    1e36:	2e 7f       	andi	r18, 0xFE	; 254
    1e38:	a2 2e       	mov	r10, r18
    1e3a:	89 14       	cp	r8, r9
    1e3c:	58 f4       	brcc	.+22     	; 0x1e54 <vfprintf+0x2d0>
    1e3e:	34 fe       	sbrs	r3, 4
    1e40:	0b c0       	rjmp	.+22     	; 0x1e58 <vfprintf+0x2d4>
    1e42:	32 fc       	sbrc	r3, 2
    1e44:	09 c0       	rjmp	.+18     	; 0x1e58 <vfprintf+0x2d4>
    1e46:	83 2d       	mov	r24, r3
    1e48:	8e 7e       	andi	r24, 0xEE	; 238
    1e4a:	a8 2e       	mov	r10, r24
    1e4c:	05 c0       	rjmp	.+10     	; 0x1e58 <vfprintf+0x2d4>
    1e4e:	b8 2c       	mov	r11, r8
    1e50:	a3 2c       	mov	r10, r3
    1e52:	03 c0       	rjmp	.+6      	; 0x1e5a <vfprintf+0x2d6>
    1e54:	b8 2c       	mov	r11, r8
    1e56:	01 c0       	rjmp	.+2      	; 0x1e5a <vfprintf+0x2d6>
    1e58:	b9 2c       	mov	r11, r9
    1e5a:	a4 fe       	sbrs	r10, 4
    1e5c:	0f c0       	rjmp	.+30     	; 0x1e7c <vfprintf+0x2f8>
    1e5e:	fe 01       	movw	r30, r28
    1e60:	e8 0d       	add	r30, r8
    1e62:	f1 1d       	adc	r31, r1
    1e64:	80 81       	ld	r24, Z
    1e66:	80 33       	cpi	r24, 0x30	; 48
    1e68:	21 f4       	brne	.+8      	; 0x1e72 <vfprintf+0x2ee>
    1e6a:	9a 2d       	mov	r25, r10
    1e6c:	99 7e       	andi	r25, 0xE9	; 233
    1e6e:	a9 2e       	mov	r10, r25
    1e70:	09 c0       	rjmp	.+18     	; 0x1e84 <vfprintf+0x300>
    1e72:	a2 fe       	sbrs	r10, 2
    1e74:	06 c0       	rjmp	.+12     	; 0x1e82 <vfprintf+0x2fe>
    1e76:	b3 94       	inc	r11
    1e78:	b3 94       	inc	r11
    1e7a:	04 c0       	rjmp	.+8      	; 0x1e84 <vfprintf+0x300>
    1e7c:	8a 2d       	mov	r24, r10
    1e7e:	86 78       	andi	r24, 0x86	; 134
    1e80:	09 f0       	breq	.+2      	; 0x1e84 <vfprintf+0x300>
    1e82:	b3 94       	inc	r11
    1e84:	a3 fc       	sbrc	r10, 3
    1e86:	11 c0       	rjmp	.+34     	; 0x1eaa <vfprintf+0x326>
    1e88:	a0 fe       	sbrs	r10, 0
    1e8a:	06 c0       	rjmp	.+12     	; 0x1e98 <vfprintf+0x314>
    1e8c:	b2 14       	cp	r11, r2
    1e8e:	88 f4       	brcc	.+34     	; 0x1eb2 <vfprintf+0x32e>
    1e90:	28 0c       	add	r2, r8
    1e92:	92 2c       	mov	r9, r2
    1e94:	9b 18       	sub	r9, r11
    1e96:	0e c0       	rjmp	.+28     	; 0x1eb4 <vfprintf+0x330>
    1e98:	b2 14       	cp	r11, r2
    1e9a:	60 f4       	brcc	.+24     	; 0x1eb4 <vfprintf+0x330>
    1e9c:	b6 01       	movw	r22, r12
    1e9e:	80 e2       	ldi	r24, 0x20	; 32
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <fputc>
    1ea6:	b3 94       	inc	r11
    1ea8:	f7 cf       	rjmp	.-18     	; 0x1e98 <vfprintf+0x314>
    1eaa:	b2 14       	cp	r11, r2
    1eac:	18 f4       	brcc	.+6      	; 0x1eb4 <vfprintf+0x330>
    1eae:	2b 18       	sub	r2, r11
    1eb0:	02 c0       	rjmp	.+4      	; 0x1eb6 <vfprintf+0x332>
    1eb2:	98 2c       	mov	r9, r8
    1eb4:	21 2c       	mov	r2, r1
    1eb6:	a4 fe       	sbrs	r10, 4
    1eb8:	10 c0       	rjmp	.+32     	; 0x1eda <vfprintf+0x356>
    1eba:	b6 01       	movw	r22, r12
    1ebc:	80 e3       	ldi	r24, 0x30	; 48
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <fputc>
    1ec4:	a2 fe       	sbrs	r10, 2
    1ec6:	17 c0       	rjmp	.+46     	; 0x1ef6 <vfprintf+0x372>
    1ec8:	a1 fc       	sbrc	r10, 1
    1eca:	03 c0       	rjmp	.+6      	; 0x1ed2 <vfprintf+0x34e>
    1ecc:	88 e7       	ldi	r24, 0x78	; 120
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	02 c0       	rjmp	.+4      	; 0x1ed6 <vfprintf+0x352>
    1ed2:	88 e5       	ldi	r24, 0x58	; 88
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	b6 01       	movw	r22, r12
    1ed8:	0c c0       	rjmp	.+24     	; 0x1ef2 <vfprintf+0x36e>
    1eda:	8a 2d       	mov	r24, r10
    1edc:	86 78       	andi	r24, 0x86	; 134
    1ede:	59 f0       	breq	.+22     	; 0x1ef6 <vfprintf+0x372>
    1ee0:	a1 fe       	sbrs	r10, 1
    1ee2:	02 c0       	rjmp	.+4      	; 0x1ee8 <vfprintf+0x364>
    1ee4:	8b e2       	ldi	r24, 0x2B	; 43
    1ee6:	01 c0       	rjmp	.+2      	; 0x1eea <vfprintf+0x366>
    1ee8:	80 e2       	ldi	r24, 0x20	; 32
    1eea:	a7 fc       	sbrc	r10, 7
    1eec:	8d e2       	ldi	r24, 0x2D	; 45
    1eee:	b6 01       	movw	r22, r12
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <fputc>
    1ef6:	89 14       	cp	r8, r9
    1ef8:	38 f4       	brcc	.+14     	; 0x1f08 <vfprintf+0x384>
    1efa:	b6 01       	movw	r22, r12
    1efc:	80 e3       	ldi	r24, 0x30	; 48
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <fputc>
    1f04:	9a 94       	dec	r9
    1f06:	f7 cf       	rjmp	.-18     	; 0x1ef6 <vfprintf+0x372>
    1f08:	8a 94       	dec	r8
    1f0a:	f3 01       	movw	r30, r6
    1f0c:	e8 0d       	add	r30, r8
    1f0e:	f1 1d       	adc	r31, r1
    1f10:	80 81       	ld	r24, Z
    1f12:	b6 01       	movw	r22, r12
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <fputc>
    1f1a:	81 10       	cpse	r8, r1
    1f1c:	f5 cf       	rjmp	.-22     	; 0x1f08 <vfprintf+0x384>
    1f1e:	22 20       	and	r2, r2
    1f20:	09 f4       	brne	.+2      	; 0x1f24 <vfprintf+0x3a0>
    1f22:	42 ce       	rjmp	.-892    	; 0x1ba8 <vfprintf+0x24>
    1f24:	b6 01       	movw	r22, r12
    1f26:	80 e2       	ldi	r24, 0x20	; 32
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <fputc>
    1f2e:	2a 94       	dec	r2
    1f30:	f6 cf       	rjmp	.-20     	; 0x1f1e <vfprintf+0x39a>
    1f32:	f6 01       	movw	r30, r12
    1f34:	86 81       	ldd	r24, Z+6	; 0x06
    1f36:	97 81       	ldd	r25, Z+7	; 0x07
    1f38:	02 c0       	rjmp	.+4      	; 0x1f3e <vfprintf+0x3ba>
    1f3a:	8f ef       	ldi	r24, 0xFF	; 255
    1f3c:	9f ef       	ldi	r25, 0xFF	; 255
    1f3e:	2b 96       	adiw	r28, 0x0b	; 11
    1f40:	e2 e1       	ldi	r30, 0x12	; 18
    1f42:	0c 94 6f 10 	jmp	0x20de	; 0x20de <__epilogue_restores__>

00001f46 <strnlen_P>:
    1f46:	fc 01       	movw	r30, r24
    1f48:	05 90       	lpm	r0, Z+
    1f4a:	61 50       	subi	r22, 0x01	; 1
    1f4c:	70 40       	sbci	r23, 0x00	; 0
    1f4e:	01 10       	cpse	r0, r1
    1f50:	d8 f7       	brcc	.-10     	; 0x1f48 <strnlen_P+0x2>
    1f52:	80 95       	com	r24
    1f54:	90 95       	com	r25
    1f56:	8e 0f       	add	r24, r30
    1f58:	9f 1f       	adc	r25, r31
    1f5a:	08 95       	ret

00001f5c <strnlen>:
    1f5c:	fc 01       	movw	r30, r24
    1f5e:	61 50       	subi	r22, 0x01	; 1
    1f60:	70 40       	sbci	r23, 0x00	; 0
    1f62:	01 90       	ld	r0, Z+
    1f64:	01 10       	cpse	r0, r1
    1f66:	d8 f7       	brcc	.-10     	; 0x1f5e <strnlen+0x2>
    1f68:	80 95       	com	r24
    1f6a:	90 95       	com	r25
    1f6c:	8e 0f       	add	r24, r30
    1f6e:	9f 1f       	adc	r25, r31
    1f70:	08 95       	ret

00001f72 <fputc>:
    1f72:	0f 93       	push	r16
    1f74:	1f 93       	push	r17
    1f76:	cf 93       	push	r28
    1f78:	df 93       	push	r29
    1f7a:	fb 01       	movw	r30, r22
    1f7c:	23 81       	ldd	r18, Z+3	; 0x03
    1f7e:	21 fd       	sbrc	r18, 1
    1f80:	03 c0       	rjmp	.+6      	; 0x1f88 <fputc+0x16>
    1f82:	8f ef       	ldi	r24, 0xFF	; 255
    1f84:	9f ef       	ldi	r25, 0xFF	; 255
    1f86:	2c c0       	rjmp	.+88     	; 0x1fe0 <fputc+0x6e>
    1f88:	22 ff       	sbrs	r18, 2
    1f8a:	16 c0       	rjmp	.+44     	; 0x1fb8 <fputc+0x46>
    1f8c:	46 81       	ldd	r20, Z+6	; 0x06
    1f8e:	57 81       	ldd	r21, Z+7	; 0x07
    1f90:	24 81       	ldd	r18, Z+4	; 0x04
    1f92:	35 81       	ldd	r19, Z+5	; 0x05
    1f94:	42 17       	cp	r20, r18
    1f96:	53 07       	cpc	r21, r19
    1f98:	44 f4       	brge	.+16     	; 0x1faa <fputc+0x38>
    1f9a:	a0 81       	ld	r26, Z
    1f9c:	b1 81       	ldd	r27, Z+1	; 0x01
    1f9e:	9d 01       	movw	r18, r26
    1fa0:	2f 5f       	subi	r18, 0xFF	; 255
    1fa2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa4:	31 83       	std	Z+1, r19	; 0x01
    1fa6:	20 83       	st	Z, r18
    1fa8:	8c 93       	st	X, r24
    1faa:	26 81       	ldd	r18, Z+6	; 0x06
    1fac:	37 81       	ldd	r19, Z+7	; 0x07
    1fae:	2f 5f       	subi	r18, 0xFF	; 255
    1fb0:	3f 4f       	sbci	r19, 0xFF	; 255
    1fb2:	37 83       	std	Z+7, r19	; 0x07
    1fb4:	26 83       	std	Z+6, r18	; 0x06
    1fb6:	14 c0       	rjmp	.+40     	; 0x1fe0 <fputc+0x6e>
    1fb8:	8b 01       	movw	r16, r22
    1fba:	ec 01       	movw	r28, r24
    1fbc:	fb 01       	movw	r30, r22
    1fbe:	00 84       	ldd	r0, Z+8	; 0x08
    1fc0:	f1 85       	ldd	r31, Z+9	; 0x09
    1fc2:	e0 2d       	mov	r30, r0
    1fc4:	09 95       	icall
    1fc6:	89 2b       	or	r24, r25
    1fc8:	e1 f6       	brne	.-72     	; 0x1f82 <fputc+0x10>
    1fca:	d8 01       	movw	r26, r16
    1fcc:	16 96       	adiw	r26, 0x06	; 6
    1fce:	8d 91       	ld	r24, X+
    1fd0:	9c 91       	ld	r25, X
    1fd2:	17 97       	sbiw	r26, 0x07	; 7
    1fd4:	01 96       	adiw	r24, 0x01	; 1
    1fd6:	17 96       	adiw	r26, 0x07	; 7
    1fd8:	9c 93       	st	X, r25
    1fda:	8e 93       	st	-X, r24
    1fdc:	16 97       	sbiw	r26, 0x06	; 6
    1fde:	ce 01       	movw	r24, r28
    1fe0:	df 91       	pop	r29
    1fe2:	cf 91       	pop	r28
    1fe4:	1f 91       	pop	r17
    1fe6:	0f 91       	pop	r16
    1fe8:	08 95       	ret

00001fea <__ultoa_invert>:
    1fea:	fa 01       	movw	r30, r20
    1fec:	aa 27       	eor	r26, r26
    1fee:	28 30       	cpi	r18, 0x08	; 8
    1ff0:	51 f1       	breq	.+84     	; 0x2046 <__ultoa_invert+0x5c>
    1ff2:	20 31       	cpi	r18, 0x10	; 16
    1ff4:	81 f1       	breq	.+96     	; 0x2056 <__ultoa_invert+0x6c>
    1ff6:	e8 94       	clt
    1ff8:	6f 93       	push	r22
    1ffa:	6e 7f       	andi	r22, 0xFE	; 254
    1ffc:	6e 5f       	subi	r22, 0xFE	; 254
    1ffe:	7f 4f       	sbci	r23, 0xFF	; 255
    2000:	8f 4f       	sbci	r24, 0xFF	; 255
    2002:	9f 4f       	sbci	r25, 0xFF	; 255
    2004:	af 4f       	sbci	r26, 0xFF	; 255
    2006:	b1 e0       	ldi	r27, 0x01	; 1
    2008:	3e d0       	rcall	.+124    	; 0x2086 <__ultoa_invert+0x9c>
    200a:	b4 e0       	ldi	r27, 0x04	; 4
    200c:	3c d0       	rcall	.+120    	; 0x2086 <__ultoa_invert+0x9c>
    200e:	67 0f       	add	r22, r23
    2010:	78 1f       	adc	r23, r24
    2012:	89 1f       	adc	r24, r25
    2014:	9a 1f       	adc	r25, r26
    2016:	a1 1d       	adc	r26, r1
    2018:	68 0f       	add	r22, r24
    201a:	79 1f       	adc	r23, r25
    201c:	8a 1f       	adc	r24, r26
    201e:	91 1d       	adc	r25, r1
    2020:	a1 1d       	adc	r26, r1
    2022:	6a 0f       	add	r22, r26
    2024:	71 1d       	adc	r23, r1
    2026:	81 1d       	adc	r24, r1
    2028:	91 1d       	adc	r25, r1
    202a:	a1 1d       	adc	r26, r1
    202c:	20 d0       	rcall	.+64     	; 0x206e <__ultoa_invert+0x84>
    202e:	09 f4       	brne	.+2      	; 0x2032 <__ultoa_invert+0x48>
    2030:	68 94       	set
    2032:	3f 91       	pop	r19
    2034:	2a e0       	ldi	r18, 0x0A	; 10
    2036:	26 9f       	mul	r18, r22
    2038:	11 24       	eor	r1, r1
    203a:	30 19       	sub	r19, r0
    203c:	30 5d       	subi	r19, 0xD0	; 208
    203e:	31 93       	st	Z+, r19
    2040:	de f6       	brtc	.-74     	; 0x1ff8 <__ultoa_invert+0xe>
    2042:	cf 01       	movw	r24, r30
    2044:	08 95       	ret
    2046:	46 2f       	mov	r20, r22
    2048:	47 70       	andi	r20, 0x07	; 7
    204a:	40 5d       	subi	r20, 0xD0	; 208
    204c:	41 93       	st	Z+, r20
    204e:	b3 e0       	ldi	r27, 0x03	; 3
    2050:	0f d0       	rcall	.+30     	; 0x2070 <__ultoa_invert+0x86>
    2052:	c9 f7       	brne	.-14     	; 0x2046 <__ultoa_invert+0x5c>
    2054:	f6 cf       	rjmp	.-20     	; 0x2042 <__ultoa_invert+0x58>
    2056:	46 2f       	mov	r20, r22
    2058:	4f 70       	andi	r20, 0x0F	; 15
    205a:	40 5d       	subi	r20, 0xD0	; 208
    205c:	4a 33       	cpi	r20, 0x3A	; 58
    205e:	18 f0       	brcs	.+6      	; 0x2066 <__ultoa_invert+0x7c>
    2060:	49 5d       	subi	r20, 0xD9	; 217
    2062:	31 fd       	sbrc	r19, 1
    2064:	40 52       	subi	r20, 0x20	; 32
    2066:	41 93       	st	Z+, r20
    2068:	02 d0       	rcall	.+4      	; 0x206e <__ultoa_invert+0x84>
    206a:	a9 f7       	brne	.-22     	; 0x2056 <__ultoa_invert+0x6c>
    206c:	ea cf       	rjmp	.-44     	; 0x2042 <__ultoa_invert+0x58>
    206e:	b4 e0       	ldi	r27, 0x04	; 4
    2070:	a6 95       	lsr	r26
    2072:	97 95       	ror	r25
    2074:	87 95       	ror	r24
    2076:	77 95       	ror	r23
    2078:	67 95       	ror	r22
    207a:	ba 95       	dec	r27
    207c:	c9 f7       	brne	.-14     	; 0x2070 <__ultoa_invert+0x86>
    207e:	00 97       	sbiw	r24, 0x00	; 0
    2080:	61 05       	cpc	r22, r1
    2082:	71 05       	cpc	r23, r1
    2084:	08 95       	ret
    2086:	9b 01       	movw	r18, r22
    2088:	ac 01       	movw	r20, r24
    208a:	0a 2e       	mov	r0, r26
    208c:	06 94       	lsr	r0
    208e:	57 95       	ror	r21
    2090:	47 95       	ror	r20
    2092:	37 95       	ror	r19
    2094:	27 95       	ror	r18
    2096:	ba 95       	dec	r27
    2098:	c9 f7       	brne	.-14     	; 0x208c <__ultoa_invert+0xa2>
    209a:	62 0f       	add	r22, r18
    209c:	73 1f       	adc	r23, r19
    209e:	84 1f       	adc	r24, r20
    20a0:	95 1f       	adc	r25, r21
    20a2:	a0 1d       	adc	r26, r0
    20a4:	08 95       	ret

000020a6 <__prologue_saves__>:
    20a6:	2f 92       	push	r2
    20a8:	3f 92       	push	r3
    20aa:	4f 92       	push	r4
    20ac:	5f 92       	push	r5
    20ae:	6f 92       	push	r6
    20b0:	7f 92       	push	r7
    20b2:	8f 92       	push	r8
    20b4:	9f 92       	push	r9
    20b6:	af 92       	push	r10
    20b8:	bf 92       	push	r11
    20ba:	cf 92       	push	r12
    20bc:	df 92       	push	r13
    20be:	ef 92       	push	r14
    20c0:	ff 92       	push	r15
    20c2:	0f 93       	push	r16
    20c4:	1f 93       	push	r17
    20c6:	cf 93       	push	r28
    20c8:	df 93       	push	r29
    20ca:	cd b7       	in	r28, 0x3d	; 61
    20cc:	de b7       	in	r29, 0x3e	; 62
    20ce:	ca 1b       	sub	r28, r26
    20d0:	db 0b       	sbc	r29, r27
    20d2:	0f b6       	in	r0, 0x3f	; 63
    20d4:	f8 94       	cli
    20d6:	de bf       	out	0x3e, r29	; 62
    20d8:	0f be       	out	0x3f, r0	; 63
    20da:	cd bf       	out	0x3d, r28	; 61
    20dc:	09 94       	ijmp

000020de <__epilogue_restores__>:
    20de:	2a 88       	ldd	r2, Y+18	; 0x12
    20e0:	39 88       	ldd	r3, Y+17	; 0x11
    20e2:	48 88       	ldd	r4, Y+16	; 0x10
    20e4:	5f 84       	ldd	r5, Y+15	; 0x0f
    20e6:	6e 84       	ldd	r6, Y+14	; 0x0e
    20e8:	7d 84       	ldd	r7, Y+13	; 0x0d
    20ea:	8c 84       	ldd	r8, Y+12	; 0x0c
    20ec:	9b 84       	ldd	r9, Y+11	; 0x0b
    20ee:	aa 84       	ldd	r10, Y+10	; 0x0a
    20f0:	b9 84       	ldd	r11, Y+9	; 0x09
    20f2:	c8 84       	ldd	r12, Y+8	; 0x08
    20f4:	df 80       	ldd	r13, Y+7	; 0x07
    20f6:	ee 80       	ldd	r14, Y+6	; 0x06
    20f8:	fd 80       	ldd	r15, Y+5	; 0x05
    20fa:	0c 81       	ldd	r16, Y+4	; 0x04
    20fc:	1b 81       	ldd	r17, Y+3	; 0x03
    20fe:	aa 81       	ldd	r26, Y+2	; 0x02
    2100:	b9 81       	ldd	r27, Y+1	; 0x01
    2102:	ce 0f       	add	r28, r30
    2104:	d1 1d       	adc	r29, r1
    2106:	0f b6       	in	r0, 0x3f	; 63
    2108:	f8 94       	cli
    210a:	de bf       	out	0x3e, r29	; 62
    210c:	0f be       	out	0x3f, r0	; 63
    210e:	cd bf       	out	0x3d, r28	; 61
    2110:	ed 01       	movw	r28, r26
    2112:	08 95       	ret

00002114 <_exit>:
    2114:	f8 94       	cli

00002116 <__stop_program>:
    2116:	ff cf       	rjmp	.-2      	; 0x2116 <__stop_program>
